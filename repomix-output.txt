This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
dockerfile
eslint.config.js
index.html
package.json
postcss.config.js
public/vite.svg
README.md
src/App.css
src/App.jsx
src/assets/react.svg
src/components/activity/ActivityFilter.jsx
src/components/activity/NoteActivityTimeline.jsx
src/components/activity/TaskActivityTimeline.jsx
src/components/activity/UserActivityTimeline.jsx
src/components/common/DeleteConfirmationModal.jsx
src/components/common/Pagination.jsx
src/components/common/Tabs.jsx
src/components/dashboard/ActivityFeed.jsx
src/components/dashboard/RecentTasksCard.jsx
src/components/dashboard/TaskStatisticsCard.jsx
src/components/layout/Header.jsx
src/components/layout/MainLayout.jsx
src/components/layout/Sidebar.jsx
src/components/notes/NoteCard.jsx
src/components/notes/NoteForm.jsx
src/components/notes/NoteModal.jsx
src/components/notes/NotesDetail.jsx
src/components/notes/NotesFilter.jsx
src/components/profile/ProfileAccount.jsx
src/components/profile/ProfileInfo.jsx
src/components/profile/ProfilePreferences.jsx
src/components/profile/ProfileStatistics.jsx
src/components/schedule/CalendarDay.jsx
src/components/schedule/CalendarDragDrop.jsx
src/components/schedule/CalendarMonth.jsx
src/components/schedule/CalendarWeek.jsx
src/components/schedule/EventModal.jsx
src/components/schedule/ScheduleList.jsx
src/components/tasks/CommentForm.jsx
src/components/tasks/SortableTaskCard.jsx
src/components/tasks/TaskActivities.jsx
src/components/tasks/TaskCard.jsx
src/components/tasks/TaskColumn.jsx
src/components/tasks/TaskComments.jsx
src/components/tasks/TaskEdit.jsx
src/components/tasks/TaskFilters.jsx
src/components/tasks/TaskForm.jsx
src/config/axios.js
src/context/AuthContext.jsx
src/context/NoteContext.jsx
src/context/TaskContext.jsx
src/context/ThemeContext.jsx
src/hooks/useAuth.js
src/hooks/useCalendar.js
src/hooks/useNotes.js
src/hooks/useTasks.js
src/hooks/useTheme.js
src/main.jsx
src/pages/activities/ActivitiesPage.jsx
src/pages/auth/ForgotPassword.jsx
src/pages/auth/Login.jsx
src/pages/auth/Register.jsx
src/pages/auth/ResetPassword.jsx
src/pages/dashboard/Dashboard.jsx
src/pages/notes/NotesPage.jsx
src/pages/NotFound.jsx
src/pages/profile/UserProfile.jsx
src/pages/schedule/SchedulePage.jsx
src/pages/tasks/TaskBoard.jsx
src/pages/tasks/TaskDetail.jsx
src/routes.jsx
src/services/activityService.js
src/services/authService.js
src/services/commentService.js
src/services/noteService.js
src/services/taskService.js
src/services/userService.js
src/styles/index.css
src/styles/themes.css
src/utils/calenderUtils.js
tailwind.config.js
vite.config.js

================================================================
Files
================================================================

================
File: dockerfile
================
FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy app source
COPY . .

# Expose development server port
EXPOSE 3000

# Start in development mode
CMD ["npm", "run", "dev"]

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/logo.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Weid - Management</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "weid-frontend",
  "private": true,
  "version": "0.1.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@dnd-kit/core": "^6.3.1",
    "@dnd-kit/sortable": "^10.0.0",
    "@dnd-kit/utilities": "^3.2.2",
    "axios": "^1.6.2",
    "formik": "^2.4.5",
    "react": "^18.2.0",
    "react-beautiful-dnd": "^13.1.1",
    "react-dom": "^18.2.0",
    "react-icons": "^4.12.0",
    "react-router-dom": "^6.18.0",
    "yup": "^1.3.2"
  },
  "devDependencies": {
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.7",
    "@vitejs/plugin-react": "^4.0.3",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.45.0",
    "eslint-plugin-react": "^7.32.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.3",
    "postcss": "^8.4.31",
    "tailwindcss": "^3.3.5",
    "vite": "^4.4.5"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: README.md
================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript and enable type-aware lint rules. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.

================
File: src/App.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    @apply bg-gray-50 text-gray-900 font-sans;
  }

  h1, h2, h3, h4, h5, h6 {
    @apply font-medium;
  }
}

@layer components {
  .btn {
    @apply flex items-center justify-center px-4 py-2 rounded-md font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2;
  }

  .btn-primary {
    @apply bg-primary-600 text-white hover:bg-primary-700 focus:ring-primary-500;
  }

  .btn-secondary {
    @apply bg-secondary-100 text-secondary-800 hover:bg-secondary-200 focus:ring-secondary-500;
  }

  .btn-outline {
    @apply border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 focus:ring-primary-500;
  }

  .input {
    @apply w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500;
  }

  .label {
    @apply block text-sm font-medium text-gray-700 mb-1;
  }

  .error {
    @apply text-red-600 text-sm mt-1;
  }

  .card {
    @apply bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden;
  }

  .sidebar-link {
    @apply flex items-center gap-3 px-3 py-2 rounded-md text-gray-700 hover:bg-gray-100 font-medium transition-colors;
  }

  .sidebar-link.active {
    @apply bg-primary-50 text-primary-700;
  }
}

================
File: src/App.jsx
================
import { useRoutes } from 'react-router-dom'
import { useAuth } from './hooks/useAuth'
import routes from './routes'

function App() {
  const { isAuthenticated, loading } = useAuth()
  const routing = useRoutes(routes(isAuthenticated))

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="w-12 h-12 border-4 border-primary-500 rounded-full border-t-transparent animate-spin"></div>
      </div>
    )
  }

  return routing
}

export default App

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/activity/ActivityFilter.jsx
================
import { useState, useEffect } from 'react';
import {
  FiX,
  FiFilter,
  FiCalendar,
  FiTag,
  FiUser,
  FiActivity
} from 'react-icons/fi';

const ActivityFilters = ({ selectedFilters, setSelectedFilters, clearFilters, activityTypes = [] }) => {
  const [users, setUsers] = useState([]);

  // Fetch users
  useEffect(() => {
    // In a real application, these would be fetched from the API
    // For now, we'll use mock data
    setUsers([
      { _id: 'user1', name: 'John Doe', avatar: null },
      { _id: 'user2', name: 'Jane Smith', avatar: null },
      { _id: 'user3', name: 'Bob Johnson', avatar: null },
    ]);
  }, []);

  // Handle activity type filter change
  const handleTypeChange = (type) => {
    setSelectedFilters(prev => {
      const newTypes = [...prev.type];
      const typeIndex = newTypes.indexOf(type);

      if (typeIndex === -1) {
        newTypes.push(type);
      } else {
        newTypes.splice(typeIndex, 1);
      }

      return { ...prev, type: newTypes };
    });
  };

  // Handle user filter change
  const handleUserChange = (userId) => {
    setSelectedFilters(prev => {
      const newUsers = [...prev.users];
      const userIndex = newUsers.indexOf(userId);

      if (userIndex === -1) {
        newUsers.push(userId);
      } else {
        newUsers.splice(userIndex, 1);
      }

      return { ...prev, users: newUsers };
    });
  };

  // Handle date range filter change
  const handleDateChange = (e) => {
    const { name, value } = e.target;

    setSelectedFilters(prev => {
      const newDateRange = { ...prev.dateRange || {} };
      newDateRange[name] = value ? value : '';

      // If both dates are empty, set dateRange to null
      if (!newDateRange.createdStart && !newDateRange.createdEnd) {
        return { ...prev, dateRange: null };
      }

      return { ...prev, dateRange: newDateRange };
    });
  };

  // Format activity type for display
  const formatActivityType = (type) => {
    return type
      .split('_')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  };

  // Check if any filter is active
  const hasActiveFilters = Object.values(selectedFilters).some(
    filter => Array.isArray(filter) ? filter.length > 0 : !!filter
  );

  return (
    <div className="bg-white rounded-xl border border-gray-200 shadow-sm p-6 mb-6">
      <div className="flex justify-between items-center mb-6">
        <div className="flex items-center">
          <FiFilter className="h-5 w-5 text-violet-600 mr-2" />
          <h3 className="text-lg font-medium text-gray-900">Filters</h3>
        </div>

        {hasActiveFilters && (
          <button
            type="button"
            onClick={clearFilters}
            className="text-sm text-violet-600 hover:text-violet-700 font-medium flex items-center"
          >
            <FiX className="mr-1" /> Clear all
          </button>
        )}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {/* Activity Type filters */}
        <div>
          <h4 className="text-sm font-medium text-gray-700 mb-3">Activity Type</h4>
          <div className="space-y-2 max-h-48 overflow-y-auto">
            {activityTypes.map(type => {
              const isSelected = selectedFilters.type.includes(type);
              return (
                <label
                  key={type}
                  className={`flex items-center p-3 rounded-lg cursor-pointer transition-colors ${
                    isSelected ? 'bg-violet-50 border border-violet-200' : 'hover:bg-gray-50 border border-transparent'
                  }`}
                >
                  <input
                    type="checkbox"
                    className="h-4 w-4 text-violet-600 rounded border-gray-300 focus:ring-violet-500"
                    checked={isSelected}
                    onChange={() => handleTypeChange(type)}
                  />
                  <span className="ml-3 flex items-center text-sm text-gray-700">
                    <FiActivity className="mr-1 h-3 w-3" />
                    {formatActivityType(type)}
                  </span>
                </label>
              );
            })}
          </div>
        </div>

        {/* User filters */}
        <div>
          <h4 className="text-sm font-medium text-gray-700 mb-3">User</h4>
          <div className="space-y-2 max-h-48 overflow-y-auto">
            {users.map(user => {
              const isSelected = selectedFilters.users?.includes(user._id);
              return (
                <label
                  key={user._id}
                  className={`flex items-center p-3 rounded-lg cursor-pointer transition-colors ${
                    isSelected ? 'bg-violet-50 border border-violet-200' : 'hover:bg-gray-50 border border-transparent'
                  }`}
                >
                  <input
                    type="checkbox"
                    className="h-4 w-4 text-violet-600 rounded border-gray-300 focus:ring-violet-500"
                    checked={isSelected}
                    onChange={() => handleUserChange(user._id)}
                  />
                  <span className="ml-3 text-sm text-gray-700 flex items-center">
                    <FiUser className="mr-1 h-3 w-3" />
                    {user.name}
                  </span>
                </label>
              );
            })}
          </div>
        </div>

        {/* Date range filters */}
        <div>
          <h4 className="text-sm font-medium text-gray-700 mb-3">Date Range</h4>
          <div className="space-y-3">
            <div>
              <label className="text-xs text-gray-500 block mb-1">From</label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FiCalendar className="h-4 w-4 text-gray-400" />
                </div>
                <input
                  type="date"
                  name="createdStart"
                  className="appearance-none block w-full pl-10 pr-3 py-2.5 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-violet-500 focus:border-violet-500 text-sm"
                  value={selectedFilters.dateRange?.createdStart || ''}
                  onChange={handleDateChange}
                />
              </div>
            </div>

            <div>
              <label className="text-xs text-gray-500 block mb-1">To</label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FiCalendar className="h-4 w-4 text-gray-400" />
                </div>
                <input
                  type="date"
                  name="createdEnd"
                  className="appearance-none block w-full pl-10 pr-3 py-2.5 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-violet-500 focus:border-violet-500 text-sm"
                  value={selectedFilters.dateRange?.createdEnd || ''}
                  onChange={handleDateChange}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ActivityFilters;

================
File: src/components/activity/NoteActivityTimeline.jsx
================
import { useState, useEffect } from 'react';
import {
  FiActivity, FiRefreshCw, FiEdit, FiPlus,
  FiPaperclip, FiTag, FiInfo, FiAlertCircle,
  FiStar, FiBookmark, FiTrash2
} from 'react-icons/fi';
import activityService from '../../services/activityService';

const NoteActivityTimeline = ({ noteId }) => {
  const [activities, setActivities] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Load note activities on component mount
  useEffect(() => {
    if (!noteId) {
      setError('Note ID is required');
      setLoading(false);
      return;
    }

    fetchNoteActivities();
  }, [noteId]);

  // Function to fetch note activities
  const fetchNoteActivities = async () => {
    try {
      setLoading(true);
      setError(null);

      const noteActivities = await activityService.getNoteHistory(noteId);
      setActivities(Array.isArray(noteActivities) ? noteActivities : []);
    } catch (err) {
      console.error('Error fetching note activities:', err);
      setError(err.message || 'Failed to load note activities. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Activity type configurations for icons and styles
  const activityTypeConfig = {
    note_created: {
      icon: <div className="h-8 w-8 rounded-full bg-green-100 flex items-center justify-center text-green-600">
              <FiPlus className="h-4 w-4" />
            </div>,
      label: 'Note Created'
    },
    note_updated: {
      icon: <div className="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center text-blue-600">
              <FiEdit className="h-4 w-4" />
            </div>,
      label: 'Note Updated'
    },
    note_pinned: {
      icon: <div className="h-8 w-8 rounded-full bg-amber-100 flex items-center justify-center text-amber-600">
              <FiStar className="h-4 w-4" />
            </div>,
      label: 'Note Pinned'
    },
    note_unpinned: {
      icon: <div className="h-8 w-8 rounded-full bg-gray-100 flex items-center justify-center text-gray-600">
              <FiStar className="h-4 w-4" />
            </div>,
      label: 'Note Unpinned'
    },
    note_deleted: {
      icon: <div className="h-8 w-8 rounded-full bg-red-100 flex items-center justify-center text-red-600">
              <FiTrash2 className="h-4 w-4" />
            </div>,
      label: 'Note Deleted'
    },
    note_tag_added: {
      icon: <div className="h-8 w-8 rounded-full bg-indigo-100 flex items-center justify-center text-indigo-600">
              <FiTag className="h-4 w-4" />
            </div>,
      label: 'Tag Added'
    },
    note_category_changed: {
      icon: <div className="h-8 w-8 rounded-full bg-purple-100 flex items-center justify-center text-purple-600">
              <FiBookmark className="h-4 w-4" />
            </div>,
      label: 'Category Changed'
    },
    note_attachment_added: {
      icon: <div className="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center text-blue-600">
              <FiPaperclip className="h-4 w-4" />
            </div>,
      label: 'Attachment Added'
    }
  };

  // Format date for display
  const formatDate = (dateString) => {
    if (!dateString) return '';

    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Format relative time (e.g., "2 hours ago")
  const formatRelativeTime = (dateString) => {
    if (!dateString) return '';

    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now - date;
    const diffSec = Math.floor(diffMs / 1000);
    const diffMin = Math.floor(diffSec / 60);
    const diffHour = Math.floor(diffMin / 60);
    const diffDay = Math.floor(diffHour / 24);

    if (diffSec < 60) {
      return 'just now';
    } else if (diffMin < 60) {
      return `${diffMin}m ago`;
    } else if (diffHour < 24) {
      return `${diffHour}h ago`;
    } else if (diffDay < 7) {
      return `${diffDay}d ago`;
    } else {
      return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
    }
  };

  return (
    <div className="bg-white rounded-lg shadow overflow-hidden">
      <div className="flex justify-between items-center p-4 border-b">
        <h3 className="text-lg font-medium text-gray-900">Note History</h3>
        <button
          onClick={fetchNoteActivities}
          className="flex items-center text-sm text-violet-600 hover:text-violet-800"
        >
          <FiRefreshCw className="mr-1 h-4 w-4" /> Refresh
        </button>
      </div>

      <div className="p-1">
        {loading ? (
          <div className="flex items-center justify-center p-8">
            <div className="w-10 h-10 border-4 border-violet-500 rounded-full border-t-transparent animate-spin"></div>
          </div>
        ) : error ? (
          <div className="p-6 text-center">
            <div className="text-red-500 mb-2">
              <FiAlertCircle className="h-10 w-10 mx-auto" />
            </div>
            <p className="text-gray-700 mb-4">{error}</p>
            <button
              className="inline-flex items-center px-3 py-1.5 border border-transparent rounded-md text-sm font-medium text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500"
              onClick={fetchNoteActivities}
            >
              <FiRefreshCw className="mr-1.5 h-4 w-4" /> Try Again
            </button>
          </div>
        ) : activities.length === 0 ? (
          <div className="p-8 text-center">
            <FiInfo className="h-10 w-10 mx-auto text-gray-400" />
            <p className="mt-2 text-gray-500">No activity history found for this note.</p>
          </div>
        ) : (
          <div className="divide-y divide-gray-100">
            {activities.map((activity) => {
              const config = activityTypeConfig[activity.type] || {
                icon: <div className="h-8 w-8 rounded-full bg-gray-100 flex items-center justify-center text-gray-600">
                        <FiActivity className="h-4 w-4" />
                      </div>,
                label: activity.type
              };

              return (
                <div key={activity._id} className="p-4 hover:bg-gray-50 transition-colors flex">
                  <div className="mr-3 flex-shrink-0">
                    {config.icon}
                  </div>
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center justify-between">
                      <p className="text-sm font-medium text-gray-900">
                        {activity.description || config.label}
                      </p>
                      <span
                        className="text-xs text-gray-500 ml-2"
                        title={formatDate(activity.createdAt)}
                      >
                        {formatRelativeTime(activity.createdAt)}
                      </span>
                    </div>

                    {activity.user && (
                      <p className="text-xs text-gray-500 mt-1">
                        {activity.user.name || 'Unknown user'}
                      </p>
                    )}

                    {activity.metadata && Object.keys(activity.metadata).length > 0 && (
                      <div className="mt-2 text-xs text-gray-700 bg-gray-50 p-2 rounded-lg">
                        {activity.type === 'note_updated' && activity.metadata.changes && (
                          <p>
                            Updated fields: {activity.metadata.changes.join(', ')}
                          </p>
                        )}

                        {(activity.type === 'note_created' || activity.type === 'note_deleted') && activity.metadata.category && (
                          <p>
                            Category: <span className="font-medium">{activity.metadata.category}</span>
                          </p>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>
    </div>
  );
};

export default NoteActivityTimeline;

================
File: src/components/activity/TaskActivityTimeline.jsx
================
import { useState, useEffect } from 'react';
import {
  FiActivity, FiRefreshCw, FiEdit, FiPlus, FiCheckCircle,
  FiUser, FiUserMinus, FiCalendar, FiMessageSquare,
  FiArchive, FiAlertCircle, FiInfo
} from 'react-icons/fi';
import activityService from '../../services/activityService';

const TaskActivityTimeline = ({ taskId }) => {
  const [activities, setActivities] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Load task activities on component mount
  useEffect(() => {
    if (!taskId) {
      setError('Task ID is required');
      setLoading(false);
      return;
    }

    fetchTaskActivities();
  }, [taskId]);

  // Function to fetch task activities
  const fetchTaskActivities = async () => {
    try {
      setLoading(true);
      setError(null);

      const taskActivities = await activityService.getTaskHistory(taskId);
      setActivities(Array.isArray(taskActivities) ? taskActivities : []);
    } catch (err) {
      console.error('Error fetching task activities:', err);
      setError(err.message || 'Failed to load task activities. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Activity type configurations for icons and styles
  const activityTypeConfig = {
    task_created: {
      icon: <div className="h-8 w-8 rounded-full bg-green-100 flex items-center justify-center text-green-600">
              <FiPlus className="h-4 w-4" />
            </div>,
      label: 'Task Created'
    },
    task_updated: {
      icon: <div className="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center text-blue-600">
              <FiEdit className="h-4 w-4" />
            </div>,
      label: 'Task Updated'
    },
    task_status_changed: {
      icon: <div className="h-8 w-8 rounded-full bg-amber-100 flex items-center justify-center text-amber-600">
              <FiRefreshCw className="h-4 w-4" />
            </div>,
      label: 'Status Changed'
    },
    task_assigned: {
      icon: <div className="h-8 w-8 rounded-full bg-purple-100 flex items-center justify-center text-purple-600">
              <FiUser className="h-4 w-4" />
            </div>,
      label: 'Task Assigned'
    },
    task_unassigned: {
      icon: <div className="h-8 w-8 rounded-full bg-red-100 flex items-center justify-center text-red-600">
              <FiUserMinus className="h-4 w-4" />
            </div>,
      label: 'User Unassigned'
    },
    comment_added: {
      icon: <div className="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center text-blue-600">
              <FiMessageSquare className="h-4 w-4" />
            </div>,
      label: 'Comment Added'
    },
    task_completed: {
      icon: <div className="h-8 w-8 rounded-full bg-green-100 flex items-center justify-center text-green-600">
              <FiCheckCircle className="h-4 w-4" />
            </div>,
      label: 'Task Completed'
    },
    task_reopened: {
      icon: <div className="h-8 w-8 rounded-full bg-orange-100 flex items-center justify-center text-orange-600">
              <FiRefreshCw className="h-4 w-4" />
            </div>,
      label: 'Task Reopened'
    },
    task_archived: {
      icon: <div className="h-8 w-8 rounded-full bg-gray-100 flex items-center justify-center text-gray-600">
              <FiArchive className="h-4 w-4" />
            </div>,
      label: 'Task Archived'
    },
    due_date_changed: {
      icon: <div className="h-8 w-8 rounded-full bg-purple-100 flex items-center justify-center text-purple-600">
              <FiCalendar className="h-4 w-4" />
            </div>,
      label: 'Due Date Changed'
    },
  };

  // Format date for display
  const formatDate = (dateString) => {
    if (!dateString) return '';

    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Format relative time (e.g., "2 hours ago")
  const formatRelativeTime = (dateString) => {
    if (!dateString) return '';

    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now - date;
    const diffSec = Math.floor(diffMs / 1000);
    const diffMin = Math.floor(diffSec / 60);
    const diffHour = Math.floor(diffMin / 60);
    const diffDay = Math.floor(diffHour / 24);

    if (diffSec < 60) {
      return 'just now';
    } else if (diffMin < 60) {
      return `${diffMin}m ago`;
    } else if (diffHour < 24) {
      return `${diffHour}h ago`;
    } else if (diffDay < 7) {
      return `${diffDay}d ago`;
    } else {
      return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
    }
  };

  return (
    <div className="bg-white rounded-lg shadow overflow-hidden">
      <div className="flex justify-between items-center p-4 border-b">
        <h3 className="text-lg font-medium text-gray-900">Task History</h3>
        <button
          onClick={fetchTaskActivities}
          className="flex items-center text-sm text-violet-600 hover:text-violet-800"
        >
          <FiRefreshCw className="mr-1 h-4 w-4" /> Refresh
        </button>
      </div>

      <div className="p-1">
        {loading ? (
          <div className="flex items-center justify-center p-8">
            <div className="w-10 h-10 border-4 border-violet-500 rounded-full border-t-transparent animate-spin"></div>
          </div>
        ) : error ? (
          <div className="p-6 text-center">
            <div className="text-red-500 mb-2">
              <FiAlertCircle className="h-10 w-10 mx-auto" />
            </div>
            <p className="text-gray-700 mb-4">{error}</p>
            <button
              className="inline-flex items-center px-3 py-1.5 border border-transparent rounded-md text-sm font-medium text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500"
              onClick={fetchTaskActivities}
            >
              <FiRefreshCw className="mr-1.5 h-4 w-4" /> Try Again
            </button>
          </div>
        ) : activities.length === 0 ? (
          <div className="p-8 text-center">
            <FiInfo className="h-10 w-10 mx-auto text-gray-400" />
            <p className="mt-2 text-gray-500">No activity history found for this task.</p>
          </div>
        ) : (
          <div className="divide-y divide-gray-100">
            {activities.map((activity) => {
              const config = activityTypeConfig[activity.type] || {
                icon: <div className="h-8 w-8 rounded-full bg-gray-100 flex items-center justify-center text-gray-600">
                        <FiActivity className="h-4 w-4" />
                      </div>,
                label: activity.type
              };

              return (
                <div key={activity._id} className="p-4 hover:bg-gray-50 transition-colors flex">
                  <div className="mr-3 flex-shrink-0">
                    {config.icon}
                  </div>
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center justify-between">
                      <p className="text-sm font-medium text-gray-900">
                        {activity.description || config.label}
                      </p>
                      <span
                        className="text-xs text-gray-500 ml-2"
                        title={formatDate(activity.createdAt)}
                      >
                        {formatRelativeTime(activity.createdAt)}
                      </span>
                    </div>

                    {activity.user && (
                      <p className="text-xs text-gray-500 mt-1">
                        {activity.user.name || 'Unknown user'}
                      </p>
                    )}

                    {activity.metadata && Object.keys(activity.metadata).length > 0 && (
                      <div className="mt-2 text-xs text-gray-700 bg-gray-50 p-2 rounded-lg">
                        {activity.type === 'task_status_changed' && (
                          <p>
                            Changed status from <span className="font-medium">{activity.metadata.oldStatus}</span> to{' '}
                            <span className="font-medium">{activity.metadata.newStatus}</span>
                          </p>
                        )}

                        {activity.type === 'due_date_changed' && (
                          <p>
                            {activity.metadata.oldDueDate
                              ? `Changed due date from ${formatDate(activity.metadata.oldDueDate)} to ${formatDate(activity.metadata.newDueDate)}`
                              : `Set due date to ${formatDate(activity.metadata.newDueDate)}`}
                          </p>
                        )}

                        {activity.type === 'task_updated' && activity.metadata.changes && (
                          <p>
                            Updated fields: {activity.metadata.changes.join(', ')}
                          </p>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>
    </div>
  );
};

export default TaskActivityTimeline;

================
File: src/components/activity/UserActivityTimeline.jsx
================
import { useState, useEffect } from 'react';
import {
  FiActivity, FiRefreshCw, FiUser, FiUserPlus,
  FiSettings, FiLock, FiLogIn, FiLogOut,
  FiAlertCircle, FiInfo, FiMail, FiEdit
} from 'react-icons/fi';
import activityService from '../../services/activityService';
import { Link } from 'react-router-dom';

const UserActivityTimeline = ({ userId, showRelatedActivities = false, viewMode = 'list' }) => {
  const [activities, setActivities] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Load user activities on component mount
  useEffect(() => {
    if (!userId) {
      setError('User ID is required');
      setLoading(false);
      return;
    }

    fetchUserActivities();
  }, [userId, showRelatedActivities]);

  // Function to fetch user activities
  const fetchUserActivities = async () => {
    try {
      setLoading(true);
      setError(null);

      let userActivities;
      if (showRelatedActivities) {
        userActivities = await activityService.getUserRelatedActivities(userId);
      } else {
        userActivities = await activityService.getUserActivities(userId);
      }

      setActivities(Array.isArray(userActivities) ? userActivities : []);
    } catch (err) {
      console.error('Error fetching user activities:', err);
      setError(err.message || 'Failed to load user activities. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Activity type configurations for icons and styles
  const activityTypeConfig = {
    profile_updated: {
      icon: <div className="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center text-blue-600">
              <FiEdit className="h-4 w-4" />
            </div>,
      label: 'Profile Updated'
    },
    user_registered: {
      icon: <div className="h-8 w-8 rounded-full bg-green-100 flex items-center justify-center text-green-600">
              <FiUserPlus className="h-4 w-4" />
            </div>,
      label: 'User Registered'
    },
    password_changed: {
      icon: <div className="h-8 w-8 rounded-full bg-amber-100 flex items-center justify-center text-amber-600">
              <FiLock className="h-4 w-4" />
            </div>,
      label: 'Password Changed'
    },
    preferences_updated: {
      icon: <div className="h-8 w-8 rounded-full bg-indigo-100 flex items-center justify-center text-indigo-600">
              <FiSettings className="h-4 w-4" />
            </div>,
      label: 'Preferences Updated'
    },
    avatar_changed: {
      icon: <div className="h-8 w-8 rounded-full bg-purple-100 flex items-center justify-center text-purple-600">
              <FiUser className="h-4 w-4" />
            </div>,
      label: 'Avatar Changed'
    },
    email_changed: {
      icon: <div className="h-8 w-8 rounded-full bg-teal-100 flex items-center justify-center text-teal-600">
              <FiMail className="h-4 w-4" />
            </div>,
      label: 'Email Changed'
    },
    user_login: {
      icon: <div className="h-8 w-8 rounded-full bg-green-100 flex items-center justify-center text-green-600">
              <FiLogIn className="h-4 w-4" />
            </div>,
      label: 'User Login'
    },
    user_logout: {
      icon: <div className="h-8 w-8 rounded-full bg-gray-100 flex items-center justify-center text-gray-600">
              <FiLogOut className="h-4 w-4" />
            </div>,
      label: 'User Logout'
    }
  };

  // Format date for display
  const formatDate = (dateString) => {
    if (!dateString) return '';

    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Format relative time (e.g., "2 hours ago")
  const formatRelativeTime = (dateString) => {
    if (!dateString) return '';

    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now - date;
    const diffSec = Math.floor(diffMs / 1000);
    const diffMin = Math.floor(diffSec / 60);
    const diffHour = Math.floor(diffMin / 60);
    const diffDay = Math.floor(diffHour / 24);

    if (diffSec < 60) {
      return 'just now';
    } else if (diffMin < 60) {
      return `${diffMin}m ago`;
    } else if (diffHour < 24) {
      return `${diffHour}h ago`;
    } else if (diffDay < 7) {
      return `${diffDay}d ago`;
    } else {
      return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
    }
  };

  // Render a single activity item based on view mode
  const renderActivityItem = (activity, isGridMode = false) => {
    const config = activityTypeConfig[activity.type] || {
      icon: <div className="h-8 w-8 rounded-full bg-gray-100 flex items-center justify-center text-gray-600">
              <FiActivity className="h-4 w-4" />
            </div>,
      label: activity.type
    };

    if (isGridMode) {
      // Grid view item
      return (
        <div key={activity._id} className="bg-white rounded-lg border border-gray-200 shadow-sm hover:shadow-md transition-shadow overflow-hidden">
          <div className="p-4">
            <div className="flex items-start mb-3">
              <div className="mr-3 flex-shrink-0">
                {config.icon}
              </div>
              <div className="flex-1">
                <p className="text-sm font-medium text-gray-900 truncate">
                  {activity.description || config.label}
                </p>
                <p className="text-xs text-gray-500 mt-1">
                  {formatRelativeTime(activity.createdAt)}
                </p>
              </div>
            </div>

            {activity.user && (
              <p className="text-xs text-gray-500 mt-2 flex items-center">
                {activity.user.avatar ? (
                  <img
                    src={activity.user.avatar}
                    alt={activity.user.name}
                    className="w-4 h-4 rounded-full mr-1"
                  />
                ) : (
                  <FiUser className="w-3 h-3 mr-1" />
                )}
                {activity.user.name}
              </p>
            )}

            {/* Show target user if in related activities mode */}
            {showRelatedActivities && activity.targetUser && activity.targetUser._id !== userId && (
              <p className="text-xs text-gray-500 mt-1 flex items-center">
                <FiUser className="w-3 h-3 mr-1" />
                Target: {activity.targetUser.name}
              </p>
            )}

            {/* Show actor if in related activities mode and the actor is not the current user */}
            {showRelatedActivities && activity.user && activity.user._id !== userId && (
              <p className="text-xs text-gray-500 mt-1 flex items-center">
                <FiUser className="w-3 h-3 mr-1" />
                Actor: {activity.user.name}
              </p>
            )}

            {/* Metadata summary (compact for grid view) */}
            {activity.metadata && Object.keys(activity.metadata).length > 0 && (
              <div className="mt-2 text-xs text-gray-700 bg-gray-50 p-2 rounded-lg">
                {activity.type === 'profile_updated' && activity.metadata.changes && (
                  <p className="truncate">
                    Updated: {activity.metadata.changes.join(', ')}
                  </p>
                )}
              </div>
            )}

            {/* Related task/note links */}
            <div className="mt-3 pt-2 border-t border-gray-100 flex space-x-2 text-xs">
              {activity.task && (
                <Link
                  to={`/tasks/${activity.task}`}
                  className="text-violet-600 hover:text-violet-800 font-medium"
                >
                  View task
                </Link>
              )}

              {activity.note && (
                <Link
                  to={`/notes/${activity.note}`}
                  className="text-violet-600 hover:text-violet-800 font-medium"
                >
                  View note
                </Link>
              )}
            </div>
          </div>
        </div>
      );
    }

    // List view item (original implementation)
    return (
      <div key={activity._id} className="p-4 hover:bg-gray-50 transition-colors flex">
        <div className="mr-3 flex-shrink-0">
          {config.icon}
        </div>
        <div className="flex-1 min-w-0">
          <div className="flex items-center justify-between">
            <p className="text-sm font-medium text-gray-900">
              {activity.description || config.label}
            </p>
            <span
              className="text-xs text-gray-500 ml-2"
              title={formatDate(activity.createdAt)}
            >
              {formatRelativeTime(activity.createdAt)}
            </span>
          </div>

          {/* Show target user if in related activities mode */}
          {showRelatedActivities && activity.targetUser && activity.targetUser._id !== userId && (
            <p className="text-xs text-gray-500 mt-1">
              Target: {activity.targetUser.name}
            </p>
          )}

          {/* Show actor if in related activities mode and the actor is not the current user */}
          {showRelatedActivities && activity.user && activity.user._id !== userId && (
            <p className="text-xs text-gray-500 mt-1">
              Actor: {activity.user.name}
            </p>
          )}

          {/* Regular user display (same as before) */}
          {!showRelatedActivities && activity.user && (
            <p className="text-xs text-gray-500 mt-1">
              {activity.user.name || 'Unknown user'}
            </p>
          )}

          {activity.metadata && Object.keys(activity.metadata).length > 0 && (
            <div className="mt-2 text-xs text-gray-700 bg-gray-50 p-2 rounded-lg">
              {activity.type === 'profile_updated' && activity.metadata.changes && (
                <p>
                  Updated fields: {activity.metadata.changes.join(', ')}
                </p>
              )}

              {activity.type === 'preferences_updated' && activity.metadata.preferences && (
                <p>
                  Updated preferences: {Object.keys(activity.metadata.preferences).join(', ')}
                </p>
              )}

              {activity.type === 'user_login' && activity.metadata.previousLogin && (
                <p>
                  Previous login: {formatDate(activity.metadata.previousLogin)}
                </p>
              )}
            </div>
          )}

          {/* Show related task/note links if available */}
          <div className="mt-2 flex space-x-2">
            {activity.task && (
              <Link
                to={`/tasks/${activity.task}`}
                className="text-xs font-medium text-violet-600 hover:text-violet-800"
              >
                View task
              </Link>
            )}

            {activity.note && (
              <Link
                to={`/notes/${activity.note}`}
                className="text-xs font-medium text-violet-600 hover:text-violet-800"
              >
                View note
              </Link>
            )}
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="bg-white rounded-lg shadow overflow-hidden">
      <div className="flex justify-between items-center p-4 border-b">
        <h3 className="text-lg font-medium text-gray-900">
          {showRelatedActivities ? 'User Related Activities' : 'User Activities'}
        </h3>
        <button
          onClick={fetchUserActivities}
          className="flex items-center text-sm text-violet-600 hover:text-violet-800"
        >
          <FiRefreshCw className="mr-1 h-4 w-4" /> Refresh
        </button>
      </div>

      <div className="p-1">
        {loading ? (
          <div className="flex items-center justify-center p-8">
            <div className="w-10 h-10 border-4 border-violet-500 rounded-full border-t-transparent animate-spin"></div>
          </div>
        ) : error ? (
          <div className="p-6 text-center">
            <div className="text-red-500 mb-2">
              <FiAlertCircle className="h-10 w-10 mx-auto" />
            </div>
            <p className="text-gray-700 mb-4">{error}</p>
            <button
              className="inline-flex items-center px-3 py-1.5 border border-transparent rounded-md text-sm font-medium text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500"
              onClick={fetchUserActivities}
            >
              <FiRefreshCw className="mr-1.5 h-4 w-4" /> Try Again
            </button>
          </div>
        ) : activities.length === 0 ? (
          <div className="p-8 text-center">
            <FiInfo className="h-10 w-10 mx-auto text-gray-400" />
            <p className="mt-2 text-gray-500">No activities found for this user.</p>
          </div>
        ) : viewMode === 'grid' ? (
          // Grid view layout
          <div className="p-6 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {activities.map(activity => renderActivityItem(activity, true))}
          </div>
        ) : (
          // Original list view layout
          <div className="divide-y divide-gray-100">
            {activities.map(activity => renderActivityItem(activity, false))}
          </div>
        )}
      </div>
    </div>
  );
};

export default UserActivityTimeline;

================
File: src/components/common/DeleteConfirmationModal.jsx
================
import { useEffect } from 'react';
import { createPortal } from 'react-dom';
import { FiAlertTriangle, FiX } from 'react-icons/fi';

/**
 * Reusable confirmation modal for delete operations
 *
 * @param {Object} props
 * @param {boolean} props.isOpen - Whether the modal is open
 * @param {function} props.onClose - Function to call when the modal is closed
 * @param {function} props.onConfirm - Function to call when the delete is confirmed
 * @param {string} props.title - Modal title
 * @param {string} props.message - Confirmation message
 * @param {string} props.itemName - Name of the item being deleted
 * @param {string} props.itemType - Type of the item being deleted (e.g., "task", "note")
 * @param {boolean} props.isDeleting - Whether the delete operation is in progress
 */
const DeleteConfirmationModal = ({
  isOpen,
  onClose,
  onConfirm,
  title = 'Confirm Deletion',
  message = 'Are you sure you want to delete this item? This action cannot be undone.',
  itemName = '',
  itemType = 'item',
  isDeleting = false
}) => {
  // Handle ESC key press to close the modal
  useEffect(() => {
    const handleEsc = (event) => {
      if (event.key === 'Escape' && isOpen && !isDeleting) {
        onClose();
      }
    };

    document.addEventListener('keydown', handleEsc);
    return () => {
      document.removeEventListener('keydown', handleEsc);
    };
  }, [isOpen, onClose, isDeleting]);

  // Prevent scroll when modal is open
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = '';
    }
    return () => {
      document.body.style.overflow = '';
    };
  }, [isOpen]);

  if (!isOpen) return null;

  return createPortal(
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        {/* Background overlay */}
        <div
          className="fixed inset-0 transition-opacity"
          aria-hidden="true"
          onClick={!isDeleting ? onClose : undefined}
        >
          <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
        </div>

        {/* Modal panel */}
        <div
          className="inline-block align-bottom bg-white rounded-xl text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full"
        >
          {/* Header */}
          <div className="bg-red-50 px-4 py-3 sm:px-6 flex justify-between items-center">
            <h3 className="text-lg font-medium text-red-800 flex items-center">
              <FiAlertTriangle className="mr-2 h-5 w-5 text-red-600" />
              {title}
            </h3>
            {!isDeleting && (
              <button
                type="button"
                className="text-gray-400 hover:text-gray-500"
                onClick={onClose}
              >
                <span className="sr-only">Close</span>
                <FiX className="h-6 w-6" />
              </button>
            )}
          </div>

          {/* Content */}
          <div className="px-4 pt-5 pb-4 sm:p-6">
            <div className="sm:flex sm:items-start">
              <div className="mt-3 text-center sm:mt-0 sm:text-left w-full">
                <div className="mt-2">
                  <p className="text-sm text-gray-700">
                    {message}
                  </p>
                  {itemName && (
                    <p className="mt-2 text-sm font-medium text-gray-900">
                      {itemType.charAt(0).toUpperCase() + itemType.slice(1)}: <span className="text-red-600">{itemName}</span>
                    </p>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Actions */}
          <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
            <button
              type="button"
              onClick={onConfirm}
              disabled={isDeleting}
              className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm disabled:opacity-50"
            >
              {isDeleting ? 'Deleting...' : 'Delete'}
            </button>
            <button
              type="button"
              onClick={onClose}
              disabled={isDeleting}
              className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500 sm:mt-0 sm:w-auto sm:text-sm disabled:opacity-50"
            >
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>,
    document.body
  );
};

export default DeleteConfirmationModal;

================
File: src/components/common/Pagination.jsx
================
import React from 'react';
import { FiChevronLeft, FiChevronRight, FiChevronsLeft, FiChevronsRight } from 'react-icons/fi';

const Pagination = ({
  currentPage,
  totalPages,
  onPageChange,
  maxVisiblePages = 5
}) => {
  // Don't render pagination if there's only one page
  if (totalPages <= 0) return null;

  // Function to generate array of page numbers to display
  const getPageRange = () => {
    // If total pages is less than or equal to max visible pages, show all pages
    if (totalPages <= maxVisiblePages) {
      return Array.from({ length: totalPages }, (_, i) => i + 1);
    }

    // Calculate the start and end of the page range
    let start = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let end = start + maxVisiblePages - 1;

    // Adjust if end exceeds total pages
    if (end > totalPages) {
      end = totalPages;
      start = Math.max(1, end - maxVisiblePages + 1);
    }

    return Array.from({ length: end - start + 1 }, (_, i) => start + i);
  };

  const pageRange = getPageRange();

  return (
    <nav className="flex items-center justify-between border-t border-gray-200 px-4 sm:px-0">
      <div className="hidden md:-mt-px md:flex">
        {/* First page button */}
        <button
          onClick={() => onPageChange(1)}
          disabled={currentPage === 1}
          className={`inline-flex items-center border-t-2 px-4 pt-4 text-sm font-medium ${
            currentPage === 1
              ? 'cursor-not-allowed border-transparent text-gray-300'
              : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
          }`}
        >
          <FiChevronsLeft className="mr-2 h-5 w-5" />
          First
        </button>

        {/* Previous page button */}
        <button
          onClick={() => onPageChange(currentPage - 1)}
          disabled={currentPage === 1}
          className={`ml-3 inline-flex items-center border-t-2 px-4 pt-4 text-sm font-medium ${
            currentPage === 1
              ? 'cursor-not-allowed border-transparent text-gray-300'
              : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
          }`}
        >
          <FiChevronLeft className="mr-2 h-5 w-5" />
          Previous
        </button>

        {/* Page numbers */}
        {pageRange.map((page) => (
          <button
            key={page}
            onClick={() => onPageChange(page)}
            className={`inline-flex items-center border-t-2 px-4 pt-4 text-sm font-medium ${
              page === currentPage
                ? 'border-violet-500 text-violet-600'
                : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
            }`}
          >
            {page}
          </button>
        ))}

        {/* Next page button */}
        <button
          onClick={() => onPageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
          className={`ml-3 inline-flex items-center border-t-2 px-4 pt-4 text-sm font-medium ${
            currentPage === totalPages
              ? 'cursor-not-allowed border-transparent text-gray-300'
              : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
          }`}
        >
          Next
          <FiChevronRight className="ml-2 h-5 w-5" />
        </button>

        {/* Last page button */}
        <button
          onClick={() => onPageChange(totalPages)}
          disabled={currentPage === totalPages}
          className={`ml-3 inline-flex items-center border-t-2 px-4 pt-4 text-sm font-medium ${
            currentPage === totalPages
              ? 'cursor-not-allowed border-transparent text-gray-300'
              : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
          }`}
        >
          Last
          <FiChevronsRight className="ml-2 h-5 w-5" />
        </button>
      </div>

      {/* Mobile pagination */}
      <div className="flex w-full items-center justify-between md:hidden">
        <button
          onClick={() => onPageChange(currentPage - 1)}
          disabled={currentPage === 1}
          className={`inline-flex items-center rounded-md border border-gray-300 px-3 py-2 text-sm font-medium ${
            currentPage === 1
              ? 'cursor-not-allowed bg-gray-100 text-gray-400'
              : 'bg-white text-gray-700 hover:bg-gray-50'
          }`}
        >
          <FiChevronLeft className="mr-1 h-4 w-4" />
          Previous
        </button>
        <div className="text-sm text-gray-700">
          Page <span className="font-medium">{currentPage}</span> of{' '}
          <span className="font-medium">{totalPages}</span>
        </div>
        <button
          onClick={() => onPageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
          className={`inline-flex items-center rounded-md border border-gray-300 px-3 py-2 text-sm font-medium ${
            currentPage === totalPages
              ? 'cursor-not-allowed bg-gray-100 text-gray-400'
              : 'bg-white text-gray-700 hover:bg-gray-50'
          }`}
        >
          Next
          <FiChevronRight className="ml-1 h-4 w-4" />
        </button>
      </div>
    </nav>
  );
};

export default Pagination;

================
File: src/components/common/Tabs.jsx
================
import React, { useState, createContext, useContext } from 'react';

// Create a context for the tabs
const TabsContext = createContext(null);

// Tabs container component
export const Tabs = ({ children, defaultValue, value, onValueChange, className = '' }) => {
  // State for controlled component
  const [activeTab, setActiveTab] = useState(value || defaultValue);

  // Handle tab changes
  const handleTabChange = (newValue) => {
    if (!value) {
      // Only update internal state if not controlled
      setActiveTab(newValue);
    }
    // Always call the callback if provided
    if (onValueChange) {
      onValueChange(newValue);
    }
  };

  return (
    <TabsContext.Provider value={{ activeTab: value || activeTab, onChange: handleTabChange }}>
      <div className={`w-full ${className}`}>
        {children}
      </div>
    </TabsContext.Provider>
  );
};

// Tab list component
export const TabsList = ({ children, className = '' }) => {
  return (
    <div className={`flex border-b border-gray-200 ${className}`}>
      {children}
    </div>
  );
};

// Individual tab trigger
export const TabsTrigger = ({ children, value, disabled = false, className = '' }) => {
  const { activeTab, onChange } = useContext(TabsContext);
  const isActive = activeTab === value;

  return (
    <button
      type="button"
      className={`
        px-4 py-2 text-sm font-medium border-b-2 -mb-px
        ${isActive
          ? 'text-violet-600 border-violet-500'
          : 'text-gray-500 border-transparent hover:text-gray-700 hover:border-gray-300'}
        ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}
        ${className}
      `}
      disabled={disabled}
      onClick={() => !disabled && onChange(value)}
      aria-selected={isActive}
      role="tab"
    >
      {children}
    </button>
  );
};

// Tab content panel
export const TabsContent = ({ children, value, className = '' }) => {
  const { activeTab } = useContext(TabsContext);
  const isActive = activeTab === value;

  if (!isActive) return null;

  return (
    <div
      role="tabpanel"
      className={`py-4 ${className}`}
      tabIndex={0}
    >
      {children}
    </div>
  );
};

export default { Tabs, TabsList, TabsTrigger, TabsContent };

================
File: src/components/dashboard/ActivityFeed.jsx
================
import { Link } from 'react-router-dom'
import {
  FiPlus,
  FiEdit,
  FiCheckCircle,
  FiRefreshCw,
  FiArchive,
  FiMessageSquare,
  FiCalendar,
  FiUser,
  FiUserMinus
} from 'react-icons/fi'

const ActivityFeed = ({ activities, loading }) => {
  // Helper to get icon based on activity type
  const getActivityIcon = (type) => {
    const iconMap = {
      task_created: <FiPlus className="h-5 w-5 text-green-500" />,
      task_updated: <FiEdit className="h-5 w-5 text-blue-500" />,
      task_status_changed: <FiRefreshCw className="h-5 w-5 text-amber-500" />,
      task_assigned: <FiUser className="h-5 w-5 text-purple-500" />,
      task_unassigned: <FiUserMinus className="h-5 w-5 text-red-500" />,
      comment_added: <FiMessageSquare className="h-5 w-5 text-blue-500" />,
      task_completed: <FiCheckCircle className="h-5 w-5 text-green-500" />,
      task_reopened: <FiRefreshCw className="h-5 w-5 text-orange-500" />,
      task_archived: <FiArchive className="h-5 w-5 text-gray-500" />,
      attachment_added: <FiPlus className="h-5 w-5 text-blue-500" />,
      due_date_changed: <FiCalendar className="h-5 w-5 text-purple-500" />,
    }

    return iconMap[type] || <FiEdit className="h-5 w-5 text-gray-500" />
  }

  // Format date relative to now
  const formatRelativeTime = (dateString) => {
    if (!dateString) return ''

    const date = new Date(dateString)
    const now = new Date()
    const diffMs = now - date
    const diffSec = Math.floor(diffMs / 1000)
    const diffMin = Math.floor(diffSec / 60)
    const diffHour = Math.floor(diffMin / 60)
    const diffDay = Math.floor(diffHour / 24)

    if (diffSec < 60) {
      return 'just now'
    } else if (diffMin < 60) {
      return `${diffMin}m ago`
    } else if (diffHour < 24) {
      return `${diffHour}h ago`
    } else if (diffDay < 7) {
      return `${diffDay}d ago`
    } else {
      return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })
    }
  }

  return (
    <div className="card">
      <div className="flex justify-between items-center p-6 border-b border-gray-200">
        <h3 className="text-lg font-medium text-gray-900">Recent Activity</h3>
        <Link to="/activities" className="text-sm font-medium text-primary-600 hover:text-primary-500">
          View all
        </Link>
      </div>

      <div className="divide-y divide-gray-200">
        {loading ? (
          // Loading skeleton
          Array(5).fill(0).map((_, index) => (
            <div key={index} className="p-6">
              <div className="flex">
                <div className="mr-4 flex-shrink-0">
                  <div className="h-8 w-8 rounded-full bg-gray-200"></div>
                </div>
                <div className="w-full">
                  <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                  <div className="h-3 bg-gray-100 rounded w-1/4"></div>
                </div>
              </div>
            </div>
          ))
        ) : activities && activities.length > 0 ? (
          activities.map((activity, index) => (
            <div key={index} className="p-6 hover:bg-gray-50 transition-colors">
              <div className="flex">
                <div className="mr-4 flex-shrink-0">
                  <div className="h-8 w-8 rounded-full bg-gray-100 flex items-center justify-center">
                    {getActivityIcon(activity.type)}
                  </div>
                </div>
                <div>
                  <div className="text-sm">
                    <Link to={`/tasks/${activity.task}`} className="font-medium text-gray-900 hover:text-primary-600">
                      {activity.description}
                    </Link>
                  </div>
                  <div className="mt-1 flex items-center text-xs text-gray-500">
                    <p>
                      by <span className="font-medium text-gray-700">{activity.user.name}</span>
                      {' '}&bull;{' '}
                      {formatRelativeTime(activity.createdAt)}
                    </p>
                  </div>
                </div>
              </div>
            </div>
          ))
        ) : (
          <div className="p-6 text-center">
            <p className="text-gray-500">No recent activity</p>
          </div>
        )}
      </div>

      {!loading && activities && activities.length > 0 && (
        <div className="px-6 py-4 bg-gray-50 border-t border-gray-200">
          <Link
            to="/activities"
            className="w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-primary-600 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
          >
            View all activity
          </Link>
        </div>
      )}
    </div>
  )
}

export default ActivityFeed

================
File: src/components/dashboard/RecentTasksCard.jsx
================
import { Link } from 'react-router-dom'
import { FiClock, FiCheckCircle, FiAlertTriangle, FiEye } from 'react-icons/fi'

const TaskStatusBadge = ({ status }) => {
  const statusConfig = {
    todo: {
      bg: 'bg-gray-100',
      text: 'text-gray-800',
      label: 'To Do',
    },
    inProgress: {
      bg: 'bg-blue-100',
      text: 'text-blue-800',
      label: 'In Progress',
      icon: <FiClock className="mr-1" />,
    },
    inReview: {
      bg: 'bg-amber-100',
      text: 'text-amber-800',
      label: 'In Review',
      icon: <FiEye className="mr-1" />,
    },
    done: {
      bg: 'bg-green-100',
      text: 'text-green-800',
      label: 'Done',
      icon: <FiCheckCircle className="mr-1" />,
    },
  }

  const config = statusConfig[status] || statusConfig.todo

  return (
    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${config.bg} ${config.text}`}>
      {config.icon}
      {config.label}
    </span>
  )
}

const PriorityBadge = ({ priority }) => {
  const priorityConfig = {
    low: {
      bg: 'bg-gray-100',
      text: 'text-gray-800',
      label: 'Low',
    },
    medium: {
      bg: 'bg-blue-100',
      text: 'text-blue-800',
      label: 'Medium',
    },
    high: {
      bg: 'bg-orange-100',
      text: 'text-orange-800',
      label: 'High',
    },
    urgent: {
      bg: 'bg-red-100',
      text: 'text-red-800',
      label: 'Urgent',
      icon: <FiAlertTriangle className="mr-1" />,
    },
  }

  const config = priorityConfig[priority] || priorityConfig.medium

  return (
    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${config.bg} ${config.text}`}>
      {config.icon}
      {config.label}
    </span>
  )
}

const RecentTasksCard = ({ tasks, loading }) => {
  // Format date to display
  const formatDate = (dateString) => {
    if (!dateString) return ''
    const date = new Date(dateString)
    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })
  }

  return (
    <div className="card">
      <div className="flex justify-between items-center p-6 border-b border-gray-200">
        <h3 className="text-lg font-medium text-gray-900">Recent Tasks</h3>
        <Link to="/tasks" className="text-sm font-medium text-primary-600 hover:text-primary-500">
          View all
        </Link>
      </div>

      <div className="divide-y divide-gray-200">
        {loading ? (
          // Loading skeleton
          Array(5).fill(0).map((_, index) => (
            <div key={index} className="p-6">
              <div className="flex justify-between">
                <div className="w-2/3">
                  <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                  <div className="h-3 bg-gray-100 rounded w-1/2"></div>
                </div>
                <div className="flex space-x-2">
                  <div className="h-6 w-16 bg-gray-100 rounded-full"></div>
                  <div className="h-6 w-16 bg-gray-100 rounded-full"></div>
                </div>
              </div>
            </div>
          ))
        ) : tasks && tasks.length > 0 ? (
          tasks.map((task) => (
            <div key={task._id} className="p-6 hover:bg-gray-50 transition-colors">
              <div className="flex justify-between items-start">
                <div>
                  <Link to={`/tasks/${task._id}`} className="text-base font-medium text-gray-900 hover:text-primary-600">
                    {task.title}
                  </Link>
                  <p className="mt-1 text-sm text-gray-500">
                    {task.dueDate && (
                      <span>Due {formatDate(task.dueDate)}</span>
                    )}
                    {task.dueDate && task.estimatedHours && <span> • </span>}
                    {task.estimatedHours && (
                      <span>{task.estimatedHours} hours</span>
                    )}
                  </p>
                </div>
                <div className="flex space-x-2">
                  <TaskStatusBadge status={task.status} />
                  <PriorityBadge priority={task.priority} />
                </div>
              </div>

              {/* Assignees */}
              {task.assignees && task.assignees.length > 0 && (
                <div className="mt-4 flex">
                  <div className="flex -space-x-2 mr-2">
                    {task.assignees.slice(0, 3).map((assignee, idx) => (
                      <div
                        key={idx}
                        className="h-6 w-6 rounded-full bg-gray-300 flex items-center justify-center text-xs text-gray-700 ring-2 ring-white"
                        title={assignee.name}
                      >
                        {assignee.avatar ? (
                          <img
                            src={assignee.avatar}
                            alt={assignee.name}
                            className="h-6 w-6 rounded-full"
                          />
                        ) : (
                          assignee.name.charAt(0)
                        )}
                      </div>
                    ))}
                    {task.assignees.length > 3 && (
                      <div className="h-6 w-6 rounded-full bg-gray-100 flex items-center justify-center text-xs text-gray-700 ring-2 ring-white">
                        +{task.assignees.length - 3}
                      </div>
                    )}
                  </div>
                  <div className="text-xs text-gray-500 flex items-center">
                    {task.assignees.length} {task.assignees.length === 1 ? 'assignee' : 'assignees'}
                  </div>
                </div>
              )}

              {/* Progress bar */}
              {task.progress !== undefined && (
                <div className="mt-4">
                  <div className="flex justify-between items-center mb-1">
                    <span className="text-xs font-medium text-gray-500">Progress</span>
                    <span className="text-xs font-medium text-gray-700">{task.progress}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div
                      className="bg-primary-600 h-2 rounded-full"
                      style={{ width: `${task.progress}%` }}
                    ></div>
                  </div>
                </div>
              )}
            </div>
          ))
        ) : (
          <div className="p-6 text-center">
            <p className="text-gray-500">No tasks found</p>
          </div>
        )}
      </div>

      {!loading && tasks && tasks.length > 0 && (
        <div className="px-6 py-4 bg-gray-50 border-t border-gray-200">
          <Link
            to="/tasks"
            className="w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-primary-600 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
          >
            View all tasks
          </Link>
        </div>
      )}
    </div>
  )
}

export default RecentTasksCard

================
File: src/components/dashboard/TaskStatisticsCard.jsx
================
import React from 'react'

const TaskStatisticsCard = ({ title, value, icon, color, loading }) => {
  const colorClasses = {
    blue: 'bg-blue-50',
    amber: 'bg-amber-50',
    purple: 'bg-purple-50',
    green: 'bg-green-50',
    red: 'bg-red-50',
  }

  return (
    <div className={`card p-6 ${colorClasses[color] || 'bg-white'}`}>
      <div className="flex justify-between items-start">
        <div>
          <p className="text-sm font-medium text-gray-600">{title}</p>
          {loading ? (
            <div className="h-8 w-20 bg-gray-200 animate-pulse rounded mt-1"></div>
          ) : (
            <h3 className="text-2xl font-bold text-gray-900 mt-1">{value}</h3>
          )}
        </div>
        <div className="rounded-full p-2 bg-white">
          {icon}
        </div>
      </div>
    </div>
  )
}

export default TaskStatisticsCard

================
File: src/components/layout/Header.jsx
================
import { useState } from 'react'
import { FiMenu, FiSearch, FiPlus, FiBell, FiUser, FiMoon, FiSun, FiMonitor } from 'react-icons/fi'
import { useTheme } from '../../hooks/useTheme'

const Header = ({ title, toggleSidebar }) => {
  const [showNotifications, setShowNotifications] = useState(false)
  const [showUserMenu, setShowUserMenu] = useState(false)
  const { theme, toggleTheme, getEffectiveTheme } = useTheme()

  // Handle theme toggle
  const handleThemeToggle = () => {
    const newTheme = theme === 'dark' ? 'light' : theme === 'light' ? 'system' : 'dark'
    toggleTheme(newTheme)
  }

  // Get theme icon and label
  const getThemeIcon = () => {
    const effectiveTheme = getEffectiveTheme()
    switch (theme) {
      case 'dark':
        return {
          icon: <FiSun size={22} className="text-amber-400" />,
          label: "Switch to light mode"
        }
      case 'light':
        return {
          icon: <FiMoon size={22} />,
          label: "Switch to system theme"
        }
      default:
        return {
          icon: <FiMonitor size={22} className="text-gray-500" />,
          label: "Switch to dark mode"
        }
    }
  }

  const { icon, label } = getThemeIcon()

  return (
    <header className="bg-white shadow-sm sticky top-0 z-10">
      <div className="px-4 md:px-6 py-4 flex items-center justify-between">
        {/* Left Section: Menu toggle and Title */}
        <div className="flex items-center">
          <button
            type="button"
            className="text-gray-500 hover:text-violet-600 lg:hidden mr-3 p-2 rounded-lg hover:bg-violet-50 transition-colors"
            onClick={toggleSidebar}
          >
            <FiMenu size={22} />
          </button>
          <h1 className="text-xl font-semibold text-gray-800">{title}</h1>
        </div>

        {/* Right Section: Search, Create, Theme Toggle, Notifications, Profile */}
        <div className="flex items-center space-x-3">
          {/* Search - Hidden on mobile */}
          <div className="hidden md:flex items-center relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <FiSearch className="h-5 w-5 text-gray-400" />
            </div>
            <input
              type="text"
              placeholder="Search..."
              className="pl-10 pr-4 py-2 border border-gray-200 rounded-xl text-sm focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500 transition-all w-56"
            />
          </div>

          {/* Create button */}
          <button className="hidden sm:flex items-center px-4 py-2 text-sm font-medium text-white bg-violet-600 hover:bg-violet-700 rounded-xl transition-colors">
            <FiPlus className="mr-2" />
            Create
          </button>

          {/* Theme Toggle Button */}
          <button
            className="p-2 rounded-lg text-gray-500 hover:text-violet-600 hover:bg-violet-50 transition-colors relative group"
            onClick={handleThemeToggle}
            aria-label={label}
            title={label}
          >
            {icon}
            <span className="absolute -bottom-8 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs rounded px-2 py-1 opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
              {label}
            </span>
          </button>

          {/* Notifications */}
          <div className="relative">
            <button
              className="p-2 rounded-lg text-gray-500 hover:text-violet-600 hover:bg-violet-50 transition-colors"
              onClick={() => setShowNotifications(!showNotifications)}
            >
              <FiBell size={22} />
              <span className="absolute top-0 right-0 inline-block w-2 h-2 bg-red-500 rounded-full"></span>
            </button>
          </div>
        </div>
      </div>
    </header>
  )
}

export default Header

================
File: src/components/layout/MainLayout.jsx
================
import { useState, useEffect } from 'react'
import { Outlet, useLocation } from 'react-router-dom'
import Sidebar from './Sidebar'
import Header from './Header'
import { TaskProvider } from '../../context/TaskContext'

const MainLayout = () => {
  const [sidebarOpen, setSidebarOpen] = useState(true)
  const location = useLocation()
  const [title, setTitle] = useState('')

  useEffect(() => {
    // Set title based on current route
    const pathname = location.pathname

    if (pathname.includes('/dashboard')) {
      setTitle('Dashboard')
    } else if (pathname.includes('/tasks')) {
      setTitle('Tasks')
    } else if (pathname.includes('/activities')) {
      setTitle('Activities')
    } else if (pathname.includes('/notes')) {
      setTitle('Notes')
    } else if (pathname.includes('/schedule')) {
      setTitle('Schedule')
    } else if (pathname.includes('/products')) {
      setTitle('Products')
    } else if (pathname.includes('/settings')) {
      setTitle('Settings')
    } else if (pathname.includes('/users')) {
      setTitle('Users')
    } else {
      setTitle('Weid')
    }

    // Close sidebar on mobile when navigating
    if (window.innerWidth <= 1024) {
      setSidebarOpen(false)
    }
  }, [location])

  const toggleSidebar = () => {
    setSidebarOpen(!sidebarOpen)
  }

  return (
    <TaskProvider>
      <div className="flex h-screen bg-gray-50">
        {/* Sidebar */}
        <Sidebar open={sidebarOpen} toggleSidebar={toggleSidebar} />

        {/* Main Content */}
        <div className="flex flex-col flex-1 overflow-hidden">
          <Header
            title={title}
            toggleSidebar={toggleSidebar}
          />

          <main className="flex-1 overflow-auto p-6">
            <div className="max-w-7xl mx-auto">
              <Outlet />
            </div>
          </main>
        </div>
      </div>
    </TaskProvider>
  )
}

export default MainLayout

================
File: src/components/layout/Sidebar.jsx
================
import { NavLink } from 'react-router-dom'
import { useAuth } from '../../hooks/useAuth'
import {
  FiHome,
  FiCheckSquare,
  FiActivity,
  FiPieChart,
  FiCalendar,
  FiFileText,
  FiPackage,
  FiUsers,
  FiSettings,
  FiHelpCircle,
  FiLogOut,
  FiX,
  FiChevronRight,
  FiUser
} from 'react-icons/fi'

const Sidebar = ({ open, toggleSidebar }) => {
  const { currentUser, logout } = useAuth()

  // Menu items for the sidebar
  const menuItems = [
    {
      header: '',
      items: [
        {
          title: 'Tasks',
          icon: <FiCheckSquare size={20} />,
          path: '/tasks'
        },
        {
          title: 'Activities',
          icon: <FiActivity size={20} />,
          path: '/activities'
        },
      ],
    },
    {
      header: 'MENU',
      items: [
        {
          title: 'Dashboard',
          icon: <FiHome size={20} />,
          path: '/dashboard'
        },
        {
          title: 'Note',
          icon: <FiFileText size={20} />,
          path: '/notes'
        },
        {
          title: 'Schedule',
          icon: <FiCalendar size={20} />,
          path: '/schedule'
        },
        {
          title: 'Products',
          icon: <FiPackage size={20} />,
          path: '/products'
        },
      ]
    },
    {
      header: 'SETTING',
      items: [
        {
          title: 'Profile',
          icon: <FiUser size={20} />,
          path: '/profile'
        },
        {
          title: 'Setting',
          icon: <FiSettings size={20} />,
          path: '/settings'
        },
      ]
    },
  ]

  const handleLogout = async () => {
    await logout()
  }

  return (
    <>
      {/* Mobile backdrop */}
      {open && (
        <div
          className="fixed inset-0 z-20 bg-black bg-opacity-50 lg:hidden"
          onClick={toggleSidebar}
        />
      )}

      {/* Sidebar */}
      <aside
        className={`fixed inset-y-0 left-0 z-30 w-64 bg-white transform transition-transform duration-300 ease-in-out lg:translate-x-0 lg:static lg:inset-0 ${
          open ? 'translate-x-0' : '-translate-x-full'
        } flex flex-col h-screen border-r border-gray-100 shadow-sm`}
      >
        {/* Close button - mobile only */}
        <button
          className="absolute top-4 right-4 p-1 rounded-full bg-gray-50 text-gray-400 hover:bg-gray-100 hover:text-gray-600 lg:hidden"
          onClick={toggleSidebar}
        >
          <FiX size={20} />
        </button>

        {/* Sidebar Header */}
        <div className="flex items-center h-16 px-5 py-4 border-gray-100">
          <div className="flex items-center">
            <div className="h-10 w-10 rounded-xl bg-violet-600 flex items-center justify-center text-white font-bold">
              W
            </div>
            <h2 className="ml-3 text-lg font-semibold text-gray-800">weid</h2>
          </div>
        </div>

        {/* Sidebar Content */}
        <div className="flex-1 overflow-y-auto py-6 px-4">
          <nav className="space-y-8">
            {menuItems.map((section, idx) => (
              <div key={idx} className="space-y-3">
                {section.header && (
                  <h3 className="px-3 text-xs font-semibold text-gray-400 uppercase tracking-wider">
                    {section.header}
                  </h3>
                )}

                <div className="space-y-1">
                  {section.items.map((item, itemIdx) => (
                    <NavLink
                      key={itemIdx}
                      to={item.path}
                      className={({ isActive }) =>
                        `flex items-center justify-between px-3 py-2.5 rounded-xl text-sm font-medium transition-all ${
                          isActive
                            ? 'bg-violet-50 text-violet-700'
                            : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
                        }`
                      }
                    >
                      <div className="flex items-center">
                        <span className={`flex items-center justify-center h-8 w-8 rounded-lg ${
                          item.path === location.pathname
                            ? 'bg-violet-100 text-violet-600'
                            : 'text-gray-500'
                        }`}>
                          {item.icon}
                        </span>
                        <span className="ml-3">{item.title}</span>
                      </div>
                      <FiChevronRight
                        size={16}
                        className={`transform transition-transform ${
                          item.path === location.pathname ? 'text-violet-500' : 'text-gray-300'
                        }`}
                      />
                    </NavLink>
                  ))}
                </div>
              </div>
            ))}
          </nav>
        </div>

        {/* User profile and logout */}
        <div className=" border-gray-100 px-4 py-4 bg-gray-50 rounded-t-xl">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <div
                className="h-10 w-10 rounded-xl bg-violet-100 flex items-center justify-center text-violet-700 font-medium"
              >
                {currentUser?.name?.charAt(0) || 'U'}
              </div>
              <div className="ml-3">
                <div className="text-sm font-medium text-gray-900 line-clamp-1">
                  {currentUser?.name || 'User Name'}
                </div>
                <div className="text-xs text-gray-500 line-clamp-1">
                  {currentUser?.email || 'user@example.com'}
                </div>
              </div>
            </div>
            <button
              onClick={handleLogout}
              className="p-2 rounded-lg text-gray-400 hover:text-violet-600 hover:bg-violet-50 transition-colors"
              title="Logout"
            >
              <FiLogOut size={20} />
            </button>
          </div>
        </div>
      </aside>
    </>
  )
}

export default Sidebar

================
File: src/components/notes/NoteCard.jsx
================
import { useState } from 'react'
import { Link } from 'react-router-dom'
import {
  FiEdit2,
  FiTrash2,
  FiTag,
  FiMoreVertical,
  FiStar,
  FiClock,
  FiCalendar,
  FiEye
} from 'react-icons/fi'
import { useNotes } from '../../hooks/useNotes'
import DeleteConfirmationModal from '../../components/common/DeleteConfirmationModal'

// Cores e estilos modernos para as categorias
const categoryConfig = {
  general: {
    bg: 'bg-indigo-50',
    border: 'border-indigo-200',
    icon: 'bg-indigo-100 text-indigo-700',
    hover: 'hover:border-indigo-300',
    accent: 'bg-indigo-500'
  },
  personal: {
    bg: 'bg-rose-50',
    border: 'border-rose-200',
    icon: 'bg-rose-100 text-rose-700',
    hover: 'hover:border-rose-300',
    accent: 'bg-rose-500'
  },
  work: {
    bg: 'bg-sky-50',
    border: 'border-sky-200',
    icon: 'bg-sky-100 text-sky-700',
    hover: 'hover:border-sky-300',
    accent: 'bg-sky-500'
  },
  important: {
    bg: 'bg-amber-50',
    border: 'border-amber-200',
    icon: 'bg-amber-100 text-amber-700',
    hover: 'hover:border-amber-300',
    accent: 'bg-amber-500'
  },
  idea: {
    bg: 'bg-emerald-50',
    border: 'border-emerald-200',
    icon: 'bg-emerald-100 text-emerald-700',
    hover: 'hover:border-emerald-300',
    accent: 'bg-emerald-500'
  }
}

// Fallback para categorias não reconhecidas
const defaultCategoryStyle = {
  bg: 'bg-gray-50',
  border: 'border-gray-200',
  icon: 'bg-gray-100 text-gray-700',
  hover: 'hover:border-gray-300',
  accent: 'bg-gray-500'
}

const NoteCard = ({ note, onEdit }) => {
  const { pinNote, unpinNote, deleteNote } = useNotes()
  const [showOptions, setShowOptions] = useState(false)
  const [isDeleting, setIsDeleting] = useState(false)
  const [isPinning, setIsPinning] = useState(false)
  const [deleteModalOpen, setDeleteModalOpen] = useState(false)
  const [isHovered, setIsHovered] = useState(false)

  // Obter configuração da categoria
  const categoryStyle = categoryConfig[note.category] || defaultCategoryStyle

  const handlePinToggle = async () => {
    try {
      setIsPinning(true)
      if (note.isPinned) {
        await unpinNote(note._id)
      } else {
        await pinNote(note._id)
      }
    } catch (error) {
      console.error('Failed to toggle pin status:', error)
    } finally {
      setIsPinning(false)
      setShowOptions(false)
    }
  }

  const openDeleteModal = () => {
    setShowOptions(false)
    setDeleteModalOpen(true)
  }

  const closeDeleteModal = () => {
    setDeleteModalOpen(false)
  }

  const handleDeleteConfirm = async () => {
    try {
      setIsDeleting(true)
      await deleteNote(note._id)
    } catch (error) {
      console.error('Failed to delete note:', error)
      setIsDeleting(false)
      setDeleteModalOpen(false)
    }
  }

  // Format dates
  const formatDate = (dateString) => {
    if (!dateString) return ''
    const date = new Date(dateString)
    return date.toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    })
  }

  // Função melhorada para truncar conteúdo com respeito a quebras de linha
  const truncateContent = (text, maxLength = 120) => {
    if (!text) return ''

    // Se o texto já for curto, retorne-o inteiro
    if (text.length <= maxLength) return text

    // Encontre a primeira quebra de linha, se houver
    const firstLineBreak = text.indexOf('\n')

    // Se houver uma quebra de linha antes do maxLength, truncar até ela
    if (firstLineBreak > 0 && firstLineBreak < maxLength) {
      return text.substring(0, firstLineBreak) + '...'
    }

    // Encontre o último espaço antes do limite para não cortar palavras
    const lastSpace = text.lastIndexOf(' ', maxLength)
    if (lastSpace > 0) {
      return text.substring(0, lastSpace) + '...'
    }

    // Se não houver espaços, corte no tamanho máximo
    return text.substring(0, maxLength) + '...'
  }

  // Calcular tempo relativo desde a atualização
  const getTimeAgo = (dateString) => {
    if (!dateString) return ''

    const date = new Date(dateString)
    const now = new Date()
    const diffMs = now - date
    const diffSec = Math.floor(diffMs / 1000)
    const diffMin = Math.floor(diffSec / 60)
    const diffHour = Math.floor(diffMin / 60)
    const diffDay = Math.floor(diffHour / 24)

    if (diffSec < 60) return 'just now'
    if (diffMin < 60) return `${diffMin}m ago`
    if (diffHour < 24) return `${diffHour}h ago`
    if (diffDay < 7) return `${diffDay}d ago`

    return formatDate(dateString)
  }

  return (
    <div
      className={`relative rounded-xl border ${categoryStyle.border} shadow-sm transition-all duration-200
      ${isHovered ? 'shadow-md ' + categoryStyle.hover : ''} ${categoryStyle.bg}`}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      {/* Indicador de fixado */}
      {note.isPinned && (
        <div className="absolute -top-1.5 -right-1.5 z-10">
          <div className="h-7 w-7 rounded-full bg-amber-400 flex items-center justify-center shadow-sm">
            <FiStar className="text-white w-4 h-4" />
          </div>
        </div>
      )}

      {/* Barra superior com categoria */}
      <div className={`h-1.5 w-full ${categoryStyle.accent} rounded-t-xl`}></div>

      <div className="p-4">
        {/* Cabeçalho do card */}
        <div className="flex justify-between items-start">
          <div className="flex items-center">
            <div className={`mr-2 w-8 h-8 rounded-full ${categoryStyle.icon} flex items-center justify-center`}>
              <span className="text-xs font-semibold uppercase">{note.category?.charAt(0) || 'N'}</span>
            </div>
            <h3 className="font-medium text-gray-900 text-lg line-clamp-1">{note.title}</h3>
          </div>

          {/* Menu de opções */}
          <div className="relative">
            <button
              type="button"
              className={`text-gray-500 hover:text-gray-700 rounded-full p-1.5 ${isHovered ? 'opacity-100' : 'opacity-70'} hover:bg-gray-100`}
              onClick={() => setShowOptions(!showOptions)}
              aria-label="Opções da nota"
            >
              <FiMoreVertical className="h-5 w-5" />
            </button>

            {showOptions && (
              <div className="absolute right-0 z-10 mt-1 w-44 bg-white rounded-xl shadow-lg py-1 border border-gray-200">
                <button
                  className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center"
                  onClick={() => {
                    setShowOptions(false)
                    onEdit(note)
                  }}
                >
                  <FiEdit2 className="mr-2 h-4 w-4" /> Editar
                </button>
                <button
                  className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center"
                  onClick={handlePinToggle}
                  disabled={isPinning}
                >
                  <FiStar className={`mr-2 h-4 w-4 ${note.isPinned ? 'text-amber-400' : ''}`} />
                  {note.isPinned ? 'Remover fixação' : 'Fixar nota'}
                </button>
                <Link
                  to={`/notes/${note._id}`}
                  className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center"
                >
                  <FiEye className="mr-2 h-4 w-4" /> Visualizar
                </Link>
                <div className="border-t border-gray-100 my-1"></div>
                <button
                  className="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 flex items-center"
                  onClick={openDeleteModal}
                >
                  <FiTrash2 className="mr-2 h-4 w-4" /> Excluir
                </button>
              </div>
            )}
          </div>
        </div>

        {/* Conteúdo da nota */}
        <div className="mt-3 mb-3">
          <p className="text-gray-600 text-sm line-clamp-3 min-h-[3rem]">
            {truncateContent(note.content)}
          </p>
        </div>

        {/* Tags */}
        {note.tags && note.tags.length > 0 && (
          <div className="flex flex-wrap gap-1.5 mb-3">
            {note.tags.map((tag, idx) => (
              <span
                key={idx}
                className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-white text-gray-700 border border-gray-200"
              >
                <FiTag className="mr-1 h-3 w-3 text-gray-500" />
                {tag}
              </span>
            ))}
          </div>
        )}

        {/* Rodapé com data e links rápidos */}
        <div className="flex justify-between items-center mt-3 pt-2 border-t border-gray-100">
          {/* Data de atualização */}
          <div className="flex items-center text-xs text-gray-500" title={formatDate(note.updatedAt)}>
            <FiClock className="mr-1 h-3 w-3" />
            <span>{getTimeAgo(note.updatedAt)}</span>
          </div>

          {/* Botões de ação rápida */}
          <div className="flex space-x-1.5">
            <button
              onClick={handlePinToggle}
              disabled={isPinning}
              className={`p-1.5 rounded-lg transition-colors ${note.isPinned ? 'text-amber-500 hover:bg-amber-50' : 'text-gray-400 hover:bg-gray-50 hover:text-gray-600'}`}
              title={note.isPinned ? "Remover fixação" : "Fixar nota"}
            >
              <FiStar className="h-4 w-4" />
            </button>

            <button
              onClick={() => onEdit(note)}
              className="p-1.5 rounded-lg transition-colors text-gray-400 hover:bg-gray-50 hover:text-gray-600"
              title="Editar nota"
            >
              <FiEdit2 className="h-4 w-4" />
            </button>

            <Link
              to={`/notes/${note._id}`}
              className="p-1.5 rounded-lg transition-colors text-gray-400 hover:bg-gray-50 hover:text-gray-600"
              title="Ver detalhes"
            >
              <FiEye className="h-4 w-4" />
            </Link>
          </div>
        </div>
      </div>

      {/* Modal de confirmação de exclusão */}
      <DeleteConfirmationModal
        isOpen={deleteModalOpen}
        onClose={closeDeleteModal}
        onConfirm={handleDeleteConfirm}
        title="Excluir nota"
        message="Tem certeza que deseja excluir esta nota? Esta ação não pode ser desfeita."
        itemName={note.title}
        itemType="nota"
        isDeleting={isDeleting}
      />
    </div>
  )
}

export default NoteCard

================
File: src/components/notes/NoteForm.jsx
================
import { useState, useEffect } from 'react'
import { useNavigate, useParams, Link } from 'react-router-dom'
import { Formik, Form, Field, ErrorMessage } from 'formik'
import * as Yup from 'yup'
import { FiSave, FiArrowLeft, FiAlertCircle, FiX } from 'react-icons/fi'
import { useNotes } from '../../hooks/useNotes'
import { useTheme } from '../../hooks/useTheme'

// Valid categories matching backend model
const CATEGORIES = [
  { value: 'general', label: 'General' },
  { value: 'personal', label: 'Personal' },
  { value: 'work', label: 'Work' },
  { value: 'important', label: 'Important' },
  { value: 'idea', label: 'Idea' },
]

// Note validation schema
const noteSchema = Yup.object().shape({
  title: Yup.string()
    .min(2, 'Title must be at least 2 characters')
    .max(100, 'Title must be less than 100 characters')
    .required('Title is required'),
  content: Yup.string()
    .required('Content is required'),
  category: Yup.string()
    .oneOf(CATEGORIES.map(c => c.value), 'Invalid category')
    .required('Category is required'),
  isPinned: Yup.boolean(),
  tags: Yup.array().of(Yup.string())
})

const NoteForm = ({ isModal = false }) => {
  const navigate = useNavigate()
  const { id } = useParams()
  const { getNoteById, createNote, updateNote } = useNotes()
  const { theme } = useTheme()

  const [note, setNote] = useState(null)
  const [loading, setLoading] = useState(!!id)
  const [error, setError] = useState(null)
  const [newTag, setNewTag] = useState('')
  const [isSaving, setIsSaving] = useState(false)

  // Default values for new note
  const defaultValues = {
    title: '',
    content: '',
    category: 'general',
    isPinned: false,
    tags: [],
  }

  // Fetch note data when editing
  useEffect(() => {
    let isMounted = true;

    if (id) {
      const fetchNote = async () => {
        try {
          setLoading(true)
          setError(null)
          const noteData = await getNoteById(id)
          if (isMounted) {
            setNote(noteData)
          }
        } catch (err) {
          console.error("Error fetching note for edit:", err);
          if (isMounted) {
            if (err.response?.status === 403) {
              setError("You don't have permission to edit this note.")
            } else {
              setError(err.message || 'Failed to fetch note')
            }
          }
        } finally {
          if (isMounted) {
            setLoading(false)
          }
        }
      }

      fetchNote()
    } else {
      // Reset state when creating a new note
      setNote(null)
      setLoading(false)
      setError(null)
    }

    // Cleanup function to prevent state updates on unmounted component
    return () => {
      isMounted = false;
    }
  }, [id, getNoteById])

  // Handle form submission
  const handleSubmit = async (values, { setSubmitting, resetForm }) => {
    try {
      setError(null)
      setIsSaving(true)

      // Prepare data for API
      const noteData = {
        title: values.title,
        content: values.content,
        category: values.category,
        isPinned: values.isPinned,
        tags: values.tags,
      }

      let result;
      if (id) {
        // Update existing note
        result = await updateNote(id, noteData)
      } else {
        // Create new note
        result = await createNote(noteData)
      }

      // Navigate back to notes list
      if (!isModal) {
        navigate('/notes', {
          state: {
            message: id ? 'Note updated successfully' : 'Note created successfully',
            type: 'success'
          }
        });
      }

      return result
    } catch (err) {
      console.error('Error saving note:', err)
      setError(err.message || 'Failed to save note')
      return null
    } finally {
      setSubmitting(false)
      setIsSaving(false)
    }
  }

  // Prepare initial values
  const getInitialValues = () => {
    if (id && note) {
      return {
        title: note.title || '',
        content: note.content || '',
        category: note.category || 'general',
        isPinned: note.isPinned || false,
        tags: note.tags || [],
      }
    }
    return defaultValues
  }

  // Handle tag addition
  const handleAddTag = (values, setFieldValue) => {
    const trimmedTag = newTag.trim()
    if (trimmedTag && !values.tags.includes(trimmedTag)) {
      setFieldValue('tags', [...values.tags, trimmedTag]);
      setNewTag('');
    }
  }

  // Handle retry when loading fails
  const handleRetry = () => {
    if (id) {
      setLoading(true)
      setError(null)
      getNoteById(id)
        .then(data => {
          setNote(data)
        })
        .catch(err => {
          setError(err.message || 'Failed to fetch note')
        })
        .finally(() => {
          setLoading(false)
        })
    }
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[50vh]">
        <div className="w-12 h-12 border-4 border-violet-500 rounded-full border-t-transparent animate-spin"></div>
      </div>
    )
  }

  const initialValues = getInitialValues()

  return (
    <div className={`${isModal ? '' : 'max-w-3xl mx-auto'}`}>
      {/* Back button - only show when not in modal mode */}
      {!isModal && (
        <div className="mb-6">
          <Link
            to="/notes"
            className="inline-flex items-center text-sm font-medium text-gray-500 hover:text-gray-700"
          >
            <FiArrowLeft className="mr-1" /> Back to Notes
          </Link>
        </div>
      )}

      <h1 className="text-2xl font-bold text-gray-900 mb-6">
        {id ? 'Edit Note' : 'Create New Note'}
      </h1>

      {/* Error message */}
      {error && (
        <div className="bg-red-50 border-l-4 border-red-500 p-4 mb-6 rounded-xl">
          <div className="flex items-start">
            <FiAlertCircle className="h-5 w-5 text-red-500 mt-0.5 mr-2" />
            <div>
              <p className="text-sm text-red-700">{error}</p>
              {id && (
                <button
                  onClick={handleRetry}
                  className="mt-2 text-sm text-red-600 hover:text-red-800 font-medium"
                >
                  Try again
                </button>
              )}
            </div>
          </div>
        </div>
      )}

      <Formik
        initialValues={initialValues}
        validationSchema={noteSchema}
        onSubmit={handleSubmit}
        enableReinitialize
      >
        {({ isSubmitting, values, setFieldValue, errors, touched }) => (
          <Form className="space-y-6">
            {/* Title */}
            <div>
              <label htmlFor="title" className="label">Title</label>
              <Field
                type="text"
                id="title"
                name="title"
                className={`input ${errors.title && touched.title ? 'border-red-300 bg-red-50' : ''}`}
                placeholder="Note title"
              />
              <ErrorMessage name="title" component="div" className="error" />
            </div>

            {/* Category */}
            <div>
              <label htmlFor="category" className="label">Category</label>
              <Field
                as="select"
                id="category"
                name="category"
                className={`input ${errors.category && touched.category ? 'border-red-300 bg-red-50' : ''}`}
              >
                {CATEGORIES.map(category => (
                  <option key={category.value} value={category.value}>
                    {category.label}
                  </option>
                ))}
              </Field>
              <ErrorMessage name="category" component="div" className="error" />
            </div>

            {/* Is Pinned */}
            <div>
              <label className="inline-flex items-center">
                <Field
                  type="checkbox"
                  name="isPinned"
                  className="h-4 w-4 text-violet-600 rounded border-gray-300 focus:ring-violet-500"
                />
                <span className="ml-2 text-sm font-medium text-gray-700">Pin this note</span>
              </label>
            </div>

            {/* Content */}
            <div>
              <label htmlFor="content" className="label">Content</label>
              <Field
                as="textarea"
                id="content"
                name="content"
                className={`input min-h-[200px] resize-y ${errors.content && touched.content ? 'border-red-300 bg-red-50' : ''}`}
                placeholder="Your note content..."
              />
              <ErrorMessage name="content" component="div" className="error" />
            </div>

            {/* Tags */}
            <div>
              <label className="label">Tags</label>
              <div className="mb-2 flex flex-wrap gap-2">
                {values.tags && values.tags.map((tag, index) => (
                  <div
                    key={index}
                    className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800"
                  >
                    <span>{tag}</span>
                    <button
                      type="button"
                      onClick={() => {
                        const newTags = [...values.tags];
                        newTags.splice(index, 1);
                        setFieldValue('tags', newTags);
                      }}
                      className="ml-2 text-gray-500 hover:text-gray-700"
                      aria-label={`Remove ${tag} tag`}
                    >
                      <FiX className="h-4 w-4" />
                    </button>
                  </div>
                ))}
              </div>
              <div className="flex">
                <input
                  type="text"
                  value={newTag}
                  onChange={(e) => setNewTag(e.target.value)}
                  className="input mr-2"
                  placeholder="Add a tag"
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      e.preventDefault();
                      handleAddTag(values, setFieldValue);
                    }
                  }}
                />
                <button
                  type="button"
                  onClick={() => handleAddTag(values, setFieldValue)}
                  className="btn btn-outline"
                >
                  Add
                </button>
              </div>
            </div>

            {/* Form Actions */}
            <div className="pt-4 border-t border-gray-200 flex justify-end space-x-3">
              {isModal ? (
                <button
                  type="button"
                  onClick={() => {
                    resetForm();
                    setError(null);
                  }}
                  className="btn btn-outline"
                >
                  Cancel
                </button>
              ) : (
                <Link
                  to="/notes"
                  className="btn btn-outline"
                >
                  Cancel
                </Link>
              )}
              <button
                type="submit"
                disabled={isSubmitting || isSaving}
                className={`btn btn-primary ${(isSubmitting || isSaving) ? 'opacity-75 cursor-not-allowed' : ''}`}
              >
                <FiSave className="mr-1" />
                {isSubmitting || isSaving ? 'Saving...' : 'Save Note'}
              </button>
            </div>
          </Form>
        )}
      </Formik>
    </div>
  )
}

export default NoteForm

================
File: src/components/notes/NoteModal.jsx
================
import { useState, useEffect } from 'react'
import { createPortal } from 'react-dom'
import { FiX, FiEdit2, FiTag, FiStar } from 'react-icons/fi'
import NoteForm from './NoteForm'
import { useNotes } from '../../hooks/useNotes'
import { useTheme } from '../../hooks/useTheme'

// Category colors for pastel gradients
const categoryColors = {
  general: 'from-blue-100 to-purple-100',
  personal: 'from-pink-100 to-red-100',
  work: 'from-cyan-100 to-blue-100',
  important: 'from-yellow-100 to-orange-100',
  idea: 'from-green-100 to-teal-100'
}

const NoteModal = ({ note, isOpen, onClose, isEditMode = false }) => {
  const { pinNote, unpinNote } = useNotes()
  const { theme } = useTheme()
  const [isEditing, setIsEditing] = useState(isEditMode)
  const [localNote, setLocalNote] = useState(note)

  useEffect(() => {
    setLocalNote(note)
    setIsEditing(isEditMode)
  }, [note, isEditMode])

  if (!isOpen) return null

  const handlePinToggle = async () => {
    try {
      let updatedNote
      if (localNote.isPinned) {
        updatedNote = await unpinNote(localNote._id)
      } else {
        updatedNote = await pinNote(localNote._id)
      }
      setLocalNote(updatedNote)
    } catch (error) {
      console.error('Failed to toggle pin status:', error)
    }
  }

  // Format date
  const formatDate = (dateString) => {
    if (!dateString) return ''
    const date = new Date(dateString)
    return date.toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  return createPortal(
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        {/* Backdrop */}
        <div
          className="fixed inset-0 transition-opacity"
          aria-hidden="true"
          onClick={onClose}
        >
          <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
        </div>

        {/* Modal */}
        <div
          className="inline-block align-bottom bg-white rounded-xl text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-3xl sm:w-full"
        >
          {isEditing ? (
            <>
              {/* Edit mode header */}
              <div className="bg-gray-50 px-4 py-3 border-b border-gray-200 sm:px-6 flex justify-between items-center">
                <h3 className="text-lg font-medium text-gray-900">
                  {localNote?._id ? 'Edit Note' : 'Create New Note'}
                </h3>
                <button
                  type="button"
                  className="rounded-md text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-violet-500"
                  onClick={onClose}
                >
                  <span className="sr-only">Close</span>
                  <FiX className="h-6 w-6" />
                </button>
              </div>

              {/* Note form */}
              <div className="px-4 py-5 sm:p-6">
                <NoteForm
                  note={localNote}
                  onClose={() => {
                    setIsEditing(false)
                    if (!localNote?._id) { // If creating a new note
                      onClose()
                    }
                  }}
                  isModal={true}
                />
              </div>
            </>
          ) : (
            <>
              {/* View mode header */}
              <div
                className={`px-4 py-3 border-b border-gray-200 sm:px-6 flex justify-between items-center
                  bg-gradient-to-r ${categoryColors[localNote?.category] || 'from-gray-50 to-gray-100'}`}
              >
                <div className="flex items-center">
                  <h3 className="text-lg font-medium text-gray-900">
                    {localNote?.title}
                  </h3>
                  {localNote?.isPinned && (
                    <span className="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                      <FiStar className="mr-1" />
                      Pinned
                    </span>
                  )}
                </div>

                <div className="flex items-center space-x-2">
                  <button
                    type="button"
                    className="rounded-md text-gray-500 hover:text-violet-600 focus:outline-none focus:ring-2 focus:ring-violet-500"
                    onClick={() => setIsEditing(true)}
                  >
                    <span className="sr-only">Edit</span>
                    <FiEdit2 className="h-5 w-5" />
                  </button>
                  <button
                    type="button"
                    className="rounded-md text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-violet-500"
                    onClick={onClose}
                  >
                    <span className="sr-only">Close</span>
                    <FiX className="h-6 w-6" />
                  </button>
                </div>
              </div>

              {/* Note content */}
              <div className="px-4 py-5 sm:p-6">
                <div
                  className="prose max-w-none mb-6 whitespace-pre-line text-gray-700"
                >
                  {localNote?.content}
                </div>

                {/* Tags */}
                {localNote?.tags && localNote.tags.length > 0 && (
                  <div className="flex flex-wrap gap-2 mb-4">
                    {localNote.tags.map((tag, idx) => (
                      <span
                        key={idx}
                        className="inline-flex items-center px-3 py-0.5 rounded-full text-sm font-medium bg-gray-100 text-gray-800"
                      >
                        <FiTag className="mr-1 text-gray-500" />
                        {tag}
                      </span>
                    ))}
                  </div>
                )}

                {/* Note metadata */}
                <div className="mt-6 border-t border-gray-200 pt-4">
                  <dl className="grid grid-cols-1 sm:grid-cols-2 gap-x-4 gap-y-6">
                    <div>
                      <dt className="text-sm font-medium text-gray-500">Category</dt>
                      <dd className="mt-1 text-sm text-gray-900 capitalize">{localNote?.category}</dd>
                    </div>
                    <div>
                      <dt className="text-sm font-medium text-gray-500">Created</dt>
                      <dd className="mt-1 text-sm text-gray-900">
                        {formatDate(localNote?.createdAt)}
                      </dd>
                    </div>
                    <div>
                      <dt className="text-sm font-medium text-gray-500">Last updated</dt>
                      <dd className="mt-1 text-sm text-gray-900">
                        {formatDate(localNote?.updatedAt)}
                      </dd>
                    </div>
                  </dl>
                </div>
              </div>

              {/* Actions */}
              <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button
                  type="button"
                  className="btn btn-outline ml-3"
                  onClick={handlePinToggle}
                >
                  <FiStar className="mr-1" />
                  {localNote?.isPinned ? 'Unpin' : 'Pin'}
                </button>
                <button
                  type="button"
                  className="btn btn-primary ml-3"
                  onClick={() => setIsEditing(true)}
                >
                  <FiEdit2 className="mr-1" /> Edit
                </button>
              </div>
            </>
          )}
        </div>
      </div>
    </div>,
    document.body
  )
}

export default NoteModal

================
File: src/components/notes/NotesDetail.jsx
================
import { useState, useEffect, useCallback } from 'react'
import { useParams, useNavigate, Link } from 'react-router-dom'
import { FiArrowLeft, FiEdit2, FiTrash2, FiCalendar, FiTag, FiStar, FiAlertCircle, FiLock } from 'react-icons/fi'
import { useNotes } from '../../hooks/useNotes'
import { useAuth } from '../../hooks/useAuth'
import { useTheme } from '../../hooks/useTheme'
import DeleteConfirmationModal from '../../components/common/DeleteConfirmationModal'

// Valid category colors
const CATEGORY_COLORS = {
  'general': 'bg-gray-100 text-gray-800',
  'personal': 'bg-green-100 text-green-800',
  'work': 'bg-blue-100 text-blue-800',
  'important': 'bg-amber-100 text-amber-800',
  'idea': 'bg-purple-100 text-purple-800'
}

const NotesDetail = () => {
  const { id } = useParams()
  const navigate = useNavigate()
  const { user } = useAuth()
  const { getNoteById, deleteNote, pinNote, unpinNote } = useNotes()
  const { theme } = useTheme()

  const [note, setNote] = useState(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [isPinning, setIsPinning] = useState(false)

  // Estado para o modal de confirmação de exclusão
  const [deleteModalOpen, setDeleteModalOpen] = useState(false)
  const [isDeleting, setIsDeleting] = useState(false)

  // Fetch note data
  const fetchNote = useCallback(async () => {
    try {
      setLoading(true)
      setError(null)
      const noteData = await getNoteById(id)
      setNote(noteData)
    } catch (err) {
      console.error("Error fetching note:", err)
      if (err.response?.status === 403) {
        setError("You don't have permission to view this note.")
      } else if (err.response?.status === 404) {
        setError("Note not found")
      } else {
        setError(err.message || 'Failed to load note')
      }
    } finally {
      setLoading(false)
    }
  }, [id, getNoteById])

  // Fetch note when component mounts or ID changes
  useEffect(() => {
    let isMounted = true;

    const loadNote = async () => {
      try {
        setLoading(true)
        const noteData = await getNoteById(id)
        if (isMounted) {
          setNote(noteData)
          setError(null)
        }
      } catch (err) {
        console.error("Error fetching note:", err)
        if (isMounted) {
          if (err.response?.status === 403) {
            setError("You don't have permission to view this note. Notes are only visible to their owners.")
          } else if (err.response?.status === 404) {
            setError("Note not found")
          } else {
            setError(err.message || 'Failed to load note')
          }
        }
      } finally {
        if (isMounted) {
          setLoading(false)
        }
      }
    }

    loadNote()

    // Cleanup function
    return () => {
      isMounted = false
    }
  }, [id, getNoteById])

  // Format date
  const formatDate = (dateString) => {
    if (!dateString) return ''

    const date = new Date(dateString)
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  // Abrir o modal de confirmação de exclusão
  const openDeleteModal = () => {
    setDeleteModalOpen(true)
  }

  // Fechar o modal de confirmação de exclusão
  const closeDeleteModal = () => {
    setDeleteModalOpen(false)
  }

  // Executar a exclusão após a confirmação
  const handleDeleteConfirm = async () => {
    try {
      setIsDeleting(true)
      await deleteNote(id)
      // Navigate back to notes list after successful deletion
      navigate('/notes', {
        state: {
          message: 'Note deleted successfully',
          type: 'success'
        }
      })
    } catch (error) {
      console.error('Failed to delete note:', error)
      setError(error.message || 'Failed to delete note')
      setIsDeleting(false)
      setDeleteModalOpen(false)
    }
  }

  // Handle pin/unpin toggle
  const handlePinToggle = async () => {
    if (!note) return;

    try {
      setIsPinning(true)
      let updatedNote;

      if (note.isPinned) {
        updatedNote = await unpinNote(id);
      } else {
        updatedNote = await pinNote(id);
      }

      setNote(updatedNote);
      setIsPinning(false);
    } catch (err) {
      console.error(`Error toggling pin status for note ${id}:`, err)
      setError(err.message || 'Failed to update pin status');
      setIsPinning(false);
    }
  }

  // Show loading state
  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[50vh]">
        <div className="w-12 h-12 border-4 border-violet-500 rounded-full border-t-transparent animate-spin mb-4"></div>
        <p className="text-gray-500">Loading note...</p>
      </div>
    )
  }

  // Show permission error state with explanation
  if (error && error.includes("permission")) {
    return (
      <div>
        <div className="mb-6">
          <Link
            to="/notes"
            className="inline-flex items-center text-sm font-medium text-gray-500 hover:text-gray-700"
          >
            <FiArrowLeft className="mr-1" /> Back to Notes
          </Link>
        </div>

        <div className="text-center py-12 card">
          <div className="inline-flex items-center justify-center h-14 w-14 rounded-full bg-yellow-100 mb-4">
            <FiLock className="h-6 w-6 text-yellow-600" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">Restricted Access</h3>
          <p className="text-gray-600 mb-2 max-w-md mx-auto">
            You don't have permission to view this note. Only the note owner can view it.
          </p>
          <p className="text-gray-500 text-sm mb-6 max-w-md mx-auto">
            You are logged in as: {user?.email}
          </p>
          <Link
            to="/notes"
            className="btn btn-primary"
          >
            View my notes
          </Link>
        </div>
      </div>
    )
  }

  // Show general error state
  if (error) {
    return (
      <div>
        <div className="mb-6">
          <Link
            to="/notes"
            className="inline-flex items-center text-sm font-medium text-gray-500 hover:text-gray-700"
          >
            <FiArrowLeft className="mr-1" /> Back to Notes
          </Link>
        </div>

        <div className="bg-red-50 border-l-4 border-red-500 p-4 mb-6 rounded-xl">
          <div className="flex items-start">
            <FiAlertCircle className="h-5 w-5 text-red-500 mt-0.5 mr-2" />
            <div>
              <p className="text-sm text-red-700 font-medium">{error}</p>
              <button
                onClick={fetchNote}
                className="mt-2 text-sm text-red-600 hover:text-red-800 font-medium"
              >
                Try again
              </button>
            </div>
          </div>
        </div>
      </div>
    )
  }

  // Show not found state
  if (!note) {
    return (
      <div>
        <div className="mb-6">
          <Link
            to="/notes"
            className="inline-flex items-center text-sm font-medium text-gray-500 hover:text-gray-700"
          >
            <FiArrowLeft className="mr-1" /> Back to Notes
          </Link>
        </div>

        <div className="text-center py-12 card">
          <h3 className="text-lg font-medium text-gray-900 mb-2">Note not found</h3>
          <p className="text-gray-600 mb-6">The note you're looking for doesn't exist or has been deleted.</p>
          <Link
            to="/notes/new"
            className="btn btn-primary"
          >
            Create New Note
          </Link>
        </div>
      </div>
    )
  }

  const categoryColor = CATEGORY_COLORS[note.category] || 'bg-gray-100 text-gray-800';

  return (
    <div>
      {/* Back button and actions */}
      <div className="flex justify-between items-center mb-6">
        <Link
          to="/notes"
          className="inline-flex items-center text-sm font-medium text-gray-500 hover:text-gray-700"
        >
          <FiArrowLeft className="mr-1" /> Back to Notes
        </Link>

        <div className="flex space-x-2">
          <button
            onClick={handlePinToggle}
            disabled={isPinning}
            className={`btn btn-outline ${isPinning ? 'opacity-75 cursor-not-allowed' : ''}`}
          >
            <FiStar className={`mr-1 ${note.isPinned ? 'text-yellow-500' : ''}`} />
            {isPinning ? 'Updating...' : (note.isPinned ? 'Unpin' : 'Pin')}
          </button>

          <Link
            to={`/notes/${id}/edit`}
            className="btn btn-outline"
          >
            <FiEdit2 className="mr-1" /> Edit
          </Link>

          <button
            onClick={openDeleteModal}
            className="btn btn-outline text-red-600 hover:bg-red-50 hover:border-red-300"
          >
            <FiTrash2 className="mr-1" /> Delete
          </button>
        </div>
      </div>

      {/* Note content */}
      <div className="card overflow-hidden">
        <div className="p-6">
          <div className="flex justify-between items-start mb-4">
            <h1 className="text-2xl font-bold text-gray-900">{note.title}</h1>

            {note.category && (
              <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${categoryColor}`}>
                {note.category}
              </span>
            )}
          </div>

          {note.isPinned && (
            <div className="mb-4 flex items-center">
              <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                <FiStar className="mr-1" /> Pinned
              </span>
            </div>
          )}

          <div className="prose max-w-none mb-6">
            <p className="whitespace-pre-line text-gray-700">{note.content}</p>
          </div>

          {/* Tags */}
          {note.tags && note.tags.length > 0 && (
            <div className="mb-4">
              <h3 className="text-sm font-medium text-gray-500 mb-2">Tags</h3>
              <div className="flex flex-wrap gap-2">
                {note.tags.map((tag, index) => (
                  <span
                    key={index}
                    className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800"
                  >
                    <FiTag className="mr-1" /> {tag}
                  </span>
                ))}
              </div>
            </div>
          )}

          <div className="flex items-center text-sm text-gray-500 border-t border-gray-200 pt-4">
            <FiCalendar className="mr-1" />
            <span>
              {note.updatedAt !== note.createdAt ? (
                <span>Updated on {formatDate(note.updatedAt)}</span>
              ) : (
                <span>Created on {formatDate(note.createdAt)}</span>
              )}
            </span>
          </div>
        </div>
      </div>

      {/* Delete Confirmation Modal */}
      <DeleteConfirmationModal
        isOpen={deleteModalOpen}
        onClose={closeDeleteModal}
        onConfirm={handleDeleteConfirm}
        title="Delete Note"
        message="Are you sure you want to delete this note? This action cannot be undone."
        itemName={note.title}
        itemType="note"
        isDeleting={isDeleting}
      />
    </div>
  )
}

export default NotesDetail

================
File: src/components/notes/NotesFilter.jsx
================
import { useState, useEffect, useCallback } from 'react'
import {
  FiFilter,
  FiSearch,
  FiX,
  FiTag,
  FiStar
} from 'react-icons/fi'
import { useNotes } from '../../hooks/useNotes'

const NotesFilter = () => {
  const { filters, updateFilters, resetFilters } = useNotes()
  const [searchTerm, setSearchTerm] = useState(filters.search || '')
  const [showFilters, setShowFilters] = useState(false)
  const [availableTags, setAvailableTags] = useState([])
  const [isSearching, setIsSearching] = useState(false)

  // Set available tags - in a real app, this would come from an API
  useEffect(() => {
    setAvailableTags(['work', 'important', 'todo', 'idea', 'meeting', 'personal'])
  }, [])

  // Initialize search term from filters
  useEffect(() => {
    setSearchTerm(filters.search || '')
  }, [filters.search])

  // Handle search with debounce
  useEffect(() => {
    // Don't trigger search if the term hasn't actually changed
    if (searchTerm === filters.search) return;

    const timer = setTimeout(() => {
      setIsSearching(true)
      updateFilters({ search: searchTerm, page: 1 }, true)

      // Clear searching state after a short delay to allow UI updates to complete
      setTimeout(() => setIsSearching(false), 300)
    }, 500)

    return () => clearTimeout(timer)
  }, [searchTerm, filters.search, updateFilters])

  // Handle search input change
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value)
  }

  // Clear search
  const handleClearSearch = () => {
    setSearchTerm('')
    updateFilters({ search: '', page: 1 }, true)
  }

  // Handle category change
  const handleCategoryChange = useCallback((category) => {
    updateFilters({
      category: filters.category === category ? '' : category,
      page: 1
    }, true);
  }, [filters.category, updateFilters])

  // Handle pin filter change
  const handlePinChange = useCallback((isPinned) => {
    updateFilters({
      isPinned: filters.isPinned === isPinned ? null : isPinned,
      page: 1
    }, true);
  }, [filters.isPinned, updateFilters])

  // Handle tag selection
  const handleTagChange = useCallback((tag) => {
    const currentTags = [...(filters.tags || [])]
    const tagIndex = currentTags.indexOf(tag)

    if (tagIndex === -1) {
      updateFilters({ tags: [...currentTags, tag], page: 1 }, true);
    } else {
      currentTags.splice(tagIndex, 1)
      updateFilters({ tags: currentTags, page: 1 }, true);
    }
  }, [filters.tags, updateFilters])

  // Handle reset filters
  const handleResetFilters = useCallback(() => {
    setSearchTerm('')
    resetFilters()
  }, [resetFilters])

  // Check if any filter is active
  const hasActiveFilters = Object.entries(filters).some(([key, value]) => {
    if (key === 'page' || key === 'limit') return false
    if (Array.isArray(value)) return value.length > 0
    return !!value
  })

  return (
    <div className="mb-6">
      <div className="flex flex-col md:flex-row md:items-center justify-between gap-4 mb-4">
        {/* Search input */}
        <div className="relative flex-grow max-w-xl">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <FiSearch className="h-5 w-5 text-gray-400" />
          </div>
          <input
            type="text"
            placeholder="Search notes..."
            className="input pl-10 pr-10"
            value={searchTerm}
            onChange={handleSearchChange}
            aria-label="Search notes"
          />
          {searchTerm && (
            <div className="absolute inset-y-0 right-0 pr-3 flex items-center">
              <button
                type="button"
                onClick={handleClearSearch}
                className="text-gray-400 hover:text-gray-500"
                aria-label="Clear search"
              >
                <FiX className="h-5 w-5" />
              </button>
            </div>
          )}
        </div>

        {/* Filter button */}
        <div className="flex">
          <button
            type="button"
            className={`btn ${showFilters ? 'btn-primary' : 'btn-outline'}`}
            onClick={() => setShowFilters(!showFilters)}
            aria-expanded={showFilters}
            aria-controls="filter-panel"
          >
            <FiFilter className="mr-2" />
            <span>Filters</span>
            {hasActiveFilters && (
              <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-violet-100 text-violet-800">
                Active
              </span>
            )}
          </button>

          {hasActiveFilters && (
            <button
              type="button"
              className="ml-2 btn btn-outline text-gray-700"
              onClick={handleResetFilters}
              aria-label="Clear all filters"
            >
              <FiX className="mr-1" /> Clear
            </button>
          )}
        </div>
      </div>

      {/* Show searching indicator */}
      {isSearching && (
        <div className="flex items-center text-sm text-gray-500 mt-1 ml-2 animate-pulse">
          <span>Searching...</span>
        </div>
      )}

      {/* Filters panel */}
      {showFilters && (
        <div id="filter-panel" className="card p-4 mb-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* Category filters */}
            <div>
              <h4 className="text-sm font-medium text-gray-700 mb-2">Categories</h4>
              <div className="space-y-2">
                {['general', 'personal', 'work', 'important', 'idea'].map(category => {
                  const isSelected = filters.category === category
                  return (
                    <label
                      key={category}
                      className={`flex items-center p-2 rounded-lg cursor-pointer ${
                        isSelected ? 'bg-violet-50 border border-violet-200' : 'hover:bg-gray-50 border border-transparent'
                      }`}
                    >
                      <input
                        type="checkbox"
                        className="h-4 w-4 text-violet-600 rounded"
                        checked={isSelected}
                        onChange={() => handleCategoryChange(category)}
                        aria-label={`Filter by ${category} category`}
                      />
                      <span className="ml-2 text-sm text-gray-700 capitalize">
                        {category}
                      </span>
                    </label>
                  )
                })}
              </div>
            </div>

            {/* Pin status */}
            <div>
              <h4 className="text-sm font-medium text-gray-700 mb-2">Pin Status</h4>
              <div className="space-y-2">
                {[
                  { value: true, label: 'Pinned', icon: <FiStar className="mr-1 text-yellow-500" /> },
                  { value: false, label: 'Not Pinned', icon: <FiStar className="mr-1 text-gray-400" /> }
                ].map(option => {
                  const isSelected = filters.isPinned === option.value
                  return (
                    <label
                      key={String(option.value)}
                      className={`flex items-center p-2 rounded-lg cursor-pointer ${
                        isSelected ? 'bg-violet-50 border border-violet-200' : 'hover:bg-gray-50 border border-transparent'
                      }`}
                    >
                      <input
                        type="checkbox"
                        className="h-4 w-4 text-violet-600 rounded"
                        checked={isSelected}
                        onChange={() => handlePinChange(option.value)}
                        aria-label={`Filter by ${option.label}`}
                      />
                      <span className="ml-2 flex items-center text-sm text-gray-700">
                        {option.icon}
                        {option.label}
                      </span>
                    </label>
                  )
                })}
              </div>
            </div>

            {/* Tags */}
            <div>
              <h4 className="text-sm font-medium text-gray-700 mb-2">Tags</h4>
              <div className="space-y-2 max-h-48 overflow-y-auto">
                {availableTags.map(tag => {
                  const isSelected = filters.tags?.includes(tag)
                  return (
                    <label
                      key={tag}
                      className={`flex items-center p-2 rounded-lg cursor-pointer ${
                        isSelected ? 'bg-violet-50 border border-violet-200' : 'hover:bg-gray-50 border border-transparent'
                      }`}
                    >
                      <input
                        type="checkbox"
                        className="h-4 w-4 text-violet-600 rounded"
                        checked={isSelected}
                        onChange={() => handleTagChange(tag)}
                        aria-label={`Filter by ${tag} tag`}
                      />
                      <span className="ml-2 flex items-center text-sm text-gray-700">
                        <FiTag className="mr-1" />
                        {tag}
                      </span>
                    </label>
                  )
                })}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default NotesFilter

================
File: src/components/profile/ProfileAccount.jsx
================
import { useState } from 'react'
import { Formik, Form, Field, ErrorMessage } from 'formik'
import * as Yup from 'yup'
import { FiKey, FiLock, FiLogOut, FiAlertTriangle, FiEye, FiEyeOff, FiShield } from 'react-icons/fi'
import { useAuth } from '../../hooks/useAuth'

// Form validation schema for password change
const passwordChangeSchema = Yup.object().shape({
  currentPassword: Yup.string()
    .required('Current password is required'),
  newPassword: Yup.string()
    .min(8, 'Password must be at least 8 characters')
    .matches(
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=[\]{};':"\\|,.<>/?])/,
      'Password must contain uppercase, lowercase, number and special character'
    )
    .required('New password is required'),
  confirmPassword: Yup.string()
    .oneOf([Yup.ref('newPassword'), null], 'Passwords must match')
    .required('Please confirm your password'),
})

const ProfileAccount = ({ user, loading, onDeactivateAccount }) => {
  const { logout } = useAuth()
  const [showCurrentPassword, setShowCurrentPassword] = useState(false)
  const [showNewPassword, setShowNewPassword] = useState(false)
  const [showConfirmPassword, setShowConfirmPassword] = useState(false)
  const [deactivateConfirmOpen, setDeactivateConfirmOpen] = useState(false)
  const [deactivateError, setDeactivateError] = useState(null)

  // Handle password change
  const handlePasswordChange = async (values, { setSubmitting, resetForm, setStatus }) => {
    try {
      // In a real application, this would call an API endpoint
      console.log('Changing password...', values)

      // Simulate success
      setTimeout(() => {
        setStatus({ success: 'Password changed successfully!' })
        resetForm()
        setSubmitting(false)
      }, 1000)
    } catch (error) {
      console.error('Error changing password:', error)
      setStatus({ error: error.message || 'Failed to change password' })
      setSubmitting(false)
    }
  }

  // Handle account deactivation
  const handleDeactivateAccount = async () => {
    try {
      setDeactivateError(null)
      await onDeactivateAccount()
      logout() // Log the user out after deactivation
    } catch (error) {
      console.error('Error deactivating account:', error)
      setDeactivateError(error.message || 'Failed to deactivate account')
    } finally {
      setDeactivateConfirmOpen(false)
    }
  }

  return (
    <div className="space-y-8">
      <div>
        <h2 className="text-lg font-medium text-gray-900 mb-4">Account Security</h2>
        <p className="text-gray-600 mb-6">
          Manage your account security settings and preferences.
        </p>
      </div>

      {/* Password Change Section */}
      <div className="bg-white p-6 rounded-xl border border-gray-200 shadow-sm">
        <h3 className="text-md font-medium text-gray-900 mb-4">Change Password</h3>

        <Formik
          initialValues={{
            currentPassword: '',
            newPassword: '',
            confirmPassword: '',
          }}
          validationSchema={passwordChangeSchema}
          onSubmit={handlePasswordChange}
        >
          {({ isSubmitting, status }) => (
            <Form className="space-y-4 max-w-md">
              {status?.success && (
                <div className="bg-green-50 border-l-4 border-green-500 p-4 rounded-md">
                  <div className="flex">
                    <div className="ml-3">
                      <p className="text-sm text-green-700">{status.success}</p>
                    </div>
                  </div>
                </div>
              )}

              {status?.error && (
                <div className="bg-red-50 border-l-4 border-red-500 p-4 rounded-md">
                  <div className="flex">
                    <div className="flex-shrink-0">
                      <FiAlertTriangle className="h-5 w-5 text-red-500" />
                    </div>
                    <div className="ml-3">
                      <p className="text-sm text-red-700">{status.error}</p>
                    </div>
                  </div>
                </div>
              )}

              {/* Current Password */}
              <div>
                <label htmlFor="currentPassword" className="block text-sm font-medium text-gray-700 mb-1">
                  Current Password
                </label>
                <div className="relative rounded-md shadow-sm">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <FiKey className="h-5 w-5 text-gray-400" />
                  </div>
                  <Field
                    type={showCurrentPassword ? 'text' : 'password'}
                    name="currentPassword"
                    id="currentPassword"
                    className="block w-full pl-10 pr-10 py-3 border border-gray-300 rounded-xl focus:ring-violet-500 focus:border-violet-500"
                    placeholder="Enter your current password"
                  />
                  <button
                    type="button"
                    className="absolute inset-y-0 right-0 pr-3 flex items-center"
                    onClick={() => setShowCurrentPassword(!showCurrentPassword)}
                  >
                    {showCurrentPassword ?
                      <FiEyeOff className="h-5 w-5 text-gray-400" /> :
                      <FiEye className="h-5 w-5 text-gray-400" />
                    }
                  </button>
                </div>
                <ErrorMessage name="currentPassword" component="div" className="mt-1 text-sm text-red-600" />
              </div>

              {/* New Password */}
              <div>
                <label htmlFor="newPassword" className="block text-sm font-medium text-gray-700 mb-1">
                  New Password
                </label>
                <div className="relative rounded-md shadow-sm">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <FiLock className="h-5 w-5 text-gray-400" />
                  </div>
                  <Field
                    type={showNewPassword ? 'text' : 'password'}
                    name="newPassword"
                    id="newPassword"
                    className="block w-full pl-10 pr-10 py-3 border border-gray-300 rounded-xl focus:ring-violet-500 focus:border-violet-500"
                    placeholder="Create a new password"
                  />
                  <button
                    type="button"
                    className="absolute inset-y-0 right-0 pr-3 flex items-center"
                    onClick={() => setShowNewPassword(!showNewPassword)}
                  >
                    {showNewPassword ?
                      <FiEyeOff className="h-5 w-5 text-gray-400" /> :
                      <FiEye className="h-5 w-5 text-gray-400" />
                    }
                  </button>
                </div>
                <ErrorMessage name="newPassword" component="div" className="mt-1 text-sm text-red-600" />
              </div>

              {/* Confirm Password */}
              <div>
                <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-1">
                  Confirm New Password
                </label>
                <div className="relative rounded-md shadow-sm">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <FiLock className="h-5 w-5 text-gray-400" />
                  </div>
                  <Field
                    type={showConfirmPassword ? 'text' : 'password'}
                    name="confirmPassword"
                    id="confirmPassword"
                    className="block w-full pl-10 pr-10 py-3 border border-gray-300 rounded-xl focus:ring-violet-500 focus:border-violet-500"
                    placeholder="Confirm your new password"
                  />
                  <button
                    type="button"
                    className="absolute inset-y-0 right-0 pr-3 flex items-center"
                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  >
                    {showConfirmPassword ?
                      <FiEyeOff className="h-5 w-5 text-gray-400" /> :
                      <FiEye className="h-5 w-5 text-gray-400" />
                    }
                  </button>
                </div>
                <ErrorMessage name="confirmPassword" component="div" className="mt-1 text-sm text-red-600" />
              </div>

              <div className="pt-2">
                <button
                  type="submit"
                  className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500 disabled:opacity-50"
                  disabled={isSubmitting || loading}
                >
                  <FiShield className="mr-2 -ml-1 h-5 w-5" />
                  {isSubmitting ? 'Changing Password...' : 'Change Password'}
                </button>
              </div>
            </Form>
          )}
        </Formik>
      </div>

      {/* Logout from all devices */}
      <div className="bg-white p-6 rounded-xl border border-gray-200 shadow-sm">
        <h3 className="text-md font-medium text-gray-900 mb-4">Sessions</h3>
        <p className="text-gray-600 mb-4">
          Log out from all devices where you're currently signed in.
        </p>
        <button
          type="button"
          className="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500"
          onClick={() => {
            // In a real application, this would call an API endpoint
            console.log('Logging out from all devices...')
            alert('You have been logged out from all devices')
          }}
        >
          <FiLogOut className="mr-2 -ml-1 h-5 w-5" />
          Logout from all devices
        </button>
      </div>

      {/* Account Deactivation */}
      <div className="bg-red-50 p-6 rounded-xl border border-red-200">
        <h3 className="text-md font-medium text-red-800 mb-4">Deactivate Account</h3>
        <p className="text-red-700 mb-4">
          Deactivating your account will hide your profile and data until you log in again.
        </p>

        {deactivateError && (
          <div className="mb-4 bg-red-100 border-l-4 border-red-500 p-4 rounded-md">
            <div className="flex">
              <div className="flex-shrink-0">
                <FiAlertTriangle className="h-5 w-5 text-red-500" />
              </div>
              <div className="ml-3">
                <p className="text-sm text-red-700">{deactivateError}</p>
              </div>
            </div>
          </div>
        )}

        {deactivateConfirmOpen ? (
          <div className="bg-white p-4 rounded-lg border border-red-300 mb-4">
            <p className="text-gray-700 font-medium mb-4">
              Are you sure you want to deactivate your account?
            </p>
            <div className="flex space-x-3">
              <button
                type="button"
                className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                onClick={handleDeactivateAccount}
                disabled={loading}
              >
                Yes, deactivate my account
              </button>
              <button
                type="button"
                className="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500"
                onClick={() => setDeactivateConfirmOpen(false)}
              >
                Cancel
              </button>
            </div>
          </div>
        ) : (
          <button
            type="button"
            className="inline-flex items-center px-4 py-2 border border-red-300 shadow-sm text-sm font-medium rounded-md text-red-700 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
            onClick={() => setDeactivateConfirmOpen(true)}
          >
            <FiAlertTriangle className="mr-2 -ml-1 h-5 w-5" />
            Deactivate Account
          </button>
        )}
      </div>
    </div>
  )
}

export default ProfileAccount

================
File: src/components/profile/ProfileInfo.jsx
================
import { useState } from 'react'
import { Formik, Form, Field, ErrorMessage } from 'formik'
import * as Yup from 'yup'
import { FiUser, FiMail, FiSave, FiUpload, FiCamera } from 'react-icons/fi'

// Form validation schema
const profileSchema = Yup.object().shape({
  name: Yup.string()
    .min(2, 'Name must be at least 2 characters')
    .max(100, 'Name must be less than 100 characters')
    .required('Name is required'),
})

const ProfileInfo = ({ user, loading, onProfileUpdate, onAvatarUpdate }) => {
  const [avatar, setAvatar] = useState(user?.avatar || 'default-avatar.png')
  const [uploading, setUploading] = useState(false)

  // Handle form submission
  const handleSubmit = async (values, { setSubmitting }) => {
    try {
      await onProfileUpdate({
        name: values.name,
      })
    } catch (error) {
      console.error('Error updating profile:', error)
    } finally {
      setSubmitting(false)
    }
  }

  // Handle avatar upload
  const handleAvatarChange = async (e) => {
    const file = e.target.files[0]
    if (!file) return

    try {
      setUploading(true)

      // In a real application, this would upload the file to a server
      // and return a URL. For now, we'll simulate this with a data URL.
      const reader = new FileReader()
      reader.onload = async (event) => {
        const newAvatarUrl = event.target.result

        // Call the API to update the avatar
        await onAvatarUpdate(newAvatarUrl)

        // Update local state
        setAvatar(newAvatarUrl)
        setUploading(false)
      }

      reader.readAsDataURL(file)
    } catch (error) {
      console.error('Error uploading avatar:', error)
      setUploading(false)
    }
  }

  // Format date for display
  const formatDate = (dateString) => {
    if (!dateString) return 'N/A'
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })
  }

  return (
    <div className="space-y-8">
      <div className="flex flex-col md:flex-row items-start md:items-center gap-6">
        {/* Avatar section */}
        <div className="relative">
          <div className="h-24 w-24 rounded-full overflow-hidden bg-gray-200">
            {avatar ? (
              <img
                src={avatar}
                alt="User avatar"
                className="h-full w-full object-cover"
              />
            ) : (
              <div className="h-full w-full flex items-center justify-center bg-violet-100 text-violet-600 text-2xl font-bold">
                {user?.name?.charAt(0) || 'U'}
              </div>
            )}
          </div>

          <label
            htmlFor="avatar-upload"
            className="absolute bottom-0 right-0 bg-violet-600 hover:bg-violet-700 text-white p-2 rounded-full cursor-pointer shadow-sm"
          >
            <FiCamera size={16} />
            <span className="sr-only">Upload new avatar</span>
          </label>

          <input
            id="avatar-upload"
            type="file"
            accept="image/*"
            onChange={handleAvatarChange}
            className="hidden"
            disabled={uploading || loading}
          />

          {uploading && (
            <div className="absolute inset-0 flex items-center justify-center bg-white bg-opacity-75 rounded-full">
              <div className="w-5 h-5 border-2 border-violet-600 border-t-transparent rounded-full animate-spin"></div>
            </div>
          )}
        </div>

        {/* User info */}
        <div>
          <h2 className="text-xl font-semibold">{user?.name}</h2>
          <p className="text-gray-600">{user?.email}</p>
          <div className="mt-2 text-xs text-gray-500">
            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full bg-violet-100 text-violet-800 mr-2">
              {user?.role || 'User'}
            </span>
            <span>Member since {formatDate(user?.createdAt)}</span>
          </div>
        </div>
      </div>

      {/* Profile form */}
      <Formik
        initialValues={{
          name: user?.name || '',
        }}
        validationSchema={profileSchema}
        onSubmit={handleSubmit}
        enableReinitialize
      >
        {({ isSubmitting }) => (
          <Form className="space-y-6 max-w-2xl">
            <div>
              <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">Name</label>
              <div className="relative rounded-md shadow-sm">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FiUser className="h-5 w-5 text-gray-400" />
                </div>
                <Field
                  type="text"
                  name="name"
                  id="name"
                  className="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-xl focus:ring-violet-500 focus:border-violet-500"
                  placeholder="Your full name"
                />
              </div>
              <ErrorMessage name="name" component="div" className="mt-1 text-sm text-red-600" />
            </div>

            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
              <div className="relative rounded-md shadow-sm">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FiMail className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  type="email"
                  name="email"
                  id="email"
                  disabled
                  className="block w-full pl-10 pr-3 py-3 border border-gray-300 bg-gray-50 rounded-xl text-gray-500 cursor-not-allowed"
                  value={user?.email || ''}
                />
              </div>
              <p className="mt-1 text-xs text-gray-500">Email address cannot be changed</p>
            </div>

            <button
              type="submit"
              className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500 disabled:opacity-50"
              disabled={isSubmitting || loading}
            >
              <FiSave className="mr-2 -ml-1 h-5 w-5" />
              {isSubmitting ? 'Saving...' : 'Save Changes'}
            </button>
          </Form>
        )}
      </Formik>
    </div>
  )
}

export default ProfileInfo

================
File: src/components/profile/ProfilePreferences.jsx
================
import { useState, useEffect } from 'react'
import { Formik, Form, Field, ErrorMessage } from 'formik'
import * as Yup from 'yup'
import { FiSave, FiMoon, FiSun, FiMonitor, FiLayout, FiCalendar, FiList, FiFilter, FiGlobe } from 'react-icons/fi'
import { useTheme } from '../../hooks/useTheme'

// Form validation schema
const preferencesSchema = Yup.object().shape({
  theme: Yup.string()
    .oneOf(['light', 'dark', 'system'])
    .required('Theme is required'),
  language: Yup.string()
    .required('Language is required'),
  defaultTaskView: Yup.string()
    .oneOf(['list', 'board', 'calendar'])
    .required('Default task view is required'),
})

const ProfilePreferences = ({ preferences, loading, onPreferencesUpdate }) => {
  const { theme, toggleTheme } = useTheme()
  const [selectedTheme, setSelectedTheme] = useState(preferences?.theme || theme || 'system')
  const [selectedTaskView, setSelectedTaskView] = useState(preferences?.defaultTaskView || 'board')

  // Efeito para sincronizar o tema do contexto com as preferências
  useEffect(() => {
    setSelectedTheme(preferences?.theme || theme)
  }, [preferences, theme])

  // Available options
  const themeOptions = [
    { value: 'light', label: 'Light', icon: <FiSun className="mr-2" /> },
    { value: 'dark', label: 'Dark', icon: <FiMoon className="mr-2" /> },
    { value: 'system', label: 'System Default', icon: <FiMonitor className="mr-2" /> },
  ]

  const languageOptions = [
    { value: 'en-US', label: 'English (US)' },
    { value: 'pt-BR', label: 'Portuguese (Brazil)' },
    { value: 'es-ES', label: 'Spanish' },
    { value: 'fr-FR', label: 'French' },
    { value: 'de-DE', label: 'German' },
  ]

  const taskViewOptions = [
    { value: 'board', label: 'Kanban Board', icon: <FiLayout className="mr-2" /> },
    { value: 'list', label: 'List View', icon: <FiList className="mr-2" /> },
    { value: 'calendar', label: 'Calendar', icon: <FiCalendar className="mr-2" /> },
  ]

  const statusOptions = [
    { value: 'todo', label: 'To Do' },
    { value: 'inProgress', label: 'In Progress' },
    { value: 'inReview', label: 'In Review' },
    { value: 'done', label: 'Done' },
  ]

  const priorityOptions = [
    { value: 'low', label: 'Low' },
    { value: 'medium', label: 'Medium' },
    { value: 'high', label: 'High' },
    { value: 'urgent', label: 'Urgent' },
  ]

  // Handle form submission
  const handleSubmit = async (values, { setSubmitting }) => {
    try {
      // Atualizar preferências no backend
      await onPreferencesUpdate(values)

      // Atualizar o tema na aplicação
      toggleTheme(values.theme)
    } catch (error) {
      console.error('Error updating preferences:', error)
    } finally {
      setSubmitting(false)
    }
  }

  // Handler para mudança imediata de tema (preview)
  const handleThemeChange = (value) => {
    setSelectedTheme(value)
    // Aplicar tema imediatamente para preview, mas sem salvar no backend ainda
    toggleTheme(value)
  }

  return (
    <div className="space-y-8">
      <div>
        <h2 className="text-lg font-medium text-gray-900 mb-4">User Preferences</h2>
        <p className="text-gray-600 mb-6">
          Customize your experience with Weid. These settings will be applied across all your devices.
        </p>
      </div>

      <Formik
        initialValues={{
          theme: preferences?.theme || 'system',
          language: preferences?.language || 'en-US',
          defaultTaskView: preferences?.defaultTaskView || 'board',
          defaultTaskFilter: {
            status: preferences?.defaultTaskFilter?.status || [],
            priority: preferences?.defaultTaskFilter?.priority || [],
          }
        }}
        validationSchema={preferencesSchema}
        onSubmit={handleSubmit}
        enableReinitialize
      >
        {({ isSubmitting, values, setFieldValue }) => (
          <Form className="space-y-8 max-w-3xl">
            {/* Theme Selection */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">Theme</label>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                {themeOptions.map((option) => (
                  <div key={option.value}>
                    <Field name="theme">
                      {({ field }) => (
                        <label
                          className={`
                            flex items-center p-4 border rounded-xl cursor-pointer
                            ${field.value === option.value
                              ? 'border-violet-500 bg-violet-50 text-violet-700'
                              : 'border-gray-200 hover:bg-gray-50'
                            }
                          `}
                        >
                          <input
                            type="radio"
                            {...field}
                            value={option.value}
                            checked={field.value === option.value}
                            className="sr-only"
                            onChange={(e) => {
                              field.onChange(e)
                              handleThemeChange(option.value)
                            }}
                          />
                          {option.icon}
                          <span>{option.label}</span>
                        </label>
                      )}
                    </Field>
                  </div>
                ))}
              </div>
              <ErrorMessage name="theme" component="div" className="mt-1 text-sm text-red-600" />
            </div>

            {/* Language Selection */}
            <div>
              <label htmlFor="language" className="block text-sm font-medium text-gray-700 mb-1">Language</label>
              <div className="relative rounded-md shadow-sm">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FiGlobe className="h-5 w-5 text-gray-400" />
                </div>
                <Field
                  as="select"
                  name="language"
                  id="language"
                  className="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-xl focus:ring-violet-500 focus:border-violet-500"
                >
                  {languageOptions.map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </Field>
              </div>
              <ErrorMessage name="language" component="div" className="mt-1 text-sm text-red-600" />
            </div>

            {/* Default Task View */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">Default Task View</label>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                {taskViewOptions.map((option) => (
                  <div key={option.value}>
                    <Field name="defaultTaskView">
                      {({ field }) => (
                        <label
                          className={`
                            flex items-center p-4 border rounded-xl cursor-pointer
                            ${field.value === option.value
                              ? 'border-violet-500 bg-violet-50 text-violet-700'
                              : 'border-gray-200 hover:bg-gray-50'
                            }
                          `}
                        >
                          <input
                            type="radio"
                            {...field}
                            value={option.value}
                            checked={field.value === option.value}
                            className="sr-only"
                            onChange={(e) => {
                              field.onChange(e)
                              setSelectedTaskView(option.value)
                            }}
                          />
                          {option.icon}
                          <span>{option.label}</span>
                        </label>
                      )}
                    </Field>
                  </div>
                ))}
              </div>
              <ErrorMessage name="defaultTaskView" component="div" className="mt-1 text-sm text-red-600" />
            </div>

            {/* Default Task Filters */}
            <div>
              <div className="flex items-center justify-between mb-3">
                <label className="block text-sm font-medium text-gray-700">Default Task Filters</label>
                <div className="flex items-center text-xs text-gray-500">
                  <FiFilter className="mr-1" />
                  <span>Select filters to apply by default when viewing tasks</span>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 p-4 border border-gray-200 rounded-xl">
                {/* Status Filters */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Status</label>
                  <div className="space-y-2">
                    {statusOptions.map((option) => (
                      <label key={option.value} className="flex items-center">
                        <input
                          type="checkbox"
                          className="h-4 w-4 text-violet-600 rounded border-gray-300 focus:ring-violet-500"
                          checked={values.defaultTaskFilter.status.includes(option.value)}
                          onChange={(e) => {
                            const isChecked = e.target.checked
                            const currentValues = [...values.defaultTaskFilter.status]

                            if (isChecked) {
                              setFieldValue('defaultTaskFilter.status', [...currentValues, option.value])
                            } else {
                              setFieldValue(
                                'defaultTaskFilter.status',
                                currentValues.filter(value => value !== option.value)
                              )
                            }
                          }}
                        />
                        <span className="ml-2 text-sm text-gray-700">{option.label}</span>
                      </label>
                    ))}
                  </div>
                </div>

                {/* Priority Filters */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Priority</label>
                  <div className="space-y-2">
                    {priorityOptions.map((option) => (
                      <label key={option.value} className="flex items-center">
                        <input
                          type="checkbox"
                          className="h-4 w-4 text-violet-600 rounded border-gray-300 focus:ring-violet-500"
                          checked={values.defaultTaskFilter.priority.includes(option.value)}
                          onChange={(e) => {
                            const isChecked = e.target.checked
                            const currentValues = [...values.defaultTaskFilter.priority]

                            if (isChecked) {
                              setFieldValue('defaultTaskFilter.priority', [...currentValues, option.value])
                            } else {
                              setFieldValue(
                                'defaultTaskFilter.priority',
                                currentValues.filter(value => value !== option.value)
                              )
                            }
                          }}
                        />
                        <span className="ml-2 text-sm text-gray-700">{option.label}</span>
                      </label>
                    ))}
                  </div>
                </div>
              </div>
            </div>

            <button
              type="submit"
              className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500 disabled:opacity-50"
              disabled={isSubmitting || loading}
            >
              <FiSave className="mr-2 -ml-1 h-5 w-5" />
              {isSubmitting ? 'Saving...' : 'Save Preferences'}
            </button>
          </Form>
        )}
      </Formik>
    </div>
  )
}

export default ProfilePreferences

================
File: src/components/profile/ProfileStatistics.jsx
================
import { FiCheckSquare, FiClock, FiAlertCircle, FiFile, FiStar, FiMessageSquare, FiCalendar, FiClock as FiClockIcon } from 'react-icons/fi'

const ProfileStatistics = ({ stats, loading }) => {
  // Format date
  const formatDate = (dateString) => {
    if (!dateString) return 'N/A'
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })
  }

  // Calculate membership duration
  const getMembershipDuration = (startDate) => {
    if (!startDate) return 'N/A'

    const start = new Date(startDate)
    const now = new Date()

    const diffInYears = Math.floor((now - start) / (365.25 * 24 * 60 * 60 * 1000))
    const diffInMonths = Math.floor((now - start) / (30.44 * 24 * 60 * 60 * 1000)) % 12

    if (diffInYears > 0) {
      return `${diffInYears} year${diffInYears !== 1 ? 's' : ''} ${diffInMonths > 0 ? `and ${diffInMonths} month${diffInMonths !== 1 ? 's' : ''}` : ''}`
    }

    return `${diffInMonths} month${diffInMonths !== 1 ? 's' : ''}`
  }

  // Create a stat card component
  const StatCard = ({ title, value, icon, color }) => (
    <div className={`bg-white p-6 rounded-xl border border-gray-200 shadow-sm ${color ? `bg-${color}-50` : ''}`}>
      <div className="flex justify-between items-start">
        <div>
          <p className="text-sm font-medium text-gray-600">{title}</p>
          <h3 className="text-2xl font-bold text-gray-900 mt-1">{value}</h3>
        </div>
        <div className="rounded-full p-2 bg-white shadow-sm border border-gray-100">
          {icon}
        </div>
      </div>
    </div>
  )

  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center py-12">
        <div className="w-12 h-12 border-4 border-violet-500 rounded-full border-t-transparent animate-spin mb-4"></div>
        <p className="text-gray-500">Loading statistics...</p>
      </div>
    )
  }

  // If stats aren't available yet
  if (!stats) {
    return (
      <div className="text-center py-12">
        <FiAlertCircle className="h-12 w-12 text-gray-400 mx-auto mb-4" />
        <h3 className="text-lg font-medium text-gray-900 mb-2">Statistics unavailable</h3>
        <p className="text-gray-500 max-w-sm mx-auto">
          We couldn't load your statistics at this time. Please try again later.
        </p>
      </div>
    )
  }

  return (
    <div className="space-y-8">
      <div>
        <h2 className="text-lg font-medium text-gray-900 mb-4">Your Activity Statistics</h2>
        <p className="text-gray-600 mb-6">
          Here's an overview of your activity and usage on the platform.
        </p>
      </div>

      {/* Account Overview */}
      <div>
        <h3 className="text-md font-medium text-gray-700 mb-4">Account Overview</h3>
        <div className="bg-white p-6 rounded-xl border border-gray-200 shadow-sm">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <div className="text-sm text-gray-500 mb-1">Member Since</div>
              <div className="flex items-center">
                <FiCalendar className="h-5 w-5 text-violet-500 mr-2" />
                <span className="text-gray-900">{formatDate(stats.memberSince)}</span>
              </div>
              <div className="text-xs text-gray-500 mt-1">
                {getMembershipDuration(stats.memberSince)}
              </div>
            </div>

            <div>
              <div className="text-sm text-gray-500 mb-1">Last Login</div>
              <div className="flex items-center">
                <FiClockIcon className="h-5 w-5 text-violet-500 mr-2" />
                <span className="text-gray-900">{formatDate(stats.lastLogin)}</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Tasks Statistics */}
      <div>
        <h3 className="text-md font-medium text-gray-700 mb-4">Task Activity</h3>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          <StatCard
            title="Total Tasks"
            value={stats.tasks.total}
            icon={<FiCheckSquare className="h-5 w-5 text-gray-600" />}
          />
          <StatCard
            title="Completed Tasks"
            value={stats.tasks.completed}
            icon={<FiCheckSquare className="h-5 w-5 text-green-600" />}
            color="green"
          />
          <StatCard
            title="In Progress"
            value={stats.tasks.inProgress}
            icon={<FiClock className="h-5 w-5 text-blue-600" />}
            color="blue"
          />
          <StatCard
            title="Overdue Tasks"
            value={stats.tasks.overdue}
            icon={<FiAlertCircle className="h-5 w-5 text-red-600" />}
            color="red"
          />
        </div>
      </div>

      {/* Notes and Comments */}
      <div>
        <h3 className="text-md font-medium text-gray-700 mb-4">Content & Participation</h3>
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
          <StatCard
            title="Total Notes"
            value={stats.notes.total}
            icon={<FiFile className="h-5 w-5 text-violet-600" />}
            color="violet"
          />
          <StatCard
            title="Pinned Notes"
            value={stats.notes.pinned}
            icon={<FiStar className="h-5 w-5 text-amber-600" />}
            color="amber"
          />
          <StatCard
            title="Comments"
            value={stats.comments}
            icon={<FiMessageSquare className="h-5 w-5 text-cyan-600" />}
            color="cyan"
          />
        </div>
      </div>

      {/* Task Completion Rate */}
      {stats.tasks.total > 0 && (
        <div>
          <h3 className="text-md font-medium text-gray-700 mb-4">Completion Rate</h3>
          <div className="bg-white p-6 rounded-xl border border-gray-200 shadow-sm">
            <div className="flex justify-between items-center mb-2">
              <span className="text-sm font-medium text-gray-700">Task Completion</span>
              <span className="text-sm font-medium text-gray-900">
                {Math.round((stats.tasks.completed / stats.tasks.total) * 100)}%
              </span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2.5">
              <div
                className="bg-green-600 h-2.5 rounded-full"
                style={{ width: `${(stats.tasks.completed / stats.tasks.total) * 100}%` }}
              ></div>
            </div>
            <p className="text-xs text-gray-500 mt-2">
              You've completed {stats.tasks.completed} out of {stats.tasks.total} assigned tasks
            </p>
          </div>
        </div>
      )}
    </div>
  )
}

export default ProfileStatistics

================
File: src/components/schedule/CalendarDay.jsx
================
import { useMemo, useRef, useEffect } from 'react'
import { FiClock, FiAlertTriangle, FiChevronRight } from 'react-icons/fi'

const CalendarDay = ({ currentDate, tasks, onTaskClick, onDateClick }) => {
  // Reference to the current hour element for auto-scrolling
  const currentHourRef = useRef(null)

  // Hours for the day
  const hours = useMemo(() => {
    const hoursArray = []
    for (let i = 0; i < 24; i++) {
      hoursArray.push(i)
    }
    return hoursArray
  }, [])

  // Filter tasks for the selected date
  const tasksForDay = useMemo(() => {
    if (!tasks.length) return []

    const selectedDate = new Date(currentDate)
    selectedDate.setHours(0, 0, 0, 0)

    const nextDay = new Date(selectedDate)
    nextDay.setDate(nextDay.getDate() + 1)

    return tasks.filter(task => {
      if (!task.dueDate) return false

      const taskDate = new Date(task.dueDate)
      return taskDate >= selectedDate && taskDate < nextDay
    }).sort((a, b) => {
      // Sort by hour and then by priority
      const dateA = new Date(a.dueDate)
      const dateB = new Date(b.dueDate)

      if (dateA.getHours() !== dateB.getHours()) {
        return dateA.getHours() - dateB.getHours()
      }

      // Priority sorting: urgent > high > medium > low
      const priorityOrder = { urgent: 0, high: 1, medium: 2, low: 3 }
      return priorityOrder[a.priority] - priorityOrder[b.priority]
    })
  }, [currentDate, tasks])

  // Group tasks by hour
  const tasksByHour = useMemo(() => {
    const grouped = {}

    tasksForDay.forEach(task => {
      const taskDate = new Date(task.dueDate)
      const hour = taskDate.getHours()

      if (!grouped[hour]) {
        grouped[hour] = []
      }

      grouped[hour].push(task)
    })

    return grouped
  }, [tasksForDay])

  // Get current hour
  const currentHour = new Date().getHours()

  // Scroll to current hour when component mounts
  useEffect(() => {
    if (currentHourRef.current) {
      setTimeout(() => {
        currentHourRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' })
      }, 300)
    }
  }, [])

  // Check if this is today
  const isToday = useMemo(() => {
    const today = new Date()
    return currentDate.getDate() === today.getDate() &&
      currentDate.getMonth() === today.getMonth() &&
      currentDate.getFullYear() === today.getFullYear()
  }, [currentDate])

  // Format hour for display
  const formatHour = (hour) => {
    return hour === 0 ? '12 AM' :
           hour < 12 ? `${hour} AM` :
           hour === 12 ? '12 PM' :
           `${hour - 12} PM`
  }

  // Check if a task is overdue
  const isOverdue = (task) => {
    if (!task.dueDate || task.status === 'done') return false

    const dueDate = new Date(task.dueDate)
    const now = new Date()

    return dueDate < now
  }

  // Format duration display
  const formatDuration = (hours) => {
    if (!hours) return ''
    return hours === 1 ? '1 hour' : `${hours} hours`
  }

  // Status colors
  const getStatusColor = (status) => {
    switch (status) {
      case 'todo':
        return 'border-gray-300'
      case 'inProgress':
        return 'border-blue-300'
      case 'inReview':
        return 'border-amber-300'
      case 'done':
        return 'border-green-300'
      default:
        return 'border-gray-300'
    }
  }

  return (
    <div className="h-full flex overflow-hidden">
      {/* Time scale on the left */}
      <div className="w-24 border-r border-gray-200 overflow-y-auto">
        {hours.map(hour => (
          <div
            key={hour}
            ref={isToday && hour === currentHour ? currentHourRef : null}
            className={`h-20 px-3 py-2 border-b border-gray-100 flex items-start ${
              isToday && hour === currentHour ? 'bg-violet-50' : ''
            }`}
          >
            <div className="text-sm font-medium text-gray-500">
              {formatHour(hour)}
            </div>
          </div>
        ))}
      </div>

      {/* Main schedule area */}
      <div className="flex-1 overflow-y-auto relative">
        {/* Current time indicator line (only for today) */}
        {isToday && (
          <div
            className="absolute left-0 right-0 border-t-2 border-red-400 z-10"
            style={{
              top: `${currentHour * 80 + (new Date().getMinutes() / 60) * 80}px`
            }}
          >
            <div className="absolute -top-2 -left-1 h-4 w-4 rounded-full bg-red-400"></div>
          </div>
        )}

        {/* Hours and tasks */}
        {hours.map(hour => {
          const hourTasks = tasksByHour[hour] || []

          return (
            <div
              key={hour}
              className={`h-20 border-b border-gray-100 relative ${
                isToday && hour === currentHour ? 'bg-violet-50' : ''
              }`}
              onClick={() => {
                const clickDate = new Date(currentDate)
                clickDate.setHours(hour, 0, 0, 0)
                onDateClick(clickDate)
              }}
            >
              {/* Tasks for this hour */}
              <div className="absolute inset-x-0 top-0 p-2 space-y-2">
                {hourTasks.map(task => (
                  <div
                    key={task._id}
                    className={`px-3 py-2 rounded-lg bg-white shadow-sm border-l-2 ${getStatusColor(task.status)} cursor-pointer`}
                    onClick={(e) => {
                      e.stopPropagation()
                      onTaskClick(task)
                    }}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        {/* Priority indicator */}
                        <span className={`h-3 w-3 rounded-full flex-shrink-0 ${
                          task.priority === 'low' ? 'bg-gray-400' :
                          task.priority === 'medium' ? 'bg-blue-400' :
                          task.priority === 'high' ? 'bg-orange-500' :
                          'bg-red-500'
                        }`}></span>

                        {/* Task title */}
                        <span className={`font-medium ${isOverdue(task) ? 'text-red-600' : 'text-gray-800'}`}>
                          {task.title}
                        </span>
                      </div>

                      <div className="flex items-center space-x-2">
                        {/* Task duration */}
                        {task.estimatedHours && (
                          <span className="text-xs text-gray-500">
                            <FiClock className="inline h-3 w-3 mr-1" />
                            {formatDuration(task.estimatedHours)}
                          </span>
                        )}

                        {/* Overdue indicator */}
                        {isOverdue(task) && (
                          <FiAlertTriangle className="h-4 w-4 text-red-500" />
                        )}

                        <FiChevronRight className="h-4 w-4 text-gray-400" />
                      </div>
                    </div>

                    {/* Task description preview */}
                    {task.description && (
                      <div className="text-xs text-gray-500 mt-1 truncate">
                        {task.description}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )
        })}
      </div>
    </div>
  )
}

export default CalendarDay

================
File: src/components/schedule/CalendarDragDrop.jsx
================
import { useState } from 'react';
import {
  DndContext,
  DragOverlay,
  MouseSensor,
  TouchSensor,
  useSensor,
  useSensors,
} from '@dnd-kit/core';
import { useTasks } from '../../hooks/useTasks';
import { isTaskOverdue, getStatusBorderClass } from '../../utils/calendarUtils';

/**
 * Wrapper component that adds drag and drop functionality to calendar views
 */
const CalendarDragDrop = ({ children, tasks, onTaskMove }) => {
  const { updateTask } = useTasks();
  const [activeTask, setActiveTask] = useState(null);
  const [isDragging, setIsDragging] = useState(false);

  // Configure sensors with activation constraints to avoid accidental drags
  const sensors = useSensors(
    useSensor(MouseSensor, {
      activationConstraint: {
        distance: 8, // Minimum drag distance before activation
      },
    }),
    useSensor(TouchSensor, {
      activationConstraint: {
        delay: 200, // Delay in ms before drag starts
        tolerance: 8, // Tolerance in pixels
      },
    })
  );

  // Handle drag start
  const handleDragStart = (event) => {
    const { active } = event;
    const taskId = active.id;

    // Find the task being dragged
    const task = findTaskById(taskId);
    if (task) {
      setActiveTask(task);
      setIsDragging(true);
    }
  };

  // Handle drag end - update task with new date
  const handleDragEnd = async (event) => {
    const { active, over } = event;

    setIsDragging(false);
    setActiveTask(null);

    // If no valid drop target, do nothing
    if (!over || !active) return;

    // Check if we're dropping on a date cell
    if (over.data?.current?.type === 'dateCell' && active.data?.current?.type === 'task') {
      const taskId = active.id;
      const targetDate = over.data.current.date;

      if (!targetDate) return;

      // If task has a time component, preserve it
      let newDueDate;
      const task = findTaskById(taskId);

      if (task && task.dueDate) {
        const oldDate = new Date(task.dueDate);
        newDueDate = new Date(targetDate);
        // Preserve time from original due date
        newDueDate.setHours(
          oldDate.getHours(),
          oldDate.getMinutes(),
          oldDate.getSeconds(),
          oldDate.getMilliseconds()
        );
      } else {
        newDueDate = new Date(targetDate);
        // Default to 9 AM if no previous time
        newDueDate.setHours(9, 0, 0, 0);
      }

      // Update the task with the new due date
      try {
        await updateTask(taskId, { dueDate: newDueDate.toISOString() });

        // Notify parent component
        if (onTaskMove) {
          onTaskMove(taskId, newDueDate);
        }
      } catch (error) {
        console.error('Failed to update task due date:', error);
      }
    }
  };

  // Helper function to find task by ID
  const findTaskById = (taskId) => {
    if (!tasks || !tasks.length) return null;
    return tasks.find(task => task._id === taskId);
  };

  return (
    <DndContext
      sensors={sensors}
      onDragStart={handleDragStart}
      onDragEnd={handleDragEnd}
    >
      {children}

      {/* Overlay that shows the task being dragged */}
      <DragOverlay>
        {isDragging && activeTask && (
          <div className="opacity-80 w-48">
            <div className={`px-2 py-1 rounded-lg text-xs bg-white shadow-md border-l-2 ${getStatusBorderClass(activeTask.status)}`}>
              <div className="flex items-center">
                {/* Priority dot */}
                <span className={`h-2 w-2 rounded-full ${
                  activeTask.priority === 'low' ? 'bg-gray-400' :
                  activeTask.priority === 'medium' ? 'bg-blue-400' :
                  activeTask.priority === 'high' ? 'bg-orange-500' :
                  'bg-red-500'
                } mr-1`}></span>

                {/* Title */}
                <span className={`truncate ${isTaskOverdue(activeTask) ? 'text-red-600' : ''}`}>
                  {activeTask.title}
                </span>
              </div>
            </div>
          </div>
        )}
      </DragOverlay>
    </DndContext>
  );
};

export default CalendarDragDrop;

================
File: src/components/schedule/CalendarMonth.jsx
================
import { useMemo } from 'react'
import { FiClock, FiAlertTriangle } from 'react-icons/fi'

const CalendarMonth = ({ currentDate, tasks, onTaskClick, onDateClick }) => {
  // Generate array of days for current month view
  const calendarDays = useMemo(() => {
    const days = []
    const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1)

    // Find the first day of the week containing the first day of the month
    const firstDay = date.getDay()
    date.setDate(date.getDate() - firstDay)

    // Create 6 weeks (42 days) to ensure we have enough rows
    for (let i = 0; i < 42; i++) {
      const clonedDate = new Date(date)
      days.push(clonedDate)
      date.setDate(date.getDate() + 1)
    }

    return days
  }, [currentDate])

  // Group tasks by date for easier rendering
  const tasksByDate = useMemo(() => {
    const grouped = {}

    tasks.forEach(task => {
      if (!task.dueDate) return

      const dueDate = new Date(task.dueDate)
      const dateKey = dueDate.toISOString().split('T')[0] // YYYY-MM-DD format

      if (!grouped[dateKey]) {
        grouped[dateKey] = []
      }

      grouped[dateKey].push(task)
    })

    return grouped
  }, [tasks])

  // Check if a date is today
  const isToday = (date) => {
    const today = new Date()
    return date.getDate() === today.getDate() &&
      date.getMonth() === today.getMonth() &&
      date.getFullYear() === today.getFullYear()
  }

  // Check if a date is in the current month
  const isCurrentMonth = (date) => {
    return date.getMonth() === currentDate.getMonth()
  }

  // Format date in a way that can be used as a key in the tasksByDate object
  const formatDateKey = (date) => {
    return date.toISOString().split('T')[0]
  }

  // Determine color by priority
  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'low':
        return 'bg-gray-100 text-gray-800'
      case 'medium':
        return 'bg-blue-100 text-blue-800'
      case 'high':
        return 'bg-orange-100 text-orange-800'
      case 'urgent':
        return 'bg-red-100 text-red-800'
      default:
        return 'bg-gray-100 text-gray-800'
    }
  }

  // Determine color by status
  const getStatusColor = (status) => {
    switch (status) {
      case 'todo':
        return 'border-gray-300'
      case 'inProgress':
        return 'border-blue-300'
      case 'inReview':
        return 'border-amber-300'
      case 'done':
        return 'border-green-300'
      default:
        return 'border-gray-300'
    }
  }

  // Check if a task is overdue
  const isOverdue = (task) => {
    if (!task.dueDate || task.status === 'done') return false

    const dueDate = new Date(task.dueDate)
    dueDate.setHours(23, 59, 59, 999) // End of day

    return dueDate < new Date()
  }

  return (
    <div className="h-full flex flex-col">
      {/* Weekday headers */}
      <div className="grid grid-cols-7 border-b border-gray-200">
        {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day, index) => (
          <div key={day} className="py-2 px-3 text-center text-sm font-medium text-gray-500">
            {day}
          </div>
        ))}
      </div>

      {/* Calendar grid */}
      <div className="flex-1 grid grid-cols-7 grid-rows-6 divide-x divide-y divide-gray-200">
        {calendarDays.map((date, index) => {
          const dateKey = formatDateKey(date)
          const dayTasks = tasksByDate[dateKey] || []
          const isCurrentMonthDay = isCurrentMonth(date)

          return (
            <div
              key={index}
              className={`min-h-[100px] p-2 ${isCurrentMonthDay ? 'bg-white' : 'bg-gray-50'}`}
              onClick={() => onDateClick(new Date(date))}
            >
              {/* Date number with today indicator */}
              <div className="flex justify-between items-center">
                <div
                  className={`text-sm font-medium mb-1 w-7 h-7 rounded-full flex items-center justify-center
                    ${isToday(date)
                      ? 'bg-violet-600 text-white'
                      : isCurrentMonthDay ? 'text-gray-900' : 'text-gray-400'
                    }`}
                >
                  {date.getDate()}
                </div>

                {/* Visual indicator for days with 3+ tasks */}
                {dayTasks.length >= 3 && (
                  <div className="text-xs text-gray-500 font-medium">
                    {dayTasks.length} tasks
                  </div>
                )}
              </div>

              {/* Task list for this day - showing up to 2 tasks and a "+X more" indicator */}
              <div className="mt-1 space-y-1">
                {dayTasks.slice(0, 2).map(task => (
                  <div
                    key={task._id}
                    className={`px-2 py-1 rounded-lg text-xs truncate cursor-pointer border-l-2 ${getStatusColor(task.status)}`}
                    onClick={(e) => {
                      e.stopPropagation()
                      onTaskClick(task)
                    }}
                  >
                    <div className="flex items-center">
                      {/* Priority dot */}
                      <span className={`h-2 w-2 rounded-full ${
                        task.priority === 'low' ? 'bg-gray-400' :
                        task.priority === 'medium' ? 'bg-blue-400' :
                        task.priority === 'high' ? 'bg-orange-500' :
                        'bg-red-500'
                      } mr-1`}></span>

                      {/* Title with overdue indicator */}
                      <div className="flex-1 truncate flex items-center">
                        {isOverdue(task) && (
                          <FiAlertTriangle className="text-red-500 mr-1 h-3 w-3 flex-shrink-0" />
                        )}
                        <span className={`truncate ${isOverdue(task) ? 'text-red-600' : ''}`}>
                          {task.title}
                        </span>
                      </div>
                    </div>
                  </div>
                ))}

                {/* "More" indicator */}
                {dayTasks.length > 2 && (
                  <div
                    className="px-2 py-1 text-xs text-center text-gray-500 bg-gray-50 rounded cursor-pointer hover:bg-gray-100"
                    onClick={(e) => {
                      e.stopPropagation()
                      // Handle "more" click - could show a popover or modal with all tasks
                    }}
                  >
                    + {dayTasks.length - 2} more
                  </div>
                )}
              </div>
            </div>
          )
        })}
      </div>
    </div>
  )
}

export default CalendarMonth

================
File: src/components/schedule/CalendarWeek.jsx
================
import { useMemo } from 'react'
import { FiClock, FiAlertTriangle } from 'react-icons/fi'

const CalendarWeek = ({ currentDate, tasks, onTaskClick, onDateClick }) => {
  // Generate days for the week
  const weekDays = useMemo(() => {
    const days = []
    const date = new Date(currentDate)

    // Find first day of the week (Sunday)
    const dayOfWeek = date.getDay()
    date.setDate(date.getDate() - dayOfWeek)

    // Create 7 days for the week
    for (let i = 0; i < 7; i++) {
      const clonedDate = new Date(date)
      days.push(clonedDate)
      date.setDate(date.getDate() + 1)
    }

    return days
  }, [currentDate])

  // Calculate hours for the day
  const hours = useMemo(() => {
    const hoursArray = []
    for (let i = 0; i < 24; i++) {
      hoursArray.push(i)
    }
    return hoursArray
  }, [])

  // Group tasks by date and hour
  const tasksByDateTime = useMemo(() => {
    const grouped = {}

    tasks.forEach(task => {
      if (!task.dueDate) return

      const dueDate = new Date(task.dueDate)
      const dateKey = dueDate.toISOString().split('T')[0] // YYYY-MM-DD
      const hour = dueDate.getHours()

      if (!grouped[dateKey]) {
        grouped[dateKey] = {}
      }

      if (!grouped[dateKey][hour]) {
        grouped[dateKey][hour] = []
      }

      grouped[dateKey][hour].push(task)
    })

    return grouped
  }, [tasks])

  // Check if a date is today
  const isToday = (date) => {
    const today = new Date()
    return date.getDate() === today.getDate() &&
      date.getMonth() === today.getMonth() &&
      date.getFullYear() === today.getFullYear()
  }

  // Format date key for tasksByDateTime
  const formatDateKey = (date) => {
    return date.toISOString().split('T')[0]
  }

  // Get tasks for a specific date and hour
  const getTasksForHour = (date, hour) => {
    const dateKey = formatDateKey(date)
    return (tasksByDateTime[dateKey] && tasksByDateTime[dateKey][hour]) || []
  }

  // Get all tasks for a specific date
  const getTasksForDate = (date) => {
    const dateKey = formatDateKey(date)
    if (!tasksByDateTime[dateKey]) return []

    const allTasks = []
    for (const hour in tasksByDateTime[dateKey]) {
      allTasks.push(...tasksByDateTime[dateKey][hour])
    }

    return allTasks
  }

  // Check if a task is overdue
  const isOverdue = (task) => {
    if (!task.dueDate || task.status === 'done') return false

    const dueDate = new Date(task.dueDate)
    dueDate.setHours(23, 59, 59, 999) // End of day

    return dueDate < new Date()
  }

  // Format hour for display
  const formatHour = (hour) => {
    return hour === 0 ? '12 AM' :
           hour < 12 ? `${hour} AM` :
           hour === 12 ? '12 PM' :
           `${hour - 12} PM`
  }

  // Determine status border color
  const getStatusColor = (status) => {
    switch (status) {
      case 'todo':
        return 'border-gray-300'
      case 'inProgress':
        return 'border-blue-300'
      case 'inReview':
        return 'border-amber-300'
      case 'done':
        return 'border-green-300'
      default:
        return 'border-gray-300'
    }
  }

  // Determine task status icon
  const getStatusIcon = (task) => {
    if (isOverdue(task)) {
      return <FiAlertTriangle className="text-red-500 h-3 w-3" />
    }
    if (task.status === 'inProgress' || task.status === 'inReview') {
      return <FiClock className="text-amber-500 h-3 w-3" />
    }
    return null
  }

  return (
    <div className="h-full flex flex-col overflow-hidden">
      {/* Week header with days */}
      <div className="grid grid-cols-8 border-b border-gray-200">
        {/* Empty cell for hours column */}
        <div className="w-16 px-2 border-r border-gray-200"></div>

        {/* Day columns */}
        {weekDays.map((day, index) => (
          <div
            key={index}
            className={`py-2 flex-1 text-center ${isToday(day) ? 'bg-violet-50' : ''}`}
          >
            <div className="text-sm font-medium">
              {day.toLocaleDateString('en-US', { weekday: 'short' })}
            </div>
            <div
              className={`text-2xl font-semibold mt-1 ${isToday(day) ? 'text-violet-600' : 'text-gray-900'}`}
            >
              {day.getDate()}
            </div>
            <div className="text-xs text-gray-500">
              {day.toLocaleDateString('en-US', { month: 'short' })}
            </div>
          </div>
        ))}
      </div>

      {/* Calendar body */}
      <div className="flex-1 overflow-y-auto">
        <div className="grid grid-cols-8 divide-x divide-gray-200">
          {/* Hours column */}
          <div className="w-16 divide-y divide-gray-200 border-r border-gray-200">
            {hours.map(hour => (
              <div key={hour} className="h-16 px-2 py-1">
                <div className="text-xs text-gray-500 text-right -mt-2">
                  {formatHour(hour)}
                </div>
              </div>
            ))}
          </div>

          {/* Day columns with hour cells */}
          {weekDays.map((day, dayIndex) => (
            <div key={dayIndex} className="flex-1 divide-y divide-gray-200">
              {hours.map(hour => {
                const tasksForHour = getTasksForHour(day, hour)
                const hourDate = new Date(day.setHours(hour, 0, 0, 0))

                return (
                  <div
                    key={hour}
                    className={`h-16 relative p-0.5 ${isToday(day) ? 'bg-violet-50' : ''}`}
                    onClick={() => {
                      const clickedDate = new Date(day)
                      clickedDate.setHours(hour)
                      onDateClick(clickedDate)
                    }}
                  >
                    {/* Tasks */}
                    <div className="absolute inset-0 overflow-y-auto p-0.5">
                      {tasksForHour.map((task, taskIndex) => (
                        <div
                          key={task._id}
                          className={`mb-1 px-1.5 py-0.5 rounded text-xs truncate bg-white border-l-2 cursor-pointer ${getStatusColor(task.status)}`}
                          onClick={(e) => {
                            e.stopPropagation()
                            onTaskClick(task)
                          }}
                        >
                          <div className="flex items-center">
                            {/* Priority dot */}
                            <span className={`h-2 w-2 rounded-full ${
                              task.priority === 'low' ? 'bg-gray-400' :
                              task.priority === 'medium' ? 'bg-blue-400' :
                              task.priority === 'high' ? 'bg-orange-500' :
                              'bg-red-500'
                            } mr-1`}></span>

                            {/* Status icon */}
                            {getStatusIcon(task) && (
                              <span className="mr-1">{getStatusIcon(task)}</span>
                            )}

                            {/* Title */}
                            <span className={`truncate ${isOverdue(task) ? 'text-red-600' : ''}`}>
                              {task.title}
                            </span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )
              })}
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}

export default CalendarWeek

================
File: src/components/schedule/EventModal.jsx
================
import { useState, useEffect } from 'react'
import { createPortal } from 'react-dom'
import { Link, useNavigate } from 'react-router-dom'
import {
  FiX,
  FiEdit2,
  FiTrash2,
  FiCalendar,
  FiClock,
  FiCheckCircle,
  FiAlertTriangle,
  FiTag,
  FiUser,
  FiMessageSquare
} from 'react-icons/fi'
import { useTasks } from '../../hooks/useTasks'

const EventModal = ({ isOpen, onClose, task, isCreating, selectedDate }) => {
  const { updateTask, deleteTask } = useTasks()
  const navigate = useNavigate()
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)

  // If creating, prepare initial form with the selected date
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    status: 'todo',
    priority: 'medium',
    dueDate: selectedDate ? formatDateForInput(selectedDate) : '',
    dueTime: selectedDate ? formatTimeForInput(selectedDate) : '',
    estimatedHours: '',
  })

  // Populate form data if editing a task
  useEffect(() => {
    if (task) {
      const taskDate = task.dueDate ? new Date(task.dueDate) : null

      setFormData({
        title: task.title || '',
        description: task.description || '',
        status: task.status || 'todo',
        priority: task.priority || 'medium',
        dueDate: taskDate ? formatDateForInput(taskDate) : '',
        dueTime: taskDate ? formatTimeForInput(taskDate) : '',
        estimatedHours: task.estimatedHours || '',
      })
    } else if (selectedDate) {
      setFormData(prev => ({
        ...prev,
        dueDate: formatDateForInput(selectedDate),
        dueTime: formatTimeForInput(selectedDate)
      }))
    }
  }, [task, selectedDate])

  // Format date for input field (YYYY-MM-DD)
  function formatDateForInput(date) {
    const d = new Date(date)
    const year = d.getFullYear()
    const month = String(d.getMonth() + 1).padStart(2, '0')
    const day = String(d.getDate()).padStart(2, '0')
    return `${year}-${month}-${day}`
  }

  // Format time for input field (HH:MM)
  function formatTimeForInput(date) {
    const d = new Date(date)
    const hours = String(d.getHours()).padStart(2, '0')
    const minutes = String(d.getMinutes()).padStart(2, '0')
    return `${hours}:${minutes}`
  }

  // Format date for display
  function formatDate(dateString) {
    if (!dateString) return 'No due date'
    const date = new Date(dateString)
    return date.toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })
  }

  // Format time for display
  function formatTime(dateString) {
    if (!dateString) return ''
    const date = new Date(dateString)
    return date.toLocaleTimeString('en-US', {
      hour: 'numeric',
      minute: '2-digit'
    })
  }

  // Check if task is overdue
  function isOverdue(task) {
    if (!task?.dueDate || task.status === 'done') return false

    const dueDate = new Date(task.dueDate)
    const now = new Date()

    return dueDate < now
  }

  // Status labels map
  const statusLabels = {
    'todo': 'To Do',
    'inProgress': 'In Progress',
    'inReview': 'In Review',
    'done': 'Done'
  }

  // Status colors map
  const statusColors = {
    'todo': 'bg-gray-100 text-gray-800',
    'inProgress': 'bg-blue-100 text-blue-800',
    'inReview': 'bg-amber-100 text-amber-800',
    'done': 'bg-green-100 text-green-800'
  }

  // Priority colors map
  const priorityColors = {
    'low': 'bg-gray-100 text-gray-800',
    'medium': 'bg-blue-100 text-blue-800',
    'high': 'bg-orange-100 text-orange-800',
    'urgent': 'bg-red-100 text-red-800'
  }

  // Handle form input changes
  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
  }

  // Handle creating or navigating to task edit page
  const handleCreate = () => {
    if (isCreating) {
      // Combine date and time for the dueDate
      const dateTime = combineDateTime(formData.dueDate, formData.dueTime)

      // Create the URL with parameters
      const searchParams = new URLSearchParams()
      searchParams.append('status', formData.status)
      if (dateTime) {
        searchParams.append('dueDate', dateTime.toISOString())
      }

      // Navigate to task creation page with pre-filled values
      navigate(`/tasks/new?${searchParams.toString()}`)
    } else if (task) {
      // Navigate to task edit page
      navigate(`/tasks/${task._id}/edit`)
    }

    onClose()
  }

  // Handle task deletion
  const handleDelete = async () => {
    if (!task) return

    if (window.confirm('Are you sure you want to delete this task?')) {
      try {
        setLoading(true)
        setError(null)
        await deleteTask(task._id)
        onClose()
      } catch (err) {
        setError('Failed to delete task. Please try again.')
        console.error(err)
      } finally {
        setLoading(false)
      }
    }
  }

  // Combine date and time into a single Date object
  function combineDateTime(dateStr, timeStr) {
    if (!dateStr) return null

    const date = new Date(dateStr)

    if (timeStr) {
      const [hours, minutes] = timeStr.split(':').map(Number)
      date.setHours(hours, minutes, 0, 0)
    } else {
      date.setHours(0, 0, 0, 0)
    }

    return date
  }

  // Navigate to task detail page
  const viewTaskDetails = () => {
    if (task) {
      navigate(`/tasks/${task._id}`)
      onClose()
    }
  }

  if (!isOpen) return null

  return createPortal(
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex items-center justify-center min-h-screen px-4 text-center sm:block sm:p-0">
        {/* Background overlay */}
        <div
          className="fixed inset-0 transition-opacity"
          aria-hidden="true"
          onClick={onClose}
        >
          <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
        </div>

        {/* Modal panel */}
        <div
          className="inline-block align-bottom bg-white rounded-xl text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full"
        >
          {/* Header */}
          <div className="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
            <h3 className="text-lg font-semibold text-gray-900">
              {isCreating ? 'Create New Task' : 'Task Details'}
            </h3>
            <button
              type="button"
              className="text-gray-400 hover:text-gray-500"
              onClick={onClose}
            >
              <span className="sr-only">Close</span>
              <FiX className="h-6 w-6" />
            </button>
          </div>

          {/* Modal content */}
          <div className="px-6 py-4">
            {isCreating ? (
              /* Create Task Form Preview */
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Title
                  </label>
                  <input
                    type="text"
                    name="title"
                    value={formData.title}
                    onChange={handleChange}
                    placeholder="Task title"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500"
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Date
                    </label>
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <FiCalendar className="h-5 w-5 text-gray-400" />
                      </div>
                      <input
                        type="date"
                        name="dueDate"
                        value={formData.dueDate}
                        onChange={handleChange}
                        className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500"
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Time
                    </label>
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <FiClock className="h-5 w-5 text-gray-400" />
                      </div>
                      <input
                        type="time"
                        name="dueTime"
                        value={formData.dueTime}
                        onChange={handleChange}
                        className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500"
                      />
                    </div>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Status
                    </label>
                    <select
                      name="status"
                      value={formData.status}
                      onChange={handleChange}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500"
                    >
                      <option value="todo">To Do</option>
                      <option value="inProgress">In Progress</option>
                      <option value="inReview">In Review</option>
                      <option value="done">Done</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Priority
                    </label>
                    <select
                      name="priority"
                      value={formData.priority}
                      onChange={handleChange}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500"
                    >
                      <option value="low">Low</option>
                      <option value="medium">Medium</option>
                      <option value="high">High</option>
                      <option value="urgent">Urgent</option>
                    </select>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Estimated Hours
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <FiClock className="h-5 w-5 text-gray-400" />
                    </div>
                    <input
                      type="number"
                      name="estimatedHours"
                      value={formData.estimatedHours}
                      onChange={handleChange}
                      min="0"
                      step="0.5"
                      placeholder="0"
                      className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Description
                  </label>
                  <textarea
                    name="description"
                    value={formData.description}
                    onChange={handleChange}
                    rows="3"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500"
                    placeholder="Add description..."
                  ></textarea>
                </div>
              </div>
            ) : (
              /* View Task Details */
              <div className="space-y-4">
                {error && (
                  <div className="bg-red-50 border-l-4 border-red-500 p-4 rounded-md">
                    <div className="flex">
                      <div className="flex-shrink-0">
                        <FiAlertTriangle className="h-5 w-5 text-red-500" />
                      </div>
                      <div className="ml-3">
                        <p className="text-sm text-red-700">{error}</p>
                      </div>
                    </div>
                  </div>
                )}

                <div>
                  {/* Title with status badge */}
                  <div className="flex flex-wrap items-center gap-2 mb-2">
                    <h2 className="text-xl font-semibold text-gray-900">
                      {task?.title}
                    </h2>

                    {task?.status && (
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${statusColors[task.status]}`}>
                        {statusLabels[task.status]}
                      </span>
                    )}

                    {task?.priority && (
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${priorityColors[task.priority]}`}>
                        {task.priority}
                      </span>
                    )}

                    {isOverdue(task) && (
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                        <FiAlertTriangle className="mr-1 h-3 w-3" />
                        Overdue
                      </span>
                    )}
                  </div>

                  {/* Task description */}
                  {task?.description ? (
                    <p className="text-gray-700 whitespace-pre-line mt-2">
                      {task.description}
                    </p>
                  ) : (
                    <p className="text-gray-500 italic mt-2">
                      No description provided
                    </p>
                  )}
                </div>

                {/* Task meta information */}
                <div className="bg-gray-50 p-4 rounded-lg space-y-3">
                  {/* Due date */}
                  {task?.dueDate && (
                    <div className="flex items-center">
                      <FiCalendar className="h-5 w-5 text-gray-400 mr-2" />
                      <div>
                        <div className="text-sm font-medium text-gray-700">
                          Due Date
                        </div>
                        <div className={`text-sm ${isOverdue(task) ? 'text-red-600 font-medium' : 'text-gray-900'}`}>
                          {formatDate(task.dueDate)} at {formatTime(task.dueDate)}
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Estimated hours */}
                  {task?.estimatedHours && (
                    <div className="flex items-center">
                      <FiClock className="h-5 w-5 text-gray-400 mr-2" />
                      <div>
                        <div className="text-sm font-medium text-gray-700">
                          Estimated Time
                        </div>
                        <div className="text-sm text-gray-900">
                          {task.estimatedHours} hours
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Assignees */}
                  {task?.assignees && task.assignees.length > 0 && (
                    <div className="flex items-center">
                      <FiUser className="h-5 w-5 text-gray-400 mr-2" />
                      <div>
                        <div className="text-sm font-medium text-gray-700">
                          Assigned to
                        </div>
                        <div className="text-sm text-gray-900">
                          {task.assignees.map(assignee => assignee.name).join(', ')}
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Tags */}
                  {task?.tags && task.tags.length > 0 && (
                    <div className="flex items-start">
                      <FiTag className="h-5 w-5 text-gray-400 mr-2 mt-0.5" />
                      <div>
                        <div className="text-sm font-medium text-gray-700">
                          Tags
                        </div>
                        <div className="flex flex-wrap gap-1 mt-1">
                          {task.tags.map((tag, index) => (
                            <span
                              key={index}
                              className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800"
                            >
                              {tag}
                            </span>
                          ))}
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Comments count */}
                  {task?.comments && task.comments.length > 0 && (
                    <div className="flex items-center">
                      <FiMessageSquare className="h-5 w-5 text-gray-400 mr-2" />
                      <div>
                        <div className="text-sm font-medium text-gray-700">
                          Comments
                        </div>
                        <div className="text-sm text-gray-900">
                          {task.comments.length} comment{task.comments.length !== 1 ? 's' : ''}
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>

          {/* Modal footer with actions */}
          <div className="px-6 py-4 border-t border-gray-200 flex justify-between">
            {!isCreating && task && (
              <button
                type="button"
                onClick={handleDelete}
                className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                disabled={loading}
              >
                <FiTrash2 className="mr-2 h-4 w-4" />
                Delete
              </button>
            )}

            <div className="flex gap-3 ml-auto">
              <button
                type="button"
                onClick={onClose}
                className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500"
              >
                Cancel
              </button>

              {!isCreating && task && (
                <button
                  type="button"
                  onClick={viewTaskDetails}
                  className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500"
                >
                  View Details
                </button>
              )}

              <button
                type="button"
                onClick={handleCreate}
                className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500"
                disabled={loading}
              >
                <FiEdit2 className="mr-2 h-4 w-4" />
                {isCreating ? 'Continue Creating' : 'Edit Task'}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>,
    document.body
  )
}

export default EventModal

================
File: src/components/schedule/ScheduleList.jsx
================
import { useMemo } from 'react'
import {
  FiClock,
  FiAlertTriangle,
  FiCalendar,
  FiCheckCircle,
  FiClock as FiClockIcon,
  FiChevronRight
} from 'react-icons/fi'
import { getDateStatus, isTaskOverdue } from '../../utils/calenderUtils'

const ScheduleList = ({ currentDate, tasks, onTaskClick }) => {
  // Group tasks by due date
  const tasksByDate = useMemo(() => {
    if (!tasks.length) return []

    // Sort tasks by due date
    const sortedTasks = [...tasks].sort((a, b) => {
      if (!a.dueDate) return 1 // No due date goes to the end
      if (!b.dueDate) return -1

      return new Date(a.dueDate) - new Date(b.dueDate)
    })

    // Group by date
    const grouped = {}

    sortedTasks.forEach(task => {
      if (!task.dueDate) return

      const date = new Date(task.dueDate)
      date.setHours(0, 0, 0, 0)
      const dateKey = date.toISOString()

      if (!grouped[dateKey]) {
        grouped[dateKey] = []
      }

      grouped[dateKey].push(task)
    })

    // Convert to array format for rendering
    return Object.entries(grouped).map(([dateKey, dateTasks]) => ({
      date: new Date(dateKey),
      tasks: dateTasks
    }))
  }, [tasks])

  // Format date for display
  const formatDate = (date) => {
    return date.toLocaleDateString('en-US', {
      weekday: 'long',
      month: 'long',
      day: 'numeric',
      year: 'numeric'
    })
  }

  // Format time for display
  const formatTime = (date) => {
    return date.toLocaleTimeString('en-US', {
      hour: 'numeric',
      minute: '2-digit'
    })
  }

  // Format duration display
  const formatDuration = (hours) => {
    if (!hours) return ''
    return hours === 1 ? '1 hour' : `${hours} hours`
  }

  // Status colors
  const getStatusColor = (status) => {
    switch (status) {
      case 'todo':
        return 'border-gray-300'
      case 'inProgress':
        return 'border-blue-300'
      case 'inReview':
        return 'border-amber-300'
      case 'done':
        return 'border-green-300'
      default:
        return 'border-gray-300'
    }
  }

  // Status labels
  const getStatusLabel = (status) => {
    switch (status) {
      case 'todo':
        return 'To Do'
      case 'inProgress':
        return 'In Progress'
      case 'inReview':
        return 'In Review'
      case 'done':
        return 'Done'
      default:
        return status
    }
  }

  return (
    <div className="h-full overflow-y-auto p-6">
      {tasksByDate.length === 0 ? (
        <div className="text-center py-12">
          <div className="h-24 w-24 mx-auto mb-4 text-gray-400">
            <FiCalendar className="h-full w-full" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">No upcoming tasks</h3>
          <p className="text-gray-500 mb-6">
            You don't have any scheduled tasks coming up.
          </p>
        </div>
      ) : (
        <div className="space-y-8">
          {tasksByDate.map(({ date, tasks }) => {
            const dateStatus = getDateStatus(date)

            return (
              <div key={date.toISOString()}>
                {/* Date header */}
                <div className="flex items-center mb-4">
                  <div className="flex items-center">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${dateStatus.class} mr-2`}>
                      {dateStatus.label}
                    </span>
                    <h2 className="text-lg font-medium text-gray-900">
                      {formatDate(date)}
                    </h2>
                  </div>
                  <div className="ml-auto text-sm text-gray-500">
                    {tasks.length} tasks
                  </div>
                </div>

                {/* Task list */}
                <div className="space-y-3">
                  {tasks.map(task => (
                    <div
                      key={task._id}
                      className="bg-white rounded-lg border border-gray-200 shadow-sm hover:shadow-md transition-shadow cursor-pointer"
                      onClick={() => onTaskClick(task)}
                    >
                      <div className="p-4">
                        <div className="flex justify-between items-start gap-3">
                          {/* Status indicator */}
                          <div className="flex-shrink-0 mt-1">
                            {task.status === 'done' ? (
                              <FiCheckCircle className="h-5 w-5 text-green-500" />
                            ) : isTaskOverdue(task) ? (
                              <FiAlertTriangle className="h-5 w-5 text-red-500" />
                            ) : (
                              <FiClockIcon className="h-5 w-5 text-blue-500" />
                            )}
                          </div>

                          {/* Task details */}
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center gap-2">
                              <h3 className={`text-lg font-medium ${isTaskOverdue(task) && task.status !== 'done' ? 'text-red-600' : 'text-gray-900'}`}>
                                {task.title}
                              </h3>

                              {/* Status badge */}
                              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                task.status === 'todo' ? 'bg-gray-100 text-gray-800' :
                                task.status === 'inProgress' ? 'bg-blue-100 text-blue-800' :
                                task.status === 'inReview' ? 'bg-amber-100 text-amber-800' :
                                'bg-green-100 text-green-800'
                              }`}>
                                {getStatusLabel(task.status)}
                              </span>

                              {/* Priority badge */}
                              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                task.priority === 'low' ? 'bg-gray-100 text-gray-800' :
                                task.priority === 'medium' ? 'bg-blue-100 text-blue-800' :
                                task.priority === 'high' ? 'bg-orange-100 text-orange-800' :
                                'bg-red-100 text-red-800'
                              }`}>
                                {task.priority}
                              </span>
                            </div>

                            {/* Task description */}
                            {task.description && (
                              <p className="mt-1 text-sm text-gray-500 line-clamp-2">
                                {task.description}
                              </p>
                            )}

                            {/* Task meta information */}
                            <div className="mt-2 flex items-center flex-wrap gap-x-4 gap-y-2 text-sm text-gray-500">
                              {/* Due time */}
                              <div className="flex items-center">
                                <FiClock className="mr-1 h-4 w-4" />
                                <span>{formatTime(new Date(task.dueDate))}</span>
                              </div>

                              {/* Estimated hours */}
                              {task.estimatedHours && (
                                <div className="flex items-center">
                                  <FiClockIcon className="mr-1 h-4 w-4" />
                                  <span>{formatDuration(task.estimatedHours)}</span>
                                </div>
                              )}

                              {/* Tags */}
                              {task.tags && task.tags.length > 0 && (
                                <div className="flex items-center gap-1">
                                  {task.tags.slice(0, 2).map((tag, index) => (
                                    <span key={index} className="inline-flex items-center px-2 py-0.5 rounded-full text-xs bg-gray-100 text-gray-800">
                                      {tag}
                                    </span>
                                  ))}
                                  {task.tags.length > 2 && (
                                    <span className="text-xs text-gray-500">
                                      +{task.tags.length - 2} more
                                    </span>
                                  )}
                                </div>
                              )}
                            </div>
                          </div>

                          {/* Arrow indicator */}
                          <div className="flex-shrink-0 self-center ml-2">
                            <FiChevronRight className="h-5 w-5 text-gray-400" />
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )
          })}
        </div>
      )}
    </div>
  )
}

export default ScheduleList

================
File: src/components/tasks/CommentForm.jsx
================
import { useState } from 'react'
import { FiPaperclip, FiX, FiSend } from 'react-icons/fi'
import commentService from '../../services/commentService'

const CommentForm = ({ taskId, initialValue = '', commentId, parentComment, onSuccess, onCancel }) => {
  const [content, setContent] = useState(initialValue)
  const [attachments, setAttachments] = useState([])
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [error, setError] = useState('')

  const isEditing = !!commentId

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault()

    if (!content.trim()) {
      setError('Comment cannot be empty')
      return
    }

    try {
      setIsSubmitting(true)
      setError('')

      let response

      if (isEditing) {
        // Update existing comment
        response = await commentService.updateComment(commentId, {
          content,
          attachments
        })
      } else {
        // Create new comment
        response = await commentService.createComment({
          task: taskId,
          content,
          attachments,
          parentComment
        })
      }

      // Clear form
      setContent('')
      setAttachments([])

      // Call success callback
      if (onSuccess) {
        onSuccess(response)
      }
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to submit comment')
    } finally {
      setIsSubmitting(false)
    }
  }

  // Handle file upload
  const handleFileUpload = (e) => {
    // In a real implementation, you would upload the file to your server or cloud storage
    // For now, let's just simulate adding the file names
    const files = Array.from(e.target.files)
    const fileNames = files.map(file => file.name)
    setAttachments([...attachments, ...fileNames])
  }

  // Remove attachment
  const removeAttachment = (index) => {
    const newAttachments = [...attachments]
    newAttachments.splice(index, 1)
    setAttachments(newAttachments)
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-3">
      {error && (
        <div className="p-2 text-sm text-red-600 bg-red-50 rounded">
          {error}
        </div>
      )}

      <div className="relative">
        <textarea
          value={content}
          onChange={(e) => setContent(e.target.value)}
          className="input min-h-[100px] py-3 px-4 resize-y"
          placeholder="Write your comment..."
          disabled={isSubmitting}
        />
      </div>

      {/* Attachments */}
      {attachments.length > 0 && (
        <div className="flex flex-wrap gap-2">
          {attachments.map((attachment, index) => (
            <div
              key={index}
              className="flex items-center px-2 py-1 bg-gray-100 rounded text-sm"
            >
              <FiPaperclip className="h-3 w-3 mr-1 text-gray-500" />
              <span className="text-gray-700 truncate max-w-[150px]">
                {attachment}
              </span>
              <button
                type="button"
                onClick={() => removeAttachment(index)}
                className="ml-1 text-gray-400 hover:text-gray-600"
              >
                <FiX className="h-3 w-3" />
              </button>
            </div>
          ))}
        </div>
      )}

      <div className="flex justify-between">
        <div className="flex space-x-2">
          {/* File upload */}
          <label
            htmlFor="file-upload"
            className="cursor-pointer btn btn-outline btn-sm"
          >
            <FiPaperclip className="mr-1" />
            Attach
          </label>
          <input
            id="file-upload"
            type="file"
            multiple
            className="hidden"
            onChange={handleFileUpload}
            disabled={isSubmitting}
          />

          {/* Cancel button (only in edit mode or when provided) */}
          {(isEditing || onCancel) && (
            <button
              type="button"
              onClick={onCancel}
              className="btn btn-outline btn-sm"
              disabled={isSubmitting}
            >
              Cancel
            </button>
          )}
        </div>

        {/* Submit button */}
        <button
          type="submit"
          className="btn btn-primary btn-sm"
          disabled={isSubmitting || !content.trim()}
        >
          <FiSend className="mr-1" />
          {isSubmitting
            ? isEditing
              ? 'Updating...'
              : 'Sending...'
            : isEditing
              ? 'Update'
              : 'Send'}
        </button>
      </div>
    </form>
  )
}

export default CommentForm

================
File: src/components/tasks/SortableTaskCard.jsx
================
import { useSortable } from '@dnd-kit/sortable'
import { CSS } from '@dnd-kit/utilities'
import TaskCard from './TaskCard'

const SortableTaskCard = ({ task }) => {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging
  } = useSortable({ id: task._id })

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.4 : 1,
    zIndex: isDragging ? 999 : 'auto'
  }

  return (
    <div
      ref={setNodeRef}
      style={style}
      {...attributes}
      {...listeners}
    >
      <TaskCard task={task} isDragging={isDragging} />
    </div>
  )
}

export default SortableTaskCard

================
File: src/components/tasks/TaskActivities.jsx
================
import {
  FiPlus,
  FiEdit,
  FiCheckCircle,
  FiRefreshCw,
  FiArchive,
  FiMessageSquare,
  FiCalendar,
  FiUser,
  FiUserMinus
} from 'react-icons/fi'

const TaskActivities = ({ activities = [] }) => {
  // Get icon based on activity type
  const getActivityIcon = (type) => {
    const iconMap = {
      task_created: <FiPlus className="h-5 w-5 text-green-500" />,
      task_updated: <FiEdit className="h-5 w-5 text-blue-500" />,
      task_status_changed: <FiRefreshCw className="h-5 w-5 text-amber-500" />,
      task_assigned: <FiUser className="h-5 w-5 text-purple-500" />,
      task_unassigned: <FiUserMinus className="h-5 w-5 text-red-500" />,
      comment_added: <FiMessageSquare className="h-5 w-5 text-blue-500" />,
      task_completed: <FiCheckCircle className="h-5 w-5 text-green-500" />,
      task_reopened: <FiRefreshCw className="h-5 w-5 text-orange-500" />,
      task_archived: <FiArchive className="h-5 w-5 text-gray-500" />,
      attachment_added: <FiPlus className="h-5 w-5 text-blue-500" />,
      due_date_changed: <FiCalendar className="h-5 w-5 text-purple-500" />,
    }

    return iconMap[type] || <FiEdit className="h-5 w-5 text-gray-500" />
  }

  // Format date relative to now
  const formatRelativeTime = (dateString) => {
    if (!dateString) return ''

    const date = new Date(dateString)
    const now = new Date()
    const diffMs = now - date
    const diffSec = Math.floor(diffMs / 1000)
    const diffMin = Math.floor(diffSec / 60)
    const diffHour = Math.floor(diffMin / 60)
    const diffDay = Math.floor(diffHour / 24)

    if (diffSec < 60) {
      return 'just now'
    } else if (diffMin < 60) {
      return `${diffMin}m ago`
    } else if (diffHour < 24) {
      return `${diffHour}h ago`
    } else if (diffDay < 7) {
      return `${diffDay}d ago`
    } else {
      return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })
    }
  }

  // Format activity date with full time
  const formatDate = (dateString) => {
    if (!dateString) return ''

    const date = new Date(dateString)
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  return (
    <div className="flow-root">
      {activities.length === 0 ? (
        <div className="py-4 text-center text-gray-500">
          <p>No activity recorded yet.</p>
        </div>
      ) : (
        <ul className="-mb-8">
          {activities.map((activity, index) => (
            <li key={activity._id || index}>
              <div className="relative pb-8">
                {/* Vertical line */}
                {index !== activities.length - 1 && (
                  <span
                    className="absolute top-5 left-5 -ml-px h-full w-0.5 bg-gray-200"
                    aria-hidden="true"
                  />
                )}

                <div className="relative flex items-start space-x-3">
                  {/* Activity icon */}
                  <div className="relative">
                    <div className="h-10 w-10 rounded-full bg-gray-100 flex items-center justify-center ring-8 ring-white">
                      {getActivityIcon(activity.type)}
                    </div>
                  </div>

                  {/* Activity content */}
                  <div className="min-w-0 flex-1">
                    <div>
                      <div className="text-sm">
                        <span className="font-medium text-gray-900">
                          {activity.user?.name || 'Unknown user'}
                        </span>
                      </div>
                      <p className="mt-0.5 text-sm text-gray-500">
                        {formatDate(activity.createdAt)}
                      </p>
                    </div>
                    <div className="mt-2">
                      <p className="text-sm text-gray-700">
                        {activity.description}
                      </p>

                      {/* Activity metadata (if any) */}
                      {activity.metadata && (
                        <div className="mt-2 text-sm text-gray-500">
                          {activity.type === 'task_status_changed' && (
                            <p>
                              Changed status from{' '}
                              <span className="font-medium">
                                {activity.metadata.oldStatus}
                              </span>{' '}
                              to{' '}
                              <span className="font-medium">
                                {activity.metadata.newStatus}
                              </span>
                            </p>
                          )}

                          {activity.type === 'due_date_changed' && (
                            <p>
                              {activity.metadata.oldDueDate
                                ? `Changed due date from ${new Date(activity.metadata.oldDueDate).toLocaleDateString()} to ${new Date(activity.metadata.newDueDate).toLocaleDateString()}`
                                : `Set due date to ${new Date(activity.metadata.newDueDate).toLocaleDateString()}`}
                            </p>
                          )}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </li>
          ))}
        </ul>
      )}
    </div>
  )
}

export default TaskActivities

================
File: src/components/tasks/TaskCard.jsx
================
import { Link } from 'react-router-dom'
import {
  FiCalendar,
  FiClock,
  FiMessageSquare,
  FiAlertTriangle,
  FiPaperclip,
} from 'react-icons/fi'

const TaskCard = ({ task, isDragging }) => {
  // Format due date
  const formatDueDate = (dateString) => {
    if (!dateString) return null

    const date = new Date(dateString)
    const today = new Date()
    today.setHours(0, 0, 0, 0)

    const tomorrow = new Date(today)
    tomorrow.setDate(tomorrow.getDate() + 1)

    const dueDate = new Date(date)
    dueDate.setHours(0, 0, 0, 0)

    if (dueDate.getTime() === today.getTime()) {
      return 'Today'
    } else if (dueDate.getTime() === tomorrow.getTime()) {
      return 'Tomorrow'
    } else {
      return date.toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric',
      })
    }
  }

  // Determine if task is overdue
  const isOverdue = () => {
    if (!task.dueDate) return false

    const dueDate = new Date(task.dueDate)
    const today = new Date()
    today.setHours(0, 0, 0, 0)

    const taskDate = new Date(dueDate)
    taskDate.setHours(0, 0, 0, 0)

    return taskDate < today && task.status !== 'done'
  }

  // Priority dot colors
  const priorityDotColors = {
    low: 'bg-gray-400',
    medium: 'bg-blue-500',
    high: 'bg-orange-500',
    urgent: 'bg-red-500'
  }

  return (
    <div className={`
      group relative bg-white rounded-xl shadow-sm border
      ${isDragging ? 'border-violet-300 shadow-md' : 'border-gray-200 hover:shadow-md'}
      transition-shadow p-4 cursor-grab active:cursor-grabbing touch-manipulation
    `}>
      {/* Drag handle indicator that appears on hover */}
      <div className="absolute top-3 right-3 opacity-0 group-hover:opacity-70 transition-opacity text-gray-400">

      </div>

      {/* Task title */}
      <div className="font-medium text-gray-900 mb-1 pr-6">
        <Link
          to={`/tasks/${task._id}`}
          className="hover:text-violet-600"
          onClick={(e) => isDragging && e.preventDefault()} // Prevent navigation when dragging
        >
          {task.title}
        </Link>
      </div>

      {/* Task description (truncated) */}
      {task.description && (
        <p className="text-sm text-gray-600 mb-3 line-clamp-2">
          {task.description}
        </p>
      )}

      {/* Task meta information */}
      <div className="flex flex-wrap gap-y-2 gap-x-3 text-xs text-gray-500">
        {/* Due date */}
        {task.dueDate && (
          <div className={`flex items-center ${isOverdue() ? 'text-red-600' : ''}`}>
            <FiCalendar className="mr-1" />
            <span>{formatDueDate(task.dueDate)}</span>
            {isOverdue() && (
              <span className="ml-1">
                <FiAlertTriangle className="text-red-600" />
              </span>
            )}
          </div>
        )}

        {/* Estimated hours */}
        {task.estimatedHours && (
          <div className="flex items-center">
            <FiClock className="mr-1" />
            <span>{task.estimatedHours}h</span>
          </div>
        )}

        {/* Attachments count */}
        {task.attachments?.length > 0 && (
          <div className="flex items-center">
            <FiPaperclip className="mr-1" />
            <span>{task.attachments.length}</span>
          </div>
        )}

        {/* Comments count (if available) */}
        {task.comments?.length > 0 && (
          <div className="flex items-center">
            <FiMessageSquare className="mr-1" />
            <span>{task.comments.length}</span>
          </div>
        )}
      </div>

      {/* Task progress */}
      {task.progress !== undefined && task.progress > 0 && (
        <div className="mt-3">
          <div className="w-full bg-gray-200 rounded-full h-1.5">
            <div
              className="bg-violet-600 h-1.5 rounded-full"
              style={{ width: `${task.progress}%` }}
            ></div>
          </div>
        </div>
      )}

      {/* Task footer */}
      <div className="mt-3 flex justify-between items-center">
        {/* Priority indicator */}
        <div className="flex items-center">
          <div className={`h-2.5 w-2.5 rounded-full ${priorityDotColors[task.priority] || 'bg-gray-400'} mr-1.5`}></div>
          <span className="text-xs capitalize">{task.priority}</span>
        </div>

        {/* Assignees */}
        {task.assignees && task.assignees.length > 0 && (
          <div className="flex -space-x-2">
            {task.assignees.slice(0, 3).map((assignee, idx) => (
              <div
                key={idx}
                className="h-6 w-6 rounded-full bg-violet-100 flex items-center justify-center text-xs text-violet-700 ring-2 ring-white"
                title={assignee.name}
              >
                {assignee.avatar ? (
                  <img
                    src={assignee.avatar}
                    alt={assignee.name}
                    className="h-6 w-6 rounded-full"
                  />
                ) : (
                  assignee.name.charAt(0)
                )}
              </div>
            ))}
            {task.assignees.length > 3 && (
              <div className="h-6 w-6 rounded-full bg-gray-100 flex items-center justify-center text-xs text-gray-700 ring-2 ring-white">
                +{task.assignees.length - 3}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  )
}

export default TaskCard

================
File: src/components/tasks/TaskColumn.jsx
================
import { Link } from 'react-router-dom'
import { useDroppable } from '@dnd-kit/core'
import { SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable'
import { FiPlus } from 'react-icons/fi'
import SortableTaskCard from './SortableTaskCard'

const TaskColumn = ({ id, title, tasks, status, color, loading }) => {
  const { setNodeRef } = useDroppable({
    id,
  })

  const colorClasses = {
    gray: 'bg-gray-50 border-gray-300',
    blue: 'bg-blue-50 border-blue-300',
    amber: 'bg-amber-50 border-amber-300',
    green: 'bg-green-50 border-green-300',
  }

  const headerColorClasses = {
    gray: 'bg-gray-100 text-gray-800',
    blue: 'bg-blue-100 text-blue-800',
    amber: 'bg-amber-100 text-amber-800',
    green: 'bg-green-100 text-green-800',
  }

  // Extract task ids for the sortable context
  const taskIds = tasks.map(task => task._id)

  return (
    <div className={`flex-shrink-0 w-72 flex flex-col rounded-xl border ${colorClasses[color] || 'bg-gray-50 border-gray-300'} shadow-sm`}>
      {/* Column Header */}
      <div className={`p-4 rounded-t-xl border-b ${headerColorClasses[color] || 'bg-gray-100'}`}>
        <div className="flex items-center justify-between">
          <h3 className="font-medium">{title}</h3>
          <span className="text-sm flex items-center justify-center h-6 w-6 rounded-full bg-white">{loading ? '...' : tasks.length}</span>
        </div>
      </div>

      {/* Task Cards */}
      <div
        ref={setNodeRef}
        className="flex-1 p-3 space-y-3 overflow-auto min-h-[200px]"
      >
        {loading ? (
          // Loading skeleton
          Array(3).fill(0).map((_, index) => (
            <div key={index} className="bg-white rounded-xl shadow-sm p-3 animate-pulse">
              <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
              <div className="h-3 bg-gray-100 rounded w-1/2 mb-4"></div>
              <div className="flex justify-between">
                <div className="h-6 w-16 bg-gray-100 rounded-full"></div>
                <div className="h-6 w-6 bg-gray-100 rounded-full"></div>
              </div>
            </div>
          ))
        ) : tasks.length > 0 ? (
          <SortableContext items={taskIds} strategy={verticalListSortingStrategy}>
            {tasks.map((task) => (
              <SortableTaskCard key={task._id} task={task} />
            ))}
          </SortableContext>
        ) : (
          <div className="bg-white rounded-xl border border-dashed border-gray-300 p-3 flex flex-col items-center justify-center text-gray-500 text-sm h-24">
            <p>No tasks yet</p>
            <Link
              to={`/tasks/new?status=${status}`}
              className="mt-2 inline-flex items-center text-violet-600 hover:text-violet-700"
            >
              <FiPlus className="mr-1" /> Add task
            </Link>
          </div>
        )}
      </div>

      {/* Add Task Button */}
      <div className="p-3 border-t">
        <Link
          to={`/tasks/new?status=${status}`}
          className="w-full flex items-center justify-center py-2.5 px-3 border border-dashed border-gray-300 rounded-xl text-gray-500 hover:text-violet-600 hover:border-violet-400 hover:bg-violet-50 transition-colors"
        >
          <FiPlus className="mr-1" /> Add task
        </Link>
      </div>
    </div>
  )
}

export default TaskColumn

================
File: src/components/tasks/TaskComments.jsx
================
import { useState } from 'react'
import { FiEdit2, FiTrash2, FiThumbsUp, FiMessageSquare, FiPaperclip } from 'react-icons/fi'
import { useAuth } from '../../hooks/useAuth'
import CommentForm from './CommentForm'
import commentService from '../../services/commentService'

const CommentItem = ({ comment, onUpdate, onDelete, onReply, taskId }) => {
  const { currentUser } = useAuth()
  const [isEditing, setIsEditing] = useState(false)
  const [showReplyForm, setShowReplyForm] = useState(false)
  const [isLiked, setIsLiked] = useState(
    comment.likes?.some(like => like._id === currentUser?._id)
  )

  // Format date
  const formatDate = (dateString) => {
    if (!dateString) return ''

    const date = new Date(dateString)
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  // Check if current user is the author
  const isAuthor = comment.author?._id === currentUser?._id

  // Handle like toggle
  const handleLikeToggle = async () => {
    try {
      const updatedComment = await commentService.toggleLike(comment._id)
      setIsLiked(!isLiked)
      // Update the parent component with the updated comment
      onUpdate(updatedComment)
    } catch (error) {
      console.error('Failed to toggle like:', error)
    }
  }

  // Handle delete
  const handleDelete = async () => {
    if (window.confirm('Are you sure you want to delete this comment?')) {
      try {
        await commentService.deleteComment(comment._id)
        onDelete(comment._id)
      } catch (error) {
        console.error('Failed to delete comment:', error)
      }
    }
  }

  return (
    <div className="py-4">
      {isEditing ? (
        <CommentForm
          taskId={taskId}
          initialValue={comment.content}
          commentId={comment._id}
          onSuccess={(updatedComment) => {
            setIsEditing(false)
            onUpdate(updatedComment)
          }}
          onCancel={() => setIsEditing(false)}
        />
      ) : (
        <>
          <div className="flex space-x-3">
            <div className="flex-shrink-0">
              <div className="h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center text-gray-700">
                {comment.author?.avatar ? (
                  <img
                    src={comment.author.avatar}
                    alt={comment.author.name}
                    className="h-10 w-10 rounded-full"
                  />
                ) : (
                  comment.author?.name?.charAt(0) || 'U'
                )}
              </div>
            </div>
            <div className="flex-1 min-w-0">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-900">
                    {comment.author?.name || 'Unknown user'}
                  </p>
                  <p className="text-xs text-gray-500">
                    {formatDate(comment.createdAt)}
                    {comment.isEdited && <span className="ml-2">(edited)</span>}
                  </p>
                </div>

                {isAuthor && (
                  <div className="flex space-x-2">
                    <button
                      type="button"
                      onClick={() => setIsEditing(true)}
                      className="text-gray-400 hover:text-gray-500"
                    >
                      <FiEdit2 className="h-4 w-4" />
                    </button>
                    <button
                      type="button"
                      onClick={handleDelete}
                      className="text-gray-400 hover:text-red-500"
                    >
                      <FiTrash2 className="h-4 w-4" />
                    </button>
                  </div>
                )}
              </div>

              <div className="mt-2 text-sm text-gray-700 whitespace-pre-line">
                {comment.content}
              </div>

              {comment.attachments && comment.attachments.length > 0 && (
                <div className="mt-2 flex flex-wrap gap-2">
                  {comment.attachments.map((attachment, idx) => (
                    <a
                      key={idx}
                      href={attachment}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800 hover:bg-gray-200"
                    >
                      <FiPaperclip className="mr-1 h-3 w-3" />
                      {attachment.split('/').pop()}
                    </a>
                  ))}
                </div>
              )}

              <div className="mt-2 flex items-center space-x-4">
                <button
                  type="button"
                  onClick={handleLikeToggle}
                  className={`flex items-center text-xs ${
                    isLiked ? 'text-primary-600' : 'text-gray-500 hover:text-gray-700'
                  }`}
                >
                  <FiThumbsUp className={`mr-1 h-4 w-4 ${isLiked ? 'fill-current' : ''}`} />
                  {comment.likes?.length || 0} {comment.likes?.length === 1 ? 'Like' : 'Likes'}
                </button>

                <button
                  type="button"
                  onClick={() => setShowReplyForm(!showReplyForm)}
                  className="flex items-center text-xs text-gray-500 hover:text-gray-700"
                >
                  <FiMessageSquare className="mr-1 h-4 w-4" />
                  Reply
                </button>
              </div>

              {/* Reply form */}
              {showReplyForm && (
                <div className="mt-3">
                  <CommentForm
                    taskId={taskId}
                    parentComment={comment._id}
                    onSuccess={(newComment) => {
                      setShowReplyForm(false)
                      onReply(newComment)
                    }}
                    onCancel={() => setShowReplyForm(false)}
                  />
                </div>
              )}

              {/* Replies */}
              {comment.replies && comment.replies.length > 0 && (
                <div className="mt-4 pl-4 border-l-2 border-gray-200">
                  {comment.replies.map((reply) => (
                    <CommentItem
                      key={reply._id}
                      comment={reply}
                      onUpdate={onUpdate}
                      onDelete={onDelete}
                      onReply={onReply}
                      taskId={taskId}
                    />
                  ))}
                </div>
              )}
            </div>
          </div>
        </>
      )}
    </div>
  )
}

const TaskComments = ({ comments: initialComments, taskId }) => {
  const [comments, setComments] = useState(initialComments || [])
  const [loading, setLoading] = useState(false)

  // Handle comment update
  const handleCommentUpdate = (updatedComment) => {
    setComments(prevComments =>
      prevComments.map(comment =>
        comment._id === updatedComment._id ? updatedComment : comment
      )
    )
  }

  // Handle comment delete
  const handleCommentDelete = (commentId) => {
    setComments(prevComments =>
      prevComments.filter(comment => comment._id !== commentId)
    )
  }

  // Handle comment reply
  const handleCommentReply = (newReply) => {
    if (!newReply.parentComment) {
      // Top-level comment
      setComments(prevComments => [...prevComments, newReply])
    } else {
      // Reply to existing comment
      setComments(prevComments =>
        prevComments.map(comment => {
          if (comment._id === newReply.parentComment) {
            return {
              ...comment,
              replies: [...(comment.replies || []), newReply]
            }
          }
          return comment
        })
      )
    }
  }

  return (
    <div>
      {loading ? (
        <div className="py-4 text-center">
          <div className="w-8 h-8 border-4 border-primary-500 border-t-transparent rounded-full animate-spin mx-auto"></div>
        </div>
      ) : comments && comments.length > 0 ? (
        <div className="divide-y divide-gray-200">
          {comments.map((comment) => (
            <CommentItem
              key={comment._id}
              comment={comment}
              onUpdate={handleCommentUpdate}
              onDelete={handleCommentDelete}
              onReply={handleCommentReply}
              taskId={taskId}
            />
          ))}
        </div>
      ) : (
        <div className="py-6 text-center text-gray-500">
          <p>No comments yet. Be the first to comment!</p>
        </div>
      )}
    </div>
  )
}

export default TaskComments

================
File: src/components/tasks/TaskEdit.jsx
================
import { useEffect } from 'react'
import { useParams } from 'react-router-dom'
import TaskForm from './TaskForm'

const TaskEdit = () => {
  const { id } = useParams()
  const isEditMode = !!id

  // Set page title
  useEffect(() => {
    document.title = isEditMode ? 'Edit Task - Weid' : 'Create Task - Weid'

    return () => {
      document.title = 'Weid - Task Management'
    }
  }, [isEditMode])

  return (
    <div>
      {/* No duplicated heading here - the TaskForm will handle the heading */}
      <TaskForm taskId={id} />
    </div>
  )
}

export default TaskEdit

================
File: src/components/tasks/TaskFilters.jsx
================
import { useState, useEffect, useCallback } from 'react'
import {
  FiX,
  FiFilter,
  FiCalendar,
  FiClock,
  FiTag,
  FiUser
} from 'react-icons/fi'

const TaskFilters = ({ selectedFilters, setSelectedFilters, clearFilters }) => {
  const [users, setUsers] = useState([])
  const [tags, setTags] = useState([])

  // Fetch users and tags
  useEffect(() => {
    // In a real application, these would be fetched from the API
    // For now, we'll use mock data
    setUsers([
      { _id: 'user1', name: 'John Doe', avatar: null },
      { _id: 'user2', name: 'Jane Smith', avatar: null },
      { _id: 'user3', name: 'Bob Johnson', avatar: null },
    ])

    setTags([
      'frontend', 'backend', 'design', 'bug', 'feature', 'documentation', 'testing', 'maintenance'
    ])
  }, [])

  // Handle status filter change
  const handleStatusChange = (status) => {
    setSelectedFilters(prev => {
      const newStatus = [...prev.status]
      const statusIndex = newStatus.indexOf(status)

      if (statusIndex === -1) {
        newStatus.push(status)
      } else {
        newStatus.splice(statusIndex, 1)
      }

      return { ...prev, status: newStatus }
    })
  }

  // Handle priority filter change
  const handlePriorityChange = (priority) => {
    setSelectedFilters(prev => {
      const newPriority = [...prev.priority]
      const priorityIndex = newPriority.indexOf(priority)

      if (priorityIndex === -1) {
        newPriority.push(priority)
      } else {
        newPriority.splice(priorityIndex, 1)
      }

      return { ...prev, priority: newPriority }
    })
  }

  // Handle assignee filter change
  const handleAssigneeChange = (userId) => {
    setSelectedFilters(prev => {
      const newAssignee = [...prev.assignee]
      const assigneeIndex = newAssignee.indexOf(userId)

      if (assigneeIndex === -1) {
        newAssignee.push(userId)
      } else {
        newAssignee.splice(assigneeIndex, 1)
      }

      return { ...prev, assignee: newAssignee }
    })
  }

  // Handle due date filter change
  const handleDueDateChange = (e) => {
    const { name, value } = e.target

    setSelectedFilters(prev => {
      const newDueDate = { ...prev.dueDate || {} }
      newDueDate[name] = value ? new Date(value) : null

      // If both dates are null, set dueDate to null
      if (!newDueDate.startDate && !newDueDate.endDate) {
        return { ...prev, dueDate: null }
      }

      return { ...prev, dueDate: newDueDate }
    })
  }

  // Handle tag filter change
  const handleTagChange = (tag) => {
    setSelectedFilters(prev => {
      const newTags = [...prev.tags]
      const tagIndex = newTags.indexOf(tag)

      if (tagIndex === -1) {
        newTags.push(tag)
      } else {
        newTags.splice(tagIndex, 1)
      }

      return { ...prev, tags: newTags }
    })
  }

  // Check if any filter is active
  const hasActiveFilters = Object.values(selectedFilters).some(
    filter => Array.isArray(filter) ? filter.length > 0 : !!filter
  )

  return (
    <div className="bg-white rounded-xl border border-gray-200 shadow-sm p-6 mb-6">
      <div className="flex justify-between items-center mb-6">
        <div className="flex items-center">
          <FiFilter className="h-5 w-5 text-violet-600 mr-2" />
          <h3 className="text-lg font-medium text-gray-900">Filters</h3>
        </div>

        {hasActiveFilters && (
          <button
            type="button"
            onClick={clearFilters}
            className="text-sm text-violet-600 hover:text-violet-700 font-medium flex items-center"
          >
            <FiX className="mr-1" /> Clear all
          </button>
        )}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-5 gap-6">
        {/* Status filters */}
        <div>
          <h4 className="text-sm font-medium text-gray-700 mb-3">Status</h4>
          <div className="space-y-2">
            {['todo', 'inProgress', 'inReview', 'done'].map(status => {
              const isSelected = selectedFilters.status.includes(status)
              return (
                <label
                  key={status}
                  className={`flex items-center p-3 rounded-lg cursor-pointer transition-colors ${
                    isSelected ? 'bg-violet-50 border border-violet-200' : 'hover:bg-gray-50 border border-transparent'
                  }`}
                >
                  <input
                    type="checkbox"
                    className="h-4 w-4 text-violet-600 rounded border-gray-300 focus:ring-violet-500"
                    checked={isSelected}
                    onChange={() => handleStatusChange(status)}
                  />
                  <span className="ml-3 text-sm text-gray-700 capitalize">
                    {status === 'todo' ? 'To Do' :
                     status === 'inProgress' ? 'In Progress' :
                     status === 'inReview' ? 'In Review' : 'Done'}
                  </span>
                </label>
              )
            })}
          </div>
        </div>

        {/* Priority filters */}
        <div>
          <h4 className="text-sm font-medium text-gray-700 mb-3">Priority</h4>
          <div className="space-y-2">
            {['low', 'medium', 'high', 'urgent'].map(priority => {
              const isSelected = selectedFilters.priority.includes(priority)
              return (
                <label
                  key={priority}
                  className={`flex items-center p-3 rounded-lg cursor-pointer transition-colors ${
                    isSelected ? 'bg-violet-50 border border-violet-200' : 'hover:bg-gray-50 border border-transparent'
                  }`}
                >
                  <input
                    type="checkbox"
                    className="h-4 w-4 text-violet-600 rounded border-gray-300 focus:ring-violet-500"
                    checked={isSelected}
                    onChange={() => handlePriorityChange(priority)}
                  />
                  <span className="ml-3 text-sm text-gray-700 capitalize">
                    {priority}
                  </span>
                </label>
              )
            })}
          </div>
        </div>

        {/* Assignee filters */}
        <div>
          <h4 className="text-sm font-medium text-gray-700 mb-3">Assignee</h4>
          <div className="space-y-2 max-h-48 overflow-y-auto">
            {users.map(user => {
              const isSelected = selectedFilters.assignee.includes(user._id)
              return (
                <label
                  key={user._id}
                  className={`flex items-center p-3 rounded-lg cursor-pointer transition-colors ${
                    isSelected ? 'bg-violet-50 border border-violet-200' : 'hover:bg-gray-50 border border-transparent'
                  }`}
                >
                  <input
                    type="checkbox"
                    className="h-4 w-4 text-violet-600 rounded border-gray-300 focus:ring-violet-500"
                    checked={isSelected}
                    onChange={() => handleAssigneeChange(user._id)}
                  />
                  <span className="ml-3 text-sm text-gray-700">
                    {user.name}
                  </span>
                </label>
              )
            })}
          </div>
        </div>

        {/* Due date filters */}
        <div>
          <h4 className="text-sm font-medium text-gray-700 mb-3">Due Date</h4>
          <div className="space-y-3">
            <div>
              <label className="text-xs text-gray-500 block mb-1">From</label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FiCalendar className="h-4 w-4 text-gray-400" />
                </div>
                <input
                  type="date"
                  name="startDate"
                  className="appearance-none block w-full pl-10 pr-3 py-2.5 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-violet-500 focus:border-violet-500 text-sm"
                  value={selectedFilters.dueDate?.startDate?.toISOString().split('T')[0] || ''}
                  onChange={handleDueDateChange}
                />
              </div>
            </div>

            <div>
              <label className="text-xs text-gray-500 block mb-1">To</label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FiCalendar className="h-4 w-4 text-gray-400" />
                </div>
                <input
                  type="date"
                  name="endDate"
                  className="appearance-none block w-full pl-10 pr-3 py-2.5 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-violet-500 focus:border-violet-500 text-sm"
                  value={selectedFilters.dueDate?.endDate?.toISOString().split('T')[0] || ''}
                  onChange={handleDueDateChange}
                />
              </div>
            </div>
          </div>
        </div>

        {/* Tags filters */}
        <div>
          <h4 className="text-sm font-medium text-gray-700 mb-3">Tags</h4>
          <div className="space-y-2 max-h-48 overflow-y-auto">
            {tags.map(tag => {
              const isSelected = selectedFilters.tags.includes(tag)
              return (
                <label
                  key={tag}
                  className={`flex items-center p-3 rounded-lg cursor-pointer transition-colors ${
                    isSelected ? 'bg-violet-50 border border-violet-200' : 'hover:bg-gray-50 border border-transparent'
                  }`}
                >
                  <input
                    type="checkbox"
                    className="h-4 w-4 text-violet-600 rounded border-gray-300 focus:ring-violet-500"
                    checked={isSelected}
                    onChange={() => handleTagChange(tag)}
                  />
                  <span className="ml-3 flex items-center text-sm text-gray-700">
                    <FiTag className="mr-1 h-3 w-3" />
                    {tag}
                  </span>
                </label>
              )
            })}
          </div>
        </div>
      </div>
    </div>
  )
}

export default TaskFilters

================
File: src/components/tasks/TaskForm.jsx
================
import { useState, useEffect } from 'react'
import { useNavigate, useParams, useLocation, Link } from 'react-router-dom'
import { Formik, Form, Field, ErrorMessage } from 'formik'
import * as Yup from 'yup'
import {
  FiX,
  FiSave,
  FiCalendar,
  FiClock,
  FiTag,
  FiPlus,
  FiPaperclip,
  FiAlertTriangle,
  FiArrowLeft
} from 'react-icons/fi'
import { useTasks } from '../../hooks/useTasks'
import userService from '../../services/userService'

// Task validation schema
const taskSchema = Yup.object().shape({
  title: Yup.string()
    .min(3, 'Title must be at least 3 characters')
    .max(200, 'Title must be less than 200 characters')
    .required('Title is required'),
  description: Yup.string()
    .nullable(),
  status: Yup.string()
    .oneOf(['todo', 'inProgress', 'inReview', 'done'], 'Invalid status')
    .required('Status is required'),
  priority: Yup.string()
    .oneOf(['low', 'medium', 'high', 'urgent'], 'Invalid priority')
    .required('Priority is required'),
  dueDate: Yup.date()
    .nullable()
    .min(
      new Date(new Date().setHours(0, 0, 0, 0)),
      'Due date cannot be in the past'
    ),
  estimatedHours: Yup.number()
    .positive('Estimated hours must be positive')
    .nullable(),
})

const TaskForm = ({ taskId }) => {
  const navigate = useNavigate()
  const location = useLocation()
  const { getTaskById, createTask, updateTask } = useTasks()

  const [task, setTask] = useState(null)
  const [loading, setLoading] = useState(taskId ? true : false)
  const [usersLoading, setUsersLoading] = useState(true)
  const [error, setError] = useState(null)
  const [users, setUsers] = useState([])

  // Default values for a new task
  const defaultValues = {
    title: '',
    description: '',
    status: new URLSearchParams(location.search).get('status') || 'todo',
    priority: 'medium',
    dueDate: '',
    estimatedHours: '',
    assignees: [],
    tags: [],
    attachments: [],
  }

  // Fetch users from the API
  const fetchUsers = async () => {
    try {
      setUsersLoading(true)
      // Call the userService to get users from backend
      const response = await userService.getUsers({ limit: 100 })

      if (response && response.users) {
        setUsers(response.users)
      } else {
        console.warn('Unexpected user response format, using default values')
        setUsers([
          { _id: 'user1', name: 'John Doe', avatar: null },
          { _id: 'user2', name: 'Jane Smith', avatar: null },
          { _id: 'user3', name: 'Bob Johnson', avatar: null },
        ])
      }
    } catch (err) {
      console.error('Failed to fetch users:', err)
      // Use fallback users in case of error
      setUsers([
        { _id: 'user1', name: 'John Doe', avatar: null },
        { _id: 'user2', name: 'Jane Smith', avatar: null },
        { _id: 'user3', name: 'Bob Johnson', avatar: null },
      ])
    } finally {
      setUsersLoading(false)
    }
  }

  // Fetch task data if editing and load users
  useEffect(() => {
    // Load users regardless of create/edit mode
    fetchUsers()

    // If in edit mode, fetch the task data
    if (taskId) {
      let isMounted = true;
      const fetchTaskData = async () => {
        try {
          setLoading(true)
          const taskData = await getTaskById(taskId)
          if (isMounted) {
            setTask(taskData)
            setError(null)
          }
        } catch (err) {
          if (isMounted) {
            setError(err.message || 'Failed to fetch task')
            console.error('Error fetching task:', err)
          }
        } finally {
          if (isMounted) {
            setLoading(false)
          }
        }
      }

      fetchTaskData()
      return () => {
        isMounted = false
      }
    }
  }, [taskId, getTaskById])

  // Handle form submission
  const handleSubmit = async (values, { setSubmitting, setFieldError }) => {
    try {
      // Format the data for API
      const formattedValues = {
        ...values,
        // Convert empty strings to null
        dueDate: values.dueDate || null,
        estimatedHours: values.estimatedHours ? Number(values.estimatedHours) : null,
      }

      // Remove any temporary form fields
      if ('newTag' in formattedValues) {
        delete formattedValues.newTag
      }

      console.log('Submitting task data:', formattedValues)

      if (taskId) {
        // Update existing task
        await updateTask(taskId, formattedValues)
      } else {
        // Create new task
        await createTask(formattedValues)
      }

      // Navigate back to tasks list on success
      navigate('/tasks')
    } catch (err) {
      console.error('Error saving task:', err)

      // Handle validation errors from server
      if (err.response && err.response.data && err.response.data.errors) {
        const serverErrors = err.response.data.errors

        // Map server errors to form fields
        Object.keys(serverErrors).forEach(field => {
          setFieldError(field, serverErrors[field])
        })
      }

      // Set general error message
      setError(err.message || 'Failed to save task. Please check the form and try again.')
    } finally {
      setSubmitting(false)
    }
  }

  // Format initial values correctly for the form
  const prepareInitialValues = () => {
    if (taskId && task) {
      return {
        title: task.title || '',
        description: task.description || '',
        status: task.status || 'todo',
        priority: task.priority || 'medium',
        // Format date for HTML date input (YYYY-MM-DD)
        dueDate: task.dueDate ? new Date(task.dueDate).toISOString().split('T')[0] : '',
        // Handle estimatedHours
        estimatedHours: task.estimatedHours !== null && task.estimatedHours !== undefined
          ? task.estimatedHours
          : '',
        // Extract assignee IDs
        assignees: Array.isArray(task.assignees)
          ? task.assignees.map(assignee => typeof assignee === 'object' ? assignee._id : assignee)
          : [],
        tags: Array.isArray(task.tags) ? task.tags : [],
        attachments: Array.isArray(task.attachments) ? task.attachments : [],
      }
    }
    return defaultValues
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[50vh]">
        <div className="w-12 h-12 border-4 border-violet-500 rounded-full border-t-transparent animate-spin"></div>
      </div>
    )
  }

  const initialValues = prepareInitialValues()

  return (
    <div className="max-w-3xl mx-auto">
      <div className="mb-6">
        <Link
          to="/tasks"
          className="inline-flex items-center text-sm font-medium text-gray-500 hover:text-gray-700"
        >
          <FiArrowLeft className="mr-2" /> Back to Tasks
        </Link>
      </div>

      <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
        <h1 className="text-2xl font-bold text-gray-900 mb-6">
          {taskId ? 'Edit Task' : 'Create New Task'}
        </h1>

        {error && (
          <div className="mb-6 bg-red-50 border-l-4 border-red-500 p-4 rounded-lg">
            <div className="flex">
              <div className="flex-shrink-0">
                <FiAlertTriangle className="h-5 w-5 text-red-500" />
              </div>
              <div className="ml-3">
                <p className="text-sm text-red-700">{error}</p>
              </div>
            </div>
          </div>
        )}

        <Formik
          initialValues={initialValues}
          validationSchema={taskSchema}
          onSubmit={handleSubmit}
          enableReinitialize
        >
          {({ isSubmitting, values, setFieldValue }) => (
            <Form className="space-y-6">
              {/* Title */}
              <div>
                <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-1">Title</label>
                <Field
                  type="text"
                  id="title"
                  name="title"
                  className="appearance-none block w-full px-4 py-3.5 border border-gray-300 rounded-xl shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500"
                  placeholder="Task title"
                />
                <ErrorMessage name="title" component="div" className="mt-1 text-sm text-red-600" />
              </div>

              {/* Description */}
              <div>
                <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                <Field
                  as="textarea"
                  id="description"
                  name="description"
                  className="appearance-none block w-full px-4 py-3.5 border border-gray-300 rounded-xl shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500 min-h-[120px] resize-y"
                  placeholder="Task description (optional)"
                />
                <ErrorMessage name="description" component="div" className="mt-1 text-sm text-red-600" />
              </div>

              {/* Status and Priority */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label htmlFor="status" className="block text-sm font-medium text-gray-700 mb-1">Status</label>
                  <Field
                    as="select"
                    id="status"
                    name="status"
                    className="appearance-none block w-full px-4 py-3.5 border border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500"
                  >
                    <option value="todo">To Do</option>
                    <option value="inProgress">In Progress</option>
                    <option value="inReview">In Review</option>
                    <option value="done">Done</option>
                  </Field>
                  <ErrorMessage name="status" component="div" className="mt-1 text-sm text-red-600" />
                </div>

                <div>
                  <label htmlFor="priority" className="block text-sm font-medium text-gray-700 mb-1">Priority</label>
                  <Field
                    as="select"
                    id="priority"
                    name="priority"
                    className="appearance-none block w-full px-4 py-3.5 border border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500"
                  >
                    <option value="low">Low</option>
                    <option value="medium">Medium</option>
                    <option value="high">High</option>
                    <option value="urgent">Urgent</option>
                  </Field>
                  <ErrorMessage name="priority" component="div" className="mt-1 text-sm text-red-600" />
                </div>
              </div>

              {/* Due Date and Estimated Hours */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label htmlFor="dueDate" className="block text-sm font-medium text-gray-700 mb-1">Due Date (optional)</label>
                  <div className="relative">
                    {/* We'll keep just the input without the custom icon */}
                    <Field
                      type="date"
                      id="dueDate"
                      name="dueDate"
                      className="appearance-none block w-full px-4 py-3.5 border border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500"
                    />
                  </div>
                  <ErrorMessage name="dueDate" component="div" className="mt-1 text-sm text-red-600" />
                </div>

                <div>
                  <label htmlFor="estimatedHours" className="block text-sm font-medium text-gray-700 mb-1">Estimated Hours (optional)</label>
                  <div className="relative">
                    {/* Maintain the clock icon but move it to a better position */}
                    <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                      <FiClock className="h-5 w-5 text-gray-400" />
                    </div>
                    <Field
                      type="number"
                      id="estimatedHours"
                      name="estimatedHours"
                      className="appearance-none block w-full pl-12 py-3.5 border border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500"
                      min="0"
                      step="0.5"
                      placeholder="0"
                    />
                  </div>
                  <ErrorMessage name="estimatedHours" component="div" className="mt-1 text-sm text-red-600" />
                </div>
              </div>

              {/* Assignees */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Assignees (optional)</label>
                <div className="mb-3 flex flex-wrap gap-2">
                  {values.assignees.map((assigneeId, index) => {
                    const user = users.find(u => u._id === assigneeId)
                    return (
                      <div
                        key={index}
                        className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-violet-100 text-violet-800"
                      >
                        <span>{user?.name || 'Unknown user'}</span>
                        <button
                          type="button"
                          onClick={() => {
                            const newAssignees = [...values.assignees]
                            newAssignees.splice(index, 1)
                            setFieldValue('assignees', newAssignees)
                          }}
                          className="ml-2 text-violet-600 hover:text-violet-800 focus:outline-none"
                        >
                          <FiX className="h-4 w-4" />
                        </button>
                      </div>
                    )
                  })}
                </div>
                <div className="flex space-x-2">
                  {usersLoading ? (
                    <div className="flex items-center space-x-2">
                      <div className="w-5 h-5 border-2 border-violet-500 rounded-full border-t-transparent animate-spin"></div>
                      <span className="text-sm text-gray-500">Loading users...</span>
                    </div>
                  ) : (
                    <>
                      <select
                        className="appearance-none block flex-1 px-4 py-3.5 border border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500"
                        value=""
                        onChange={(e) => {
                          if (e.target.value) {
                            const userId = e.target.value
                            if (!values.assignees.includes(userId)) {
                              setFieldValue('assignees', [...values.assignees, userId])
                            }
                            e.target.value = "" // Reset select
                          }
                        }}
                      >
                        <option value="">Select user</option>
                        {users.map(user => (
                          <option
                            key={user._id}
                            value={user._id}
                            disabled={values.assignees.includes(user._id)}
                          >
                            {user.name}
                          </option>
                        ))}
                      </select>
                      <button
                        type="button"
                        className="inline-flex items-center px-4 py-3 border border-gray-300 shadow-sm text-sm font-medium rounded-xl text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-violet-500"
                      >
                        <FiPlus className="mr-2" /> Add
                      </button>
                    </>
                  )}
                </div>
              </div>

              {/* Tags */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Tags (optional)</label>
                <div className="mb-3 flex flex-wrap gap-2">
                  {values.tags.map((tag, index) => (
                    <div
                      key={index}
                      className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800"
                    >
                      <FiTag className="mr-1 text-gray-500" />
                      <span>{tag}</span>
                      <button
                        type="button"
                        onClick={() => {
                          const newTags = [...values.tags]
                          newTags.splice(index, 1)
                          setFieldValue('tags', newTags)
                        }}
                        className="ml-2 text-gray-600 hover:text-gray-800 focus:outline-none"
                      >
                        <FiX className="h-4 w-4" />
                      </button>
                    </div>
                  ))}
                </div>
                <div className="flex space-x-2">
                  <Field
                    type="text"
                    name="newTag"
                    className="appearance-none block flex-1 px-4 py-3.5 border border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500"
                    placeholder="Add a tag"
                    onKeyDown={(e) => {
                      if (e.key === 'Enter' && e.target.value.trim()) {
                        e.preventDefault()
                        const newTag = e.target.value.trim()
                        if (!values.tags.includes(newTag)) {
                          setFieldValue('tags', [...values.tags, newTag])
                        }
                        e.target.value = ''
                      }
                    }}
                  />
                  <button
                    type="button"
                    className="inline-flex items-center px-4 py-3 border border-gray-300 shadow-sm text-sm font-medium rounded-xl text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-violet-500"
                    onClick={() => {
                      const input = document.querySelector('input[name="newTag"]')
                      if (input?.value.trim()) {
                        const newTag = input.value.trim()
                        if (!values.tags.includes(newTag)) {
                          setFieldValue('tags', [...values.tags, newTag])
                        }
                        input.value = ''
                      }
                    }}
                  >
                    <FiPlus className="mr-2" /> Add
                  </button>
                </div>
              </div>

              {/* Attachments */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Attachments (optional)</label>
                <div className="mb-3 flex flex-wrap gap-2">
                  {values.attachments.map((attachment, index) => (
                    <div
                      key={index}
                      className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800"
                    >
                      <FiPaperclip className="mr-1 text-gray-500" />
                      <span>{typeof attachment === 'string' ? attachment.split('/').pop() : 'File'}</span>
                      <button
                        type="button"
                        onClick={() => {
                          const newAttachments = [...values.attachments]
                          newAttachments.splice(index, 1)
                          setFieldValue('attachments', newAttachments)
                        }}
                        className="ml-2 text-gray-600 hover:text-gray-800 focus:outline-none"
                      >
                        <FiX className="h-4 w-4" />
                      </button>
                    </div>
                  ))}
                </div>
                <div className="flex space-x-2">
                  <label
                    htmlFor="attachment-upload"
                    className="inline-flex items-center px-4 py-3 border border-gray-300 shadow-sm text-sm font-medium rounded-xl text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-violet-500 cursor-pointer"
                  >
                    <FiPaperclip className="mr-2" /> Attach File
                  </label>
                  <input
                    id="attachment-upload"
                    type="file"
                    multiple
                    className="hidden"
                    onChange={(e) => {
                      // In a real implementation, you would:
                      // 1. Upload files to server/cloud storage
                      // 2. Get file URLs back from server
                      // 3. Add those URLs to attachments array

                      // For now, just using file names
                      const files = Array.from(e.target.files || [])
                      const fileNames = files.map(file => file.name)

                      setFieldValue('attachments', [...values.attachments, ...fileNames])

                      // Reset input
                      e.target.value = ''
                    }}
                  />
                </div>
              </div>

              {/* Form Actions */}
              <div className="pt-6 border-t border-gray-200 flex justify-end space-x-3">
                <Link
                  to="/tasks"
                  className="inline-flex items-center px-4 py-3 border border-gray-300 shadow-sm text-sm font-medium rounded-xl text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500"
                >
                  Cancel
                </Link>
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className="inline-flex items-center px-4 py-3 border border-transparent text-sm font-medium rounded-xl shadow-sm text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500 disabled:opacity-70"
                >
                  <FiSave className="mr-2" />
                  {isSubmitting ? 'Saving...' : 'Save Task'}
                </button>
              </div>
            </Form>
          )}
        </Formik>
      </div>
    </div>
  )
}

export default TaskForm

================
File: src/config/axios.js
================
import axios from 'axios'

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000/api/v1'

const apiClient = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
})

// Add a request interceptor
apiClient.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('accessToken')
    if (token) {
      config.headers.Authorization = `Bearer ${token}`
    }
    return config
  },
  (error) => {
    return Promise.reject(error)
  }
)

// Add a response interceptor
apiClient.interceptors.response.use(
  (response) => {
    return response
  },
  async (error) => {
    const originalRequest = error.config

    // If the error is due to an expired token and we haven't retried yet
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true

      try {
        // Try to refresh the token
        const refreshToken = localStorage.getItem('refreshToken')
        const response = await axios.post(`${API_URL}/auth/refresh-token`, {
          refreshToken
        })

        // Get new tokens
        const { accessToken, refreshToken: newRefreshToken } = response.data.data

        // Update tokens in localStorage
        localStorage.setItem('accessToken', accessToken)
        localStorage.setItem('refreshToken', newRefreshToken)

        // Update header and retry the original request
        apiClient.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`
        return apiClient(originalRequest)
      } catch (refreshError) {
        // If refresh fails, clear tokens and redirect to login
        localStorage.removeItem('accessToken')
        localStorage.removeItem('refreshToken')

        // We could use an event bus to notify the app to redirect to login
        // or use a more sophisticated state management solution
        window.location.href = '/login'

        return Promise.reject(refreshError)
      }
    }

    return Promise.reject(error)
  }
)

export default apiClient

================
File: src/context/AuthContext.jsx
================
import { createContext, useState, useEffect } from 'react'
import authService from '../services/authService'

const AuthContext = createContext(null)

export const AuthProvider = ({ children }) => {
  const [currentUser, setCurrentUser] = useState(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)

  useEffect(() => {
    const initAuth = async () => {
      try {
        setLoading(true)
        // Check if user is already logged in
        const token = localStorage.getItem('accessToken')

        if (token) {
          const user = await authService.getUserProfile()
          setCurrentUser(user)
        }
      } catch (err) {
        console.error("Auth initialization error:", err)
        // Clear any invalid tokens
        localStorage.removeItem('accessToken')
        localStorage.removeItem('refreshToken')
        setCurrentUser(null)
        setError(err.message)
      } finally {
        setLoading(false)
      }
    }

    initAuth()
  }, [])

  const login = async (email, password) => {
    try {
      setLoading(true)
      const { user, tokens } = await authService.login(email, password)

      localStorage.setItem('accessToken', tokens.accessToken)
      localStorage.setItem('refreshToken', tokens.refreshToken)

      setCurrentUser(user)
      setError(null)

      return user
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to login')
      throw err
    } finally {
      setLoading(false)
    }
  }

  const register = async (userData) => {
    try {
      setLoading(true)
      const { user, tokens } = await authService.register(userData)

      localStorage.setItem('accessToken', tokens.accessToken)
      localStorage.setItem('refreshToken', tokens.refreshToken)

      setCurrentUser(user)
      setError(null)

      return user
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to register')
      throw err
    } finally {
      setLoading(false)
    }
  }

  const logout = async () => {
    try {
      setLoading(true)
      await authService.logout()
    } catch (err) {
      console.error("Logout error:", err)
    } finally {
      localStorage.removeItem('accessToken')
      localStorage.removeItem('refreshToken')
      setCurrentUser(null)
      setLoading(false)
    }
  }

  const forgotPassword = async (email) => {
    try {
      setLoading(true)
      await authService.forgotPassword(email)
      setError(null)
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to send password reset email')
      throw err
    } finally {
      setLoading(false)
    }
  }

  const resetPassword = async (token, newPassword, confirmPassword) => {
    try {
      setLoading(true)
      await authService.resetPassword(token, newPassword, confirmPassword)
      setError(null)
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to reset password')
      throw err
    } finally {
      setLoading(false)
    }
  }

  const refreshToken = async () => {
    try {
      const refreshToken = localStorage.getItem('refreshToken')
      if (!refreshToken) {
        throw new Error('No refresh token available')
      }

      const tokens = await authService.refreshToken(refreshToken)
      localStorage.setItem('accessToken', tokens.accessToken)
      localStorage.setItem('refreshToken', tokens.refreshToken)

      return tokens
    } catch (err) {
      console.error("Token refresh error:", err)
      // If token refresh fails, log the user out
      logout()
      throw err
    }
  }

  const value = {
    currentUser,
    loading,
    error,
    isAuthenticated: !!currentUser,
    login,
    register,
    logout,
    forgotPassword,
    resetPassword,
    refreshToken
  }

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>
}

export default AuthContext

================
File: src/context/NoteContext.jsx
================
import { createContext, useState, useCallback, useRef, useEffect } from 'react'
import noteService from '../services/noteService'
import { useAuth } from '../hooks/useAuth'

const NoteContext = createContext(null)

export const NoteProvider = ({ children }) => {
  const { isAuthenticated, user } = useAuth()
  const [notes, setNotes] = useState([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)
  const [filters, setFilters] = useState({
    search: '',
    category: '',
    isPinned: null,
    tags: [],
    page: 1,
    limit: 10
  })

  // Use ref to track if fetch is in progress
  const fetchInProgress = useRef(false)

  // Cleanup function for component unmounting
  useEffect(() => {
    return () => {
      fetchInProgress.current = false
    }
  }, [])

  const fetchNotes = useCallback(async (customFilters = null) => {
    // Don't fetch if already fetching or not authenticated
    if (fetchInProgress.current || !isAuthenticated) return null

    try {
      fetchInProgress.current = true
      setLoading(true)
      setError(null)

      // Use custom filters if provided, otherwise use stored filters
      const filtersToUse = customFilters || filters

      // Clean filters before sending to API
      const cleanFilters = { ...filtersToUse }

      // Remove empty/null values
      if (!cleanFilters.search) delete cleanFilters.search
      if (!cleanFilters.category) delete cleanFilters.category
      if (cleanFilters.isPinned === null) delete cleanFilters.isPinned
      if (!cleanFilters.tags || cleanFilters.tags.length === 0) delete cleanFilters.tags

      // O filtro de owner é implícito no backend, não precisamos enviar

      const response = await noteService.getNotes(cleanFilters)

      // Ensure we have a notes array, even if the backend doesn't return one
      setNotes(response.notes || [])

      return response
    } catch (err) {
      console.error("Erro ao buscar notas:", err)
      setError(err.message || 'Falha ao buscar notas')
      return null
    } finally {
      setLoading(false)
      fetchInProgress.current = false
    }
  }, [isAuthenticated, filters])

  // Update filters and optionally fetch notes
  const updateFilters = useCallback((newFilters, shouldFetch = false) => {
    setFilters(prev => {
      const updated = {
        ...prev,
        ...newFilters
      }

      // If shouldFetch is true, fetch notes with the updated filters
      if (shouldFetch) {
        // Use setTimeout to ensure state is updated before fetch
        setTimeout(() => fetchNotes(updated), 0)
      }

      return updated
    })
  }, [fetchNotes])

  // Reset filters and fetch notes with default filters
  const resetFilters = useCallback(() => {
    const defaultFilters = {
      search: '',
      category: '',
      isPinned: null,
      tags: [],
      page: 1,
      limit: 10
    }

    setFilters(defaultFilters)

    // Fetch with default filters
    return fetchNotes(defaultFilters)
  }, [fetchNotes])

  // Get a note by ID
  const getNoteById = useCallback(async (noteId) => {
    if (!isAuthenticated) return null

    try {
      setLoading(true)
      setError(null)
      const note = await noteService.getNoteById(noteId)
      return note
    } catch (err) {
      console.error(`Erro ao buscar nota ${noteId}:`, err)

      // Verificar se é um erro de permissão
      if (err.message.includes("permissão")) {
        setError(`Você não tem permissão para visualizar esta nota. Apenas o proprietário pode acessá-la.`)
      } else {
        setError(err.message || `Falha ao buscar nota com ID: ${noteId}`)
      }

      // Propagar o erro para que o componente possa tratá-lo
      throw err
    } finally {
      setLoading(false)
    }
  }, [isAuthenticated])

  // Create a new note
  const createNote = useCallback(async (noteData) => {
    if (!isAuthenticated) return null

    try {
      setLoading(true)
      setError(null)
      const newNote = await noteService.createNote(noteData)

      // Update local state by adding the new note to the front of the array
      setNotes(prev => [newNote, ...prev])

      return newNote
    } catch (err) {
      console.error("Erro ao criar nota:", err)
      const errorMessage = err.message || 'Falha ao criar nota'
      setError(errorMessage)
      throw err
    } finally {
      setLoading(false)
    }
  }, [isAuthenticated])

  // Update an existing note
  const updateNote = useCallback(async (noteId, noteData) => {
    if (!isAuthenticated) return null

    try {
      setLoading(true)
      setError(null)
      const updatedNote = await noteService.updateNote(noteId, noteData)

      // Update local state
      setNotes(prev => prev.map(note =>
        note._id === noteId ? updatedNote : note
      ))

      return updatedNote
    } catch (err) {
      console.error(`Erro ao atualizar nota ${noteId}:`, err)

      // Verificar se é um erro de permissão
      if (err.message.includes("permissão")) {
        setError(`Você não tem permissão para editar esta nota. Apenas o proprietário pode modificá-la.`)
      } else {
        setError(err.message || `Falha ao atualizar nota com ID: ${noteId}`)
      }

      throw err
    } finally {
      setLoading(false)
    }
  }, [isAuthenticated])

  // Delete a note
  const deleteNote = useCallback(async (noteId) => {
    if (!isAuthenticated) return false

    try {
      setLoading(true)
      setError(null)
      const success = await noteService.deleteNote(noteId)

      if (success) {
        // Update local state by removing the deleted note
        setNotes(prev => prev.filter(note => note._id !== noteId))
      }

      return success
    } catch (err) {
      console.error(`Erro ao excluir nota ${noteId}:`, err)

      // Verificar se é um erro de permissão
      if (err.message.includes("permissão")) {
        setError(`Você não tem permissão para excluir esta nota. Apenas o proprietário pode excluí-la.`)
      } else {
        setError(err.message || `Falha ao excluir nota com ID: ${noteId}`)
      }

      throw err
    } finally {
      setLoading(false)
    }
  }, [isAuthenticated])

  // Pin a note
  const pinNote = useCallback(async (noteId) => {
    if (!isAuthenticated) return null

    try {
      setLoading(true)
      setError(null)
      const updatedNote = await noteService.pinNote(noteId)

      // Update local state by setting isPinned to true for the specified note
      setNotes(prev => prev.map(note =>
        note._id === noteId ? { ...note, isPinned: true } : note
      ))

      return updatedNote
    } catch (err) {
      console.error(`Erro ao fixar nota ${noteId}:`, err)

      // Verificar se é um erro de permissão
      if (err.message.includes("permissão")) {
        setError(`Você não tem permissão para fixar esta nota.`)
      } else {
        setError(err.message || `Falha ao fixar nota com ID: ${noteId}`)
      }

      throw err
    } finally {
      setLoading(false)
    }
  }, [isAuthenticated])

  // Unpin a note
  const unpinNote = useCallback(async (noteId) => {
    if (!isAuthenticated) return null

    try {
      setLoading(true)
      setError(null)
      const updatedNote = await noteService.unpinNote(noteId)

      // Update local state by setting isPinned to false for the specified note
      setNotes(prev => prev.map(note =>
        note._id === noteId ? { ...note, isPinned: false } : note
      ))

      return updatedNote
    } catch (err) {
      console.error(`Erro ao desafixar nota ${noteId}:`, err)

      // Verificar se é um erro de permissão
      if (err.message.includes("permissão")) {
        setError(`Você não tem permissão para desafixar esta nota.`)
      } else {
        setError(err.message || `Falha ao desafixar nota com ID: ${noteId}`)
      }

      throw err
    } finally {
      setLoading(false)
    }
  }, [isAuthenticated])

  // Clear error
  const clearError = useCallback(() => {
    setError(null)
  }, [])

  const value = {
    notes,
    filters,
    loading,
    error,
    fetchNotes,
    updateFilters,
    resetFilters,
    getNoteById,
    createNote,
    updateNote,
    deleteNote,
    pinNote,
    unpinNote,
    clearError
  }

  return <NoteContext.Provider value={value}>{children}</NoteContext.Provider>
}

export default NoteContext

================
File: src/context/TaskContext.jsx
================
import { createContext, useState, useEffect, useCallback } from 'react'
import taskService from '../services/taskService'
import { useAuth } from '../hooks/useAuth'

const TaskContext = createContext(null)

export const TaskProvider = ({ children }) => {
  const { isAuthenticated } = useAuth()
  const [tasks, setTasks] = useState([])
  const [taskCache, setTaskCache] = useState({})
  const [tasksByStatus, setTasksByStatus] = useState({
    todo: [],
    inProgress: [],
    inReview: [],
    done: []
  })
  const [statistics, setStatistics] = useState(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)

  const fetchTasks = useCallback(async (filters = {}) => {
    if (!isAuthenticated) return

    try {
      setLoading(true)
      const response = await taskService.getTasks(filters)

      // Set all tasks
      setTasks(response.tasks || [])

      // Group tasks by status
      const grouped = {
        todo: [],
        inProgress: [],
        inReview: [],
        done: []
      }

      // Make sure we handle the response structure correctly
      const tasksArray = response.tasks || []

      tasksArray.forEach(task => {
        if (task && task.status && grouped[task.status]) {
          grouped[task.status].push(task)
        } else if (task) {
          // If status is not recognized, default to todo
          grouped.todo.push(task)
        }
      })

      setTasksByStatus(grouped)
      setError(null)
    } catch (err) {
      console.error("Error fetching tasks:", err)
      setError(err.message || 'Failed to fetch tasks')
    } finally {
      setLoading(false)
    }
  }, [isAuthenticated])

  const fetchStatistics = useCallback(async () => {
    if (!isAuthenticated) return

    try {
      setLoading(true)
      const stats = await taskService.getTaskStatistics()
      setStatistics(stats)
    } catch (err) {
      console.error("Error fetching task statistics:", err)
      // Don't set error state here to avoid blocking the UI
    } finally {
      setLoading(false)
    }
  }, [isAuthenticated])

  useEffect(() => {
    if (isAuthenticated) {
      fetchTasks()
      fetchStatistics()
    }
  }, [isAuthenticated, fetchTasks, fetchStatistics])

  const getTaskById = async (taskId) => {
    try {
      // Return cached task if it exists and we're not in loading state
      if (taskCache[taskId] && !loading) {
        return taskCache[taskId]
      }

      setLoading(true)
      setError(null)

      const task = await taskService.getTaskById(taskId)

      // Update the cache with the new task
      setTaskCache(prev => ({
        ...prev,
        [taskId]: task
      }))

      return task
    } catch (err) {
      console.error(`Failed to fetch task with ID: ${taskId}`, err)
      const errorMessage = err.response?.data?.message ||
                           err.message ||
                           `Failed to fetch task with ID: ${taskId}`
      setError(errorMessage)
      throw new Error(errorMessage)
    } finally {
      setLoading(false)
    }
  }

  const createTask = async (taskData) => {
    try {
      setLoading(true)
      const newTask = await taskService.createTask(taskData)

      // Update local state
      setTasks(prev => [...prev, newTask])
      setTasksByStatus(prev => ({
        ...prev,
        [newTask.status]: [...prev[newTask.status], newTask]
      }))

      // Refresh statistics
      fetchStatistics()

      return newTask
    } catch (err) {
      const errorMessage = err.response?.data?.message || err.message || 'Failed to create task'
      setError(errorMessage)
      throw err
    } finally {
      setLoading(false)
    }
  }

  const updateTask = async (taskId, taskData) => {
    try {
      setLoading(true)
      const updatedTask = await taskService.updateTask(taskId, taskData)

      // Update local state
      setTasks(prev => prev.map(task =>
        task._id === taskId ? updatedTask : task
      ))

      // Update tasks by status if status changed
      setTasksByStatus(prev => {
        const oldTask = tasks.find(t => t._id === taskId)
        const newStatus = updatedTask.status
        const oldStatus = oldTask?.status

        if (oldStatus && newStatus && oldStatus !== newStatus) {
          // Remove from old status array
          const updatedOldStatusArray = prev[oldStatus].filter(t => t._id !== taskId)

          // Add to new status array
          const updatedNewStatusArray = [...prev[newStatus], updatedTask]

          return {
            ...prev,
            [oldStatus]: updatedOldStatusArray,
            [newStatus]: updatedNewStatusArray
          }
        } else {
          // Just update the task in its current status array
          return {
            ...prev,
            [newStatus]: prev[newStatus].map(t =>
              t._id === taskId ? updatedTask : t
            )
          }
        }
      })

      // Refresh statistics
      fetchStatistics()

      return updatedTask
    } catch (err) {
      const errorMessage = err.response?.data?.message || err.message || `Failed to update task with ID: ${taskId}`
      setError(errorMessage)
      throw err
    } finally {
      setLoading(false)
    }
  }

  const deleteTask = async (taskId) => {
    try {
      setLoading(true)
      await taskService.deleteTask(taskId)

      // Find the task to get its status before removing
      const taskToDelete = tasks.find(t => t._id === taskId)

      // Update local state
      setTasks(prev => prev.filter(task => task._id !== taskId))

      // Update tasks by status
      if (taskToDelete && taskToDelete.status) {
        setTasksByStatus(prev => ({
          ...prev,
          [taskToDelete.status]: prev[taskToDelete.status].filter(t => t._id !== taskId)
        }))
      }

      // Refresh statistics
      fetchStatistics()
    } catch (err) {
      const errorMessage = err.response?.data?.message || err.message || `Failed to delete task with ID: ${taskId}`
      setError(errorMessage)
      throw err
    } finally {
      setLoading(false)
    }
  }

  const archiveTask = async (taskId) => {
    try {
      setLoading(true)
      await taskService.archiveTask(taskId)

      // Refresh task list and statistics
      fetchTasks()
      fetchStatistics()
    } catch (err) {
      const errorMessage = err.response?.data?.message || err.message || `Failed to archive task with ID: ${taskId}`
      setError(errorMessage)
      throw err
    } finally {
      setLoading(false)
    }
  }

  const restoreTask = async (taskId) => {
    try {
      setLoading(true)
      await taskService.restoreTask(taskId)

      // Refresh task list and statistics
      fetchTasks()
      fetchStatistics()
    } catch (err) {
      const errorMessage = err.response?.data?.message || err.message || `Failed to restore task with ID: ${taskId}`
      setError(errorMessage)
      throw err
    } finally {
      setLoading(false)
    }
  }

  const assignUser = async (taskId, userId) => {
    try {
      setLoading(true)
      const updatedTask = await taskService.assignUser(taskId, userId)

      // Update task in state
      setTasks(prev => prev.map(task =>
        task._id === taskId ? updatedTask : task
      ))

      setTasksByStatus(prev => ({
        ...prev,
        [updatedTask.status]: prev[updatedTask.status].map(t =>
          t._id === taskId ? updatedTask : t
        )
      }))

      return updatedTask
    } catch (err) {
      const errorMessage = err.response?.data?.message || err.message || `Failed to assign user to task with ID: ${taskId}`
      setError(errorMessage)
      throw err
    } finally {
      setLoading(false)
    }
  }

  const unassignUser = async (taskId, userId) => {
    try {
      setLoading(true)
      const updatedTask = await taskService.unassignUser(taskId, userId)

      // Update task in state
      setTasks(prev => prev.map(task =>
        task._id === taskId ? updatedTask : task
      ))

      setTasksByStatus(prev => ({
        ...prev,
        [updatedTask.status]: prev[updatedTask.status].map(t =>
          t._id === taskId ? updatedTask : t
        )
      }))

      return updatedTask
    } catch (err) {
      const errorMessage = err.response?.data?.message || err.message || `Failed to unassign user from task with ID: ${taskId}`
      setError(errorMessage)
      throw err
    } finally {
      setLoading(false)
    }
  }

  const clearError = () => {
    setError(null)
  }

  const value = {
    tasks,
    tasksByStatus,
    statistics,
    loading,
    error,
    fetchTasks,
    getTaskById,
    createTask,
    updateTask,
    deleteTask,
    archiveTask,
    restoreTask,
    assignUser,
    unassignUser,
    fetchStatistics,
    clearError
  }

  return <TaskContext.Provider value={value}>{children}</TaskContext.Provider>
}

export default TaskContext

================
File: src/context/ThemeContext.jsx
================
import { createContext, useState, useEffect, useCallback } from 'react'
import { useAuth } from '../hooks/useAuth'

const ThemeContext = createContext(null)

export const ThemeProvider = ({ children }) => {
  const { currentUser } = useAuth()
  const [theme, setTheme] = useState(() => {
    // First check if there's a theme saved in localStorage
    const savedTheme = localStorage.getItem('theme')
    if (savedTheme) return savedTheme

    // Then check if the user has saved preferences
    if (currentUser?.preferences?.theme) {
      return currentUser.preferences.theme
    }

    // Default is 'system'
    return 'system'
  })

  // Create theme transition overlay
  const createThemeOverlay = useCallback(() => {
    const overlay = document.createElement('div')
    overlay.className = 'theme-transition-overlay'
    document.body.appendChild(overlay)
    return overlay
  }, [])

  // Effect to apply the class to the html element when the theme changes
  useEffect(() => {
    const root = window.document.documentElement
    const overlay = createThemeOverlay()

    // Clear old classes
    root.classList.remove('light-theme', 'dark-theme')

    // Show overlay
    overlay.classList.add('active')

    // Apply theme after a short delay to allow transition
    setTimeout(() => {
      if (theme === 'system') {
        // Check system preference
        const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
        root.classList.add(systemPrefersDark ? 'dark-theme' : 'light-theme')
      } else {
        // Apply specific theme
        root.classList.add(`${theme}-theme`)
      }

      // Hide overlay
      overlay.classList.remove('active')
    }, 50)

    // Cleanup overlay after transition
    setTimeout(() => {
      overlay.remove()
    }, 300)

    // Save to localStorage
    localStorage.setItem('theme', theme)
  }, [theme, createThemeOverlay])

  // Effect to update the theme when system preference changes
  useEffect(() => {
    if (theme === 'system') {
      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)')

      const handleChange = () => {
        const root = window.document.documentElement
        root.classList.remove('light-theme', 'dark-theme')
        root.classList.add(mediaQuery.matches ? 'dark-theme' : 'light-theme')
      }

      // Call handler immediately to set initial state
      handleChange()

      mediaQuery.addEventListener('change', handleChange)
      return () => mediaQuery.removeEventListener('change', handleChange)
    }
  }, [theme])

  // Effect to update the theme when user preferences are loaded/changed
  useEffect(() => {
    if (currentUser?.preferences?.theme && !localStorage.getItem('theme')) {
      setTheme(currentUser.preferences.theme)
    }
  }, [currentUser])

  // Function to toggle between themes
  const toggleTheme = useCallback((newTheme) => {
    setTheme(newTheme)
  }, [])

  // Function to get current effective theme (light/dark)
  const getEffectiveTheme = useCallback(() => {
    if (theme === 'system') {
      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
    }
    return theme
  }, [theme])

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme, getEffectiveTheme }}>
      {children}
    </ThemeContext.Provider>
  )
}

export default ThemeContext

================
File: src/hooks/useAuth.js
================
import { useContext } from 'react'
import AuthContext from '../context/AuthContext'

export const useAuth = () => {
  const context = useContext(AuthContext)

  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider')
  }

  return context
}

================
File: src/hooks/useCalendar.js
================
import { useState, useCallback, useMemo, useEffect } from 'react'
import { useTasks } from './useTasks'
import { formatDateToYYYYMMDD, getMonthDays, getWeekDays, getHoursArray } from '../utils/calenderUtils'

/**
 * Hook for handling calendar-specific operations
 */
export const useCalendar = () => {
  const { tasks, updateTask, fetchTasks, loading, error } = useTasks()
  const [currentDate, setCurrentDate] = useState(new Date())
  const [view, setView] = useState('month') // 'month', 'week', 'day', 'list'
  const [dateRange, setDateRange] = useState({ start: null, end: null })
  const [filters, setFilters] = useState({
    status: [],
    priority: [],
    tags: []
  })

  // Calculate start and end dates based on current view and date
  const calculateDateRange = useCallback((date = currentDate, viewType = view) => {
    const start = new Date(date)
    const end = new Date(date)

    if (viewType === 'month') {
      // Set to first day of month
      start.setDate(1)
      // Set to first day of week containing first day of month
      const dayOfWeek = start.getDay()
      start.setDate(start.getDate() - dayOfWeek)

      // Set to last day of month
      end.setMonth(end.getMonth() + 1)
      end.setDate(0)
      // Set to last day of week containing last day of month
      const endDayOfWeek = end.getDay()
      end.setDate(end.getDate() + (6 - endDayOfWeek))
    } else if (viewType === 'week') {
      // Set to first day of week
      const dayOfWeek = start.getDay()
      start.setDate(start.getDate() - dayOfWeek)

      // Set to last day of week
      end.setDate(end.getDate() - end.getDay() + 6)
    } else if (viewType === 'day') {
      // Start and end are same day, just set hours
      start.setHours(0, 0, 0, 0)
      end.setHours(23, 59, 59, 999)
    } else if (viewType === 'list') {
      // For list view, show tasks from one month ago to two months ahead
      start.setMonth(start.getMonth() - 1)
      start.setDate(1)
      end.setMonth(end.getMonth() + 2)
      end.setDate(0)
    }

    return { start, end }
  }, [currentDate, view])

  // Update date range when view or current date changes
  useEffect(() => {
    const range = calculateDateRange(currentDate, view)
    setDateRange(range)
  }, [currentDate, view, calculateDateRange])

  // Load tasks for the current date range
  const loadTasksForRange = useCallback(async () => {
    const { start, end } = dateRange
    if (!start || !end) return

    const apiFilters = {
      dueStart: start.toISOString(),
      dueEnd: end.toISOString(),
      ...filters
    }

    await fetchTasks(apiFilters)
  }, [fetchTasks, dateRange, filters])

  // Load tasks when date range or filters change
  useEffect(() => {
    if (dateRange.start && dateRange.end) {
      loadTasksForRange()
    }
  }, [dateRange, filters, loadTasksForRange])

  // Navigate to next period
  const goToNext = useCallback(() => {
    setCurrentDate(prevDate => {
      const newDate = new Date(prevDate)

      if (view === 'month') {
        newDate.setMonth(newDate.getMonth() + 1)
      } else if (view === 'week') {
        newDate.setDate(newDate.getDate() + 7)
      } else {
        newDate.setDate(newDate.getDate() + 1)
      }

      return newDate
    })
  }, [view])

  // Navigate to previous period
  const goToPrevious = useCallback(() => {
    setCurrentDate(prevDate => {
      const newDate = new Date(prevDate)

      if (view === 'month') {
        newDate.setMonth(newDate.getMonth() - 1)
      } else if (view === 'week') {
        newDate.setDate(newDate.getDate() - 7)
      } else {
        newDate.setDate(newDate.getDate() - 1)
      }

      return newDate
    })
  }, [view])

  // Go to today
  const goToToday = useCallback(() => {
    setCurrentDate(new Date())
  }, [])

  // Update a task with a new due date (for drag and drop)
  const updateTaskDueDate = useCallback(async (taskId, newDate) => {
    try {
      const dueDate = new Date(newDate)
      await updateTask(taskId, { dueDate: dueDate.toISOString() })
      // Refresh tasks after update
      await loadTasksForRange()
      return true
    } catch (error) {
      console.error('Failed to update task due date:', error)
      return false
    }
  }, [updateTask, loadTasksForRange])

  // Format a date for header display
  const getFormattedHeaderDate = useCallback(() => {
    const options = { month: 'long', year: 'numeric' }
    if (view === 'month') {
      return currentDate.toLocaleDateString('en-US', options)
    } else if (view === 'week') {
      const startOfWeek = new Date(currentDate)
      const dayOfWeek = startOfWeek.getDay()
      startOfWeek.setDate(startOfWeek.getDate() - dayOfWeek)

      const endOfWeek = new Date(startOfWeek)
      endOfWeek.setDate(endOfWeek.getDate() + 6)

      // If start and end are in same month and year
      if (startOfWeek.getMonth() === endOfWeek.getMonth() &&
          startOfWeek.getFullYear() === endOfWeek.getFullYear()) {
        return `${startOfWeek.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}`
      }
      // If start and end are in same year but different months
      else if (startOfWeek.getFullYear() === endOfWeek.getFullYear()) {
        return `${startOfWeek.toLocaleDateString('en-US', { month: 'long' })} - ${endOfWeek.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}`
      }
      // If start and end are in different years
      else {
        return `${startOfWeek.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })} - ${endOfWeek.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}`
      }
    } else if (view === 'day') {
      return currentDate.toLocaleDateString('en-US', {
        weekday: 'long',
        month: 'long',
        day: 'numeric',
        year: 'numeric'
      })
    } else {
      return 'Upcoming Tasks'
    }
  }, [currentDate, view])

  // Format a date key for grouping (YYYY-MM-DD)
  const formatDateKey = useCallback((date) => {
    return formatDateToYYYYMMDD(date)
  }, [])

  // Get calendar days for current view
  const calendarDays = useMemo(() => {
    if (view === 'month') {
      return getMonthDays(currentDate)
    } else if (view === 'week') {
      return getWeekDays(currentDate)
    } else if (view === 'day') {
      return [new Date(currentDate)]
    }
    return []
  }, [currentDate, view])

  // Get hours for day view
  const hours = useMemo(() => {
    return getHoursArray()
  }, [])

  // Filter tasks based on provided filters
  const filteredTasks = useMemo(() => {
    if (!tasks || tasks.length === 0) return []

    return tasks.filter(task => {
      if (!task.dueDate) return false

      // Apply status filters if any are selected
      if (filters.status.length > 0 && !filters.status.includes(task.status)) {
        return false
      }

      // Apply priority filters if any are selected
      if (filters.priority.length > 0 && !filters.priority.includes(task.priority)) {
        return false
      }

      // Apply tag filters if any are selected
      if (filters.tags.length > 0) {
        // If task has no tags or none of its tags match the filter
        if (!task.tags || !task.tags.some(tag => filters.tags.includes(tag))) {
          return false
        }
      }

      return true
    })
  }, [tasks, filters])

  // Group tasks by date
  const tasksByDate = useMemo(() => {
    const grouped = {}

    filteredTasks.forEach(task => {
      if (!task.dueDate) return

      const dateKey = formatDateKey(new Date(task.dueDate))

      if (!grouped[dateKey]) {
        grouped[dateKey] = []
      }

      grouped[dateKey].push(task)
    })

    return grouped
  }, [filteredTasks, formatDateKey])

  // Get tasks for a specific date
  const getTasksForDate = useCallback((date) => {
    const dateKey = formatDateKey(date)
    return tasksByDate[dateKey] || []
  }, [tasksByDate, formatDateKey])

  // Update filters
  const updateFilters = useCallback((newFilters) => {
    setFilters(prev => ({
      ...prev,
      ...newFilters
    }))
  }, [])

  // Clear all filters
  const clearFilters = useCallback(() => {
    setFilters({
      status: [],
      priority: [],
      tags: []
    })
  }, [])

  // Check if a date is today
  const isToday = useCallback((date) => {
    const today = new Date()
    return date.getDate() === today.getDate() &&
      date.getMonth() === today.getMonth() &&
      date.getFullYear() === today.getFullYear()
  }, [])

  // Check if a date is in the current month
  const isCurrentMonth = useCallback((date) => {
    return date.getMonth() === currentDate.getMonth() &&
           date.getFullYear() === currentDate.getFullYear()
  }, [currentDate])

  return {
    currentDate,
    setCurrentDate,
    view,
    setView,
    dateRange,
    calendarDays,
    hours,
    filteredTasks,
    tasksByDate,
    loading,
    error,
    filters,
    goToNext,
    goToPrevious,
    goToToday,
    loadTasksForRange,
    updateTaskDueDate,
    getTasksForDate,
    getFormattedHeaderDate,
    formatDateKey,
    updateFilters,
    clearFilters,
    isToday,
    isCurrentMonth
  }
}

export default useCalendar

================
File: src/hooks/useNotes.js
================
import { useContext } from 'react'
import NoteContext from '../context/NoteContext'

export const useNotes = () => {
  const context = useContext(NoteContext)

  if (!context) {
    throw new Error('useNotes must be used within a NoteProvider')
  }

  return context
}

================
File: src/hooks/useTasks.js
================
import { useContext } from 'react'
import TaskContext from '../context/TaskContext'

export const useTasks = () => {
  const context = useContext(TaskContext)

  if (!context) {
    throw new Error('useTasks must be used within a TaskProvider')
  }

  return context
}

================
File: src/hooks/useTheme.js
================
import { useContext } from 'react'
import ThemeContext from '../context/ThemeContext'

export const useTheme = () => {
  const context = useContext(ThemeContext)

  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider')
  }

  return context
}

================
File: src/main.jsx
================
import React from 'react'
import ReactDOM from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import App from './App.jsx'
import './styles/index.css'
import './styles/themes.css'
import { AuthProvider } from './context/AuthContext.jsx'
import { TaskProvider } from './context/TaskContext.jsx'
import { NoteProvider } from './context/NoteContext.jsx'
import { ThemeProvider } from './context/ThemeContext.jsx'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <AuthProvider>
        <ThemeProvider>
          <TaskProvider>
            <NoteProvider>
              <App />
            </NoteProvider>
          </TaskProvider>
        </ThemeProvider>
      </AuthProvider>
    </BrowserRouter>
  </React.StrictMode>,
)

================
File: src/pages/activities/ActivitiesPage.jsx
================
import { useState, useEffect, useContext } from 'react';
import {
  FiRefreshCw, FiPlus, FiEdit, FiCheckCircle, FiUser,
  FiUserMinus, FiMessageSquare, FiArchive, FiPaperclip,
  FiCalendar, FiActivity, FiSearch, FiGrid, FiList, FiFilter
} from 'react-icons/fi';
import { Link } from 'react-router-dom';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../../components/common/Tabs';
import AuthContext from '../../context/AuthContext'; // Adjust path if needed

import activityService from '../../services/activityService';
import ActivityFilter from '../../components/activity/ActivityFilter';
import ActivityFilters from '../../components/activity/ActivityFilter'; // Import the new component
import UserActivityTimeline from '../../components/activity/UserActivityTimeline';
import Pagination from '../../components/common/Pagination';

// All activity types we want to support in our filters
const ACTIVITY_TYPES = [
  'task_created', 'task_updated', 'task_status_changed', 'task_assigned',
  'task_unassigned', 'task_completed', 'task_reopened', 'task_archived',
  'note_created', 'note_updated', 'note_pinned', 'note_unpinned', 'note_deleted',
  'comment_added', 'profile_updated', 'password_changed', 'avatar_changed',
  'preferences_updated', 'due_date_changed'
];

const ActivitiesPage = () => {
  // Get current user from context
  const { currentUser } = useContext(AuthContext);
  const [activities, setActivities] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [viewMode, setViewMode] = useState('grid'); // 'list' or 'grid'
  const [activeTab, setActiveTab] = useState('all');
  const [pagination, setPagination] = useState({
    page: 1,
    limit: 20,
    total: 0,
    pages: 1
  });

  // User activities states
  const [userActivities, setUserActivities] = useState([]);
  const [userLoading, setUserLoading] = useState(true);
  const [userError, setUserError] = useState(null);
  const [userPagination, setUserPagination] = useState({
    page: 1,
    limit: 20,
    total: 0,
    pages: 1
  });

  // Related activities states
  const [relatedActivities, setRelatedActivities] = useState([]);
  const [relatedLoading, setRelatedLoading] = useState(true);
  const [relatedError, setRelatedError] = useState(null);
  const [relatedPagination, setRelatedPagination] = useState({
    page: 1,
    limit: 20,
    total: 0,
    pages: 1
  });

  // New filter state matching TaskBoard style
  const [selectedFilters, setSelectedFilters] = useState({
    type: [],
    users: [],
    dateRange: null
  });
  const [searchQuery, setSearchQuery] = useState('');
  const [filtersOpen, setFiltersOpen] = useState(false);

  // Fetch activities with the current filters and pagination
  const fetchActivities = async (page = 1) => {
    try {
      setLoading(true);
      setError(null);

      // Prepare params based on filters
      let params = {
        page,
        limit: pagination.limit
      };

      // Add type filters
      if (selectedFilters.type && selectedFilters.type.length > 0) {
        params.type = selectedFilters.type;
      }

      // Add user filters
      if (selectedFilters.users && selectedFilters.users.length > 0) {
        params.users = selectedFilters.users;
      }

      // Add date range filters
      if (selectedFilters.dateRange) {
        if (selectedFilters.dateRange.createdStart) {
          params.createdStart = selectedFilters.dateRange.createdStart;
        }
        if (selectedFilters.dateRange.createdEnd) {
          params.createdEnd = selectedFilters.dateRange.createdEnd;
        }
      }

      // Add search query
      if (searchQuery) {
        params.search = searchQuery;
      }

      // Get all activities with filters and pagination
      const result = await activityService.getActivities(params);

      // Normalize the response to ensure consistent structure
      if (Array.isArray(result)) {
        // If result is an array (direct activities list)
        setActivities(result);
        setPagination(prev => ({
          ...prev,
          page,
          total: result.length,
          pages: 1
        }));
      } else if (result && result.activities) {
        // If result is paginated data
        setActivities(result.activities);
        setPagination({
          page: result.page || 1,
          limit: result.limit || 20,
          total: result.total || 0,
          pages: result.pages || 1
        });
      } else {
        throw new Error('Unexpected response format');
      }
    } catch (err) {
      console.error('Error fetching activities:', err);
      setError(err.message || 'Failed to load activities. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Fetch user activities with filters
  const fetchUserActivities = async (page = 1) => {
    if (!currentUser) return;

    try {
      setUserLoading(true);
      setUserError(null);

      // Prepare params based on filters
      let params = {
        page,
        limit: userPagination.limit
      };

      // Add type filters
      if (selectedFilters.type && selectedFilters.type.length > 0) {
        params.type = selectedFilters.type;
      }

      // Add date range filters
      if (selectedFilters.dateRange) {
        if (selectedFilters.dateRange.createdStart) {
          params.createdStart = selectedFilters.dateRange.createdStart;
        }
        if (selectedFilters.dateRange.createdEnd) {
          params.createdEnd = selectedFilters.dateRange.createdEnd;
        }
      }

      // Add search query
      if (searchQuery) {
        params.search = searchQuery;
      }

      const result = await activityService.getUserActivities(currentUser._id, params);

      // Normalize the response
      if (Array.isArray(result)) {
        setUserActivities(result);
        setUserPagination(prev => ({
          ...prev,
          page,
          total: result.length,
          pages: Math.ceil(result.length / userPagination.limit) || 1
        }));
      } else if (result && result.activities) {
        setUserActivities(result.activities);
        setUserPagination({
          page: result.page || 1,
          limit: result.limit || 20,
          total: result.total || 0,
          pages: result.pages || 1
        });
      } else {
        throw new Error('Unexpected response format');
      }
    } catch (err) {
      console.error('Error fetching user activities:', err);
      setUserError(err.message || 'Failed to load user activities. Please try again.');
    } finally {
      setUserLoading(false);
    }
  };

  // Fetch related activities with filters
  const fetchRelatedActivities = async (page = 1) => {
    if (!currentUser) return;

    try {
      setRelatedLoading(true);
      setRelatedError(null);

      // Prepare params based on filters
      let params = {
        page,
        limit: relatedPagination.limit
      };

      // Add type filters
      if (selectedFilters.type && selectedFilters.type.length > 0) {
        params.type = selectedFilters.type;
      }

      // Add user filters
      if (selectedFilters.users && selectedFilters.users.length > 0) {
        params.users = selectedFilters.users;
      }

      // Add date range filters
      if (selectedFilters.dateRange) {
        if (selectedFilters.dateRange.createdStart) {
          params.createdStart = selectedFilters.dateRange.createdStart;
        }
        if (selectedFilters.dateRange.createdEnd) {
          params.createdEnd = selectedFilters.dateRange.createdEnd;
        }
      }

      // Add search query
      if (searchQuery) {
        params.search = searchQuery;
      }

      const result = await activityService.getUserRelatedActivities(currentUser._id, params);

      // Normalize the response
      if (Array.isArray(result)) {
        setRelatedActivities(result);
        setRelatedPagination(prev => ({
          ...prev,
          page,
          total: result.length,
          pages: Math.ceil(result.length / relatedPagination.limit) || 1
        }));
      } else if (result && result.activities) {
        setRelatedActivities(result.activities);
        setRelatedPagination({
          page: result.page || 1,
          limit: result.limit || 20,
          total: result.total || 0,
          pages: result.pages || 1
        });
      } else {
        throw new Error('Unexpected response format');
      }
    } catch (err) {
      console.error('Error fetching related activities:', err);
      setRelatedError(err.message || 'Failed to load related activities. Please try again.');
    } finally {
      setRelatedLoading(false);
    }
  };

  // Fetch activities based on active tab
  useEffect(() => {
    if (!currentUser) return;

    if (activeTab === 'all') {
      fetchActivities(pagination.page);
    } else if (activeTab === 'me') {
      fetchUserActivities(userPagination.page);
    } else if (activeTab === 'related') {
      fetchRelatedActivities(relatedPagination.page);
    }
  }, [activeTab, selectedFilters, searchQuery, currentUser]);

  // Handle pagination change for all activities
  const handlePageChange = (newPage) => {
    if (newPage !== pagination.page) {
      setPagination(prev => ({ ...prev, page: newPage }));
      fetchActivities(newPage);
    }
  };

  // Handle pagination change for user activities
  const handleUserPageChange = (newPage) => {
    if (newPage !== userPagination.page) {
      setUserPagination(prev => ({ ...prev, page: newPage }));
      fetchUserActivities(newPage);
    }
  };

  // Handle pagination change for related activities
  const handleRelatedPageChange = (newPage) => {
    if (newPage !== relatedPagination.page) {
      setRelatedPagination(prev => ({ ...prev, page: newPage }));
      fetchRelatedActivities(newPage);
    }
  };

  // Clear all filters
  const clearFilters = () => {
    setSelectedFilters({
      type: [],
      users: [],
      dateRange: null
    });
    setSearchQuery('');
  };

  // Handle search input
  const handleSearchChange = (e) => {
    setSearchQuery(e.target.value);
  };

  // Handle search submission
  const handleSearchSubmit = (e) => {
    e.preventDefault();

    // Reset pagination to first page for all tabs
    setPagination(prev => ({ ...prev, page: 1 }));
    setUserPagination(prev => ({ ...prev, page: 1 }));
    setRelatedPagination(prev => ({ ...prev, page: 1 }));

    // Refresh current tab with search query
    if (activeTab === 'all') {
      fetchActivities(1);
    } else if (activeTab === 'me') {
      fetchUserActivities(1);
    } else if (activeTab === 'related') {
      fetchRelatedActivities(1);
    }
  };

  // Activity type configurations for icons and styles
  const activityTypeConfig = {
    task_created: {
      icon: <div className="h-8 w-8 rounded-full bg-green-100 flex items-center justify-center text-green-600">
              <FiPlus className="h-4 w-4" />
            </div>,
      label: 'Task Created'
    },
    task_updated: {
      icon: <div className="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center text-blue-600">
              <FiEdit className="h-4 w-4" />
            </div>,
      label: 'Task Updated'
    },
    task_status_changed: {
      icon: <div className="h-8 w-8 rounded-full bg-amber-100 flex items-center justify-center text-amber-600">
              <FiRefreshCw className="h-4 w-4" />
            </div>,
      label: 'Status Changed'
    },
    task_assigned: {
      icon: <div className="h-8 w-8 rounded-full bg-purple-100 flex items-center justify-center text-purple-600">
              <FiUser className="h-4 w-4" />
            </div>,
      label: 'Task Assigned'
    },
    task_unassigned: {
      icon: <div className="h-8 w-8 rounded-full bg-red-100 flex items-center justify-center text-red-600">
              <FiUserMinus className="h-4 w-4" />
            </div>,
      label: 'User Unassigned'
    },
    comment_added: {
      icon: <div className="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center text-blue-600">
              <FiMessageSquare className="h-4 w-4" />
            </div>,
      label: 'Comment Added'
    },
    task_completed: {
      icon: <div className="h-8 w-8 rounded-full bg-green-100 flex items-center justify-center text-green-600">
              <FiCheckCircle className="h-4 w-4" />
            </div>,
      label: 'Task Completed'
    },
    task_reopened: {
      icon: <div className="h-8 w-8 rounded-full bg-orange-100 flex items-center justify-center text-orange-600">
              <FiRefreshCw className="h-4 w-4" />
            </div>,
      label: 'Task Reopened'
    },
    task_archived: {
      icon: <div className="h-8 w-8 rounded-full bg-gray-100 flex items-center justify-center text-gray-600">
              <FiArchive className="h-4 w-4" />
            </div>,
      label: 'Task Archived'
    },
    attachment_added: {
      icon: <div className="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center text-blue-600">
              <FiPaperclip className="h-4 w-4" />
            </div>,
      label: 'Attachment Added'
    },
    due_date_changed: {
      icon: <div className="h-8 w-8 rounded-full bg-purple-100 flex items-center justify-center text-purple-600">
              <FiCalendar className="h-4 w-4" />
            </div>,
      label: 'Due Date Changed'
    },
  };

  // Format date for display
  const formatDate = (dateString) => {
    if (!dateString) return '';

    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Format relative time (e.g., "2 hours ago")
  const formatRelativeTime = (dateString) => {
    if (!dateString) return '';

    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now - date;
    const diffSec = Math.floor(diffMs / 1000);
    const diffMin = Math.floor(diffSec / 60);
    const diffHour = Math.floor(diffMin / 60);
    const diffDay = Math.floor(diffHour / 24);

    if (diffSec < 60) {
      return 'just now';
    } else if (diffMin < 60) {
      return `${diffMin}m ago`;
    } else if (diffHour < 24) {
      return `${diffHour}h ago`;
    } else if (diffDay < 7) {
      return `${diffDay}d ago`;
    } else {
      return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
    }
  };

  // Render a single activity item
  const renderActivityItem = (activity, isGridMode = false) => {
    const config = activityTypeConfig[activity.type] || {
      icon: <div className="h-8 w-8 rounded-full bg-gray-100 flex items-center justify-center text-gray-600">
              <FiActivity className="h-4 w-4" />
            </div>,
      label: activity.type
    };

    if (isGridMode) {
      // Grid view item
      return (
        <div key={activity._id} className="bg-white rounded-lg border border-gray-200 shadow-sm hover:shadow-md transition-shadow overflow-hidden">
          <div className="p-4">
            <div className="flex items-start mb-3">
              <div className="mr-3 flex-shrink-0">
                {config.icon}
              </div>
              <div className="flex-1">
                <p className="text-sm font-medium text-gray-900 truncate">
                  {activity.description || config.label}
                </p>
                <p className="text-xs text-gray-500 mt-1">
                  {formatRelativeTime(activity.createdAt)}
                </p>
              </div>
            </div>

            {activity.user && (
              <p className="text-xs text-gray-500 mt-2 flex items-center">
                {activity.user.avatar ? (
                  <img
                    src={activity.user.avatar}
                    alt={activity.user.name}
                    className="w-4 h-4 rounded-full mr-1"
                  />
                ) : (
                  <FiUser className="w-3 h-3 mr-1" />
                )}
                {activity.user.name}
              </p>
            )}

            {/* Related task/note links */}
            <div className="mt-3 pt-2 border-t border-gray-100 flex space-x-2 text-xs">
              {activity.task && (
                <Link
                  to={`/tasks/${activity.task}`}
                  className="text-violet-600 hover:text-violet-800 font-medium"
                >
                  View task
                </Link>
              )}

              {activity.note && (
                <Link
                  to={`/notes/${activity.note}`}
                  className="text-violet-600 hover:text-violet-800 font-medium"
                >
                  View note
                </Link>
              )}
            </div>
          </div>
        </div>
      );
    }

    // List view item
    return (
      <div key={activity._id} className="p-6 hover:bg-gray-50 transition-colors">
        <div className="flex items-start">
          <div className="mr-4 flex-shrink-0">
            {config.icon}
          </div>
          <div className="flex-1 min-w-0">
            <p className="text-sm font-medium text-gray-900">
              {activity.description}
            </p>
            <div className="mt-1 flex items-center text-sm text-gray-500">
              <span title={formatDate(activity.createdAt)}>
                {formatRelativeTime(activity.createdAt)}
              </span>
              {activity.user && (
                <span className="ml-2 flex items-center">
                  • By {activity.user.name}
                </span>
              )}
            </div>

            {/* Activity metadata if available */}
            {activity.metadata && Object.keys(activity.metadata).length > 0 && (
              <div className="mt-2 text-sm text-gray-700 bg-gray-50 p-3 rounded-lg">
                {activity.type === 'task_status_changed' && (
                  <p>
                    Changed status from <span className="font-medium">{activity.metadata.oldStatus}</span> to{' '}
                    <span className="font-medium">{activity.metadata.newStatus}</span>
                  </p>
                )}

                {activity.type === 'due_date_changed' && (
                  <p>
                    {activity.metadata.oldDueDate
                      ? `Changed due date from ${formatDate(activity.metadata.oldDueDate)} to ${formatDate(activity.metadata.newDueDate)}`
                      : `Set due date to ${formatDate(activity.metadata.newDueDate)}`}
                  </p>
                )}
              </div>
            )}

            {/* Related task/note links */}
            <div className="mt-2">
              {activity.task && (
                <Link
                  to={`/tasks/${activity.task}`}
                  className="text-sm font-medium text-violet-600 hover:text-violet-700"
                >
                  View task
                </Link>
              )}

              {activity.note && (
                <Link
                  to={`/notes/${activity.note}`}
                  className="text-sm font-medium text-violet-600 hover:text-violet-700 ml-3"
                >
                  View note
                </Link>
              )}
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Activities</h1>
          <p className="text-gray-600">
            Track and view activity history across your workspace
          </p>
        </div>

        <div className="flex flex-col sm:flex-row gap-3">
          {/* Search */}
          <div className="relative">
            <form onSubmit={handleSearchSubmit}>
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <FiSearch className="h-5 w-5 text-gray-400" />
              </div>
              <input
                type="text"
                placeholder="Search activities..."
                className="appearance-none block w-full pl-10 pr-3 py-3.5 border border-gray-300 rounded-xl shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500 text-gray-900"
                value={searchQuery}
                onChange={handleSearchChange}
              />
            </form>
          </div>

          {/* Filter Button */}
          <button
            type="button"
            className={`inline-flex items-center justify-center px-4 py-3.5 border ${
              filtersOpen ? 'bg-violet-600 text-white border-transparent' : 'border-gray-300 text-gray-700 bg-white'
            } rounded-xl font-medium shadow-sm transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500`}
            onClick={() => setFiltersOpen(!filtersOpen)}
          >
            <FiFilter className="mr-2" />
            <span>Filters</span>
            {Object.values(selectedFilters).some(
              filter => Array.isArray(filter) ? filter.length > 0 : !!filter
            ) && (
              <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-violet-100 text-violet-800">
                Active
              </span>
            )}
          </button>

          {/* View mode toggle */}
          <div className="border rounded-xl overflow-hidden flex shadow-sm">
            <button
              onClick={() => setViewMode('list')}
              className={`px-4 py-3.5 ${viewMode === 'list'
                ? 'bg-violet-100 text-violet-700 font-medium'
                : 'bg-white text-gray-500 hover:bg-gray-50'}`}
              title="List view"
            >
              <FiList className="h-5 w-5" />
            </button>
            <button
              onClick={() => setViewMode('grid')}
              className={`px-4 py-3.5 ${viewMode === 'grid'
                ? 'bg-violet-100 text-violet-700 font-medium'
                : 'bg-white text-gray-500 hover:bg-gray-50'}`}
              title="Grid view"
            >
              <FiGrid className="h-5 w-5" />
            </button>
          </div>

          <button
            onClick={() => {
              if (activeTab === 'all') fetchActivities(pagination.page);
              else if (activeTab === 'me') fetchUserActivities(userPagination.page);
              else if (activeTab === 'related') fetchRelatedActivities(relatedPagination.page);
            }}
            className="inline-flex items-center justify-center px-4 py-3.5 border border-transparent rounded-xl shadow-sm text-base font-medium text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500"
          >
            <FiRefreshCw className="mr-2" /> Refresh
          </button>
        </div>
      </div>

      {/* Filters panel - using the expanded TaskFilters style */}
      {filtersOpen && (
        <ActivityFilters
          selectedFilters={selectedFilters}
          setSelectedFilters={setSelectedFilters}
          clearFilters={clearFilters}
          activityTypes={ACTIVITY_TYPES}
        />
      )}

      {/* Tabs for different activity views */}
      <Tabs
        defaultValue="all"
        value={activeTab}
        onValueChange={setActiveTab}
        className="w-full"
      >
        <TabsList className="mb-6">
          <TabsTrigger value="all">All Activities</TabsTrigger>
          <TabsTrigger value="me">My Activities</TabsTrigger>
          <TabsTrigger value="related">Related to Me</TabsTrigger>
        </TabsList>

        <TabsContent value="all" className="mt-0">
          {/* Render activities based on view mode */}
          <div className="bg-white rounded-xl border border-gray-200 shadow-sm overflow-hidden">
            {loading ? (
              // Loading state
              <div className="flex items-center justify-center h-64">
                <div className="w-12 h-12 border-4 border-violet-500 rounded-full border-t-transparent animate-spin"></div>
              </div>
            ) : error ? (
              // Error state
              <div className="p-6 text-center">
                <div className="text-red-500 mb-4">
                  <svg className="h-12 w-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                  </svg>
                </div>
                <p className="text-gray-700 mb-4">{error}</p>
                <button
                  className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500"
                  onClick={() => fetchActivities(pagination.page)}
                >
                  <FiRefreshCw className="mr-2 -ml-1 h-4 w-4" /> Try Again
                </button>
              </div>
            ) : activities.length === 0 ? (
              // Empty state
              <div className="p-12 text-center">
                <svg className="h-16 w-16 mx-auto text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <h3 className="mt-4 text-lg font-medium text-gray-900">No activities found</h3>
                <p className="mt-2 text-gray-500">
                  Try adjusting your filters or search criteria
                </p>
              </div>
            ) : viewMode === 'grid' ? (
              // Grid view
              <div className="p-6 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                {activities.map(activity => renderActivityItem(activity, true))}
              </div>
            ) : (
              // List view
              <div className="divide-y divide-gray-200">
                {activities.map(activity => renderActivityItem(activity, false))}
              </div>
            )}
          </div>

          {/* Pagination */}
          {pagination.pages > 1 && !loading && (
            <div className="mt-6">
              <Pagination
                currentPage={pagination.page}
                totalPages={pagination.pages}
                onPageChange={handlePageChange}
              />
            </div>
          )}
        </TabsContent>

        <TabsContent value="me" className="mt-0">
          {/* My activities tab - now with grid/list views and pagination */}
          <div className="bg-white rounded-xl border border-gray-200 shadow-sm overflow-hidden">
            {userLoading ? (
              // Loading state
              <div className="flex items-center justify-center h-64">
                <div className="w-12 h-12 border-4 border-violet-500 rounded-full border-t-transparent animate-spin"></div>
              </div>
            ) : userError ? (
              // Error state
              <div className="p-6 text-center">
                <div className="text-red-500 mb-4">
                  <svg className="h-12 w-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                  </svg>
                </div>
                <p className="text-gray-700 mb-4">{userError}</p>
                <button
                  className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500"
                  onClick={() => fetchUserActivities(userPagination.page)}
                >
                  <FiRefreshCw className="mr-2 -ml-1 h-4 w-4" /> Try Again
                </button>
              </div>
            ) : userActivities.length === 0 ? (
              // Empty state
              <div className="p-12 text-center">
                <svg className="h-16 w-16 mx-auto text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <h3 className="mt-4 text-lg font-medium text-gray-900">No activities found</h3>
                <p className="mt-2 text-gray-500">
                  You haven't performed any activities yet
                </p>
              </div>
            ) : viewMode === 'grid' ? (
              // Grid view
              <div className="p-6 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                {userActivities.map(activity => renderActivityItem(activity, true))}
              </div>
            ) : (
              // List view
              <div className="divide-y divide-gray-200">
                {userActivities.map(activity => renderActivityItem(activity, false))}
              </div>
            )}
          </div>

          {/* Pagination for user activities */}
          {userPagination.pages > 1 && !userLoading && (
            <div className="mt-6">
              <Pagination
                currentPage={userPagination.page}
                totalPages={userPagination.pages}
                onPageChange={handleUserPageChange}
              />
            </div>
          )}
        </TabsContent>

        <TabsContent value="related" className="mt-0">
          {/* Related activities tab - now with grid/list views and pagination */}
          <div className="bg-white rounded-xl border border-gray-200 shadow-sm overflow-hidden">
            {relatedLoading ? (
              // Loading state
              <div className="flex items-center justify-center h-64">
                <div className="w-12 h-12 border-4 border-violet-500 rounded-full border-t-transparent animate-spin"></div>
              </div>
            ) : relatedError ? (
              // Error state
              <div className="p-6 text-center">
                <div className="text-red-500 mb-4">
                  <svg className="h-12 w-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                  </svg>
                </div>
                <p className="text-gray-700 mb-4">{relatedError}</p>
                <button
                  className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500"
                  onClick={() => fetchRelatedActivities(relatedPagination.page)}
                >
                  <FiRefreshCw className="mr-2 -ml-1 h-4 w-4" /> Try Again
                </button>
              </div>
            ) : relatedActivities.length === 0 ? (
              // Empty state
              <div className="p-12 text-center">
                <svg className="h-16 w-16 mx-auto text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <h3 className="mt-4 text-lg font-medium text-gray-900">No related activities found</h3>
                <p className="mt-2 text-gray-500">
                  There are no activities related to you yet
                </p>
              </div>
            ) : viewMode === 'grid' ? (
              // Grid view
              <div className="p-6 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                {relatedActivities.map(activity => renderActivityItem(activity, true))}
              </div>
            ) : (
              // List view
              <div className="divide-y divide-gray-200">
                {relatedActivities.map(activity => renderActivityItem(activity, false))}
              </div>
            )}
          </div>

          {/* Pagination for related activities */}
          {relatedPagination.pages > 1 && !relatedLoading && (
            <div className="mt-6">
              <Pagination
                currentPage={relatedPagination.page}
                totalPages={relatedPagination.pages}
                onPageChange={handleRelatedPageChange}
              />
            </div>
          )}
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default ActivitiesPage;

================
File: src/pages/auth/ForgotPassword.jsx
================
import { useState } from 'react'
import { Link } from 'react-router-dom'
import { Formik, Form, Field, ErrorMessage } from 'formik'
import * as Yup from 'yup'
import { FiMail, FiArrowLeft, FiCheckCircle, FiArrowRight } from 'react-icons/fi'
import { useAuth } from '../../hooks/useAuth'

const forgotPasswordSchema = Yup.object().shape({
  email: Yup.string()
    .email('Invalid email address')
    .required('Email is required'),
})

const ForgotPassword = () => {
  const { forgotPassword } = useAuth()
  const [isSubmitted, setIsSubmitted] = useState(false)
  const [apiError, setApiError] = useState('')

  const handleSubmit = async (values, { setSubmitting }) => {
    try {
      setApiError('')
      await forgotPassword(values.email)
      setIsSubmitted(true)
    } catch (error) {
      setApiError(error.response?.data?.message || 'Failed to send reset email. Please try again.')
    } finally {
      setSubmitting(false)
    }
  }

  if (isSubmitted) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full space-y-8 bg-white p-10 rounded-xl shadow-sm">
          <div className="text-center">
            <div className="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-green-100">
              <FiCheckCircle className="h-8 w-8 text-green-600" />
            </div>
            <h2 className="mt-6 text-center text-3xl font-bold text-gray-900">
              Check your email
            </h2>
            <p className="mt-2 text-center text-base text-gray-600">
              We've sent a password reset link to your email address. Please check your inbox and follow the instructions.
            </p>
          </div>

          <div className="mt-6 text-center">
            <p className="text-sm text-gray-600">
              Didn't receive the email?{' '}
              <button
                onClick={() => setIsSubmitted(false)}
                className="font-medium text-violet-600 hover:text-violet-500 focus:outline-none"
              >
                Try again
              </button>
            </p>
          </div>

          <div className="mt-6 text-center">
            <Link to="/login" className="inline-flex items-center font-medium text-violet-600 hover:text-violet-500">
              <FiArrowLeft className="mr-1" /> Back to login
            </Link>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen flex">
      {/* Left panel with reset form */}
      <div className="w-full lg:w-1/2 flex flex-col justify-center p-8 md:p-16">
        <div className="max-w-md mx-auto w-full">
          <div className="mb-8">
            <div className="flex items-center mb-6">
              <div className="h-10 w-10 bg-violet-600 rounded-full flex items-center justify-center mr-3">
                <span className="text-white text-xl font-bold">T</span>
              </div>
              <h1 className="text-2xl font-bold text-gray-900">TaskHub</h1>
            </div>
            <h2 className="text-3xl font-bold text-gray-900 mb-2">Reset your password</h2>
            <p className="text-gray-600">
              Enter your email address and we'll send you a link to reset your password.
            </p>
          </div>

          {apiError && (
            <div className="mb-6 p-4 rounded-lg bg-red-50 border border-red-100 text-sm text-red-600">
              {apiError}
            </div>
          )}

          <Formik
            initialValues={{
              email: '',
            }}
            validationSchema={forgotPasswordSchema}
            onSubmit={handleSubmit}
          >
            {({ isSubmitting, errors, touched }) => (
              <Form className="space-y-6">
                <div>
                  <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
                    Email address
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <FiMail className="h-5 w-5 text-gray-400" />
                    </div>
                    <Field
                      id="email"
                      name="email"
                      type="email"
                      autoComplete="email"
                      className={`appearance-none block w-full pl-10 pr-3 py-3.5 border ${
                        errors.email && touched.email ? 'border-red-300 bg-red-50' : 'border-gray-300'
                      } rounded-xl shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500 text-gray-900`}
                      placeholder="Enter your email"
                    />
                  </div>
                  <ErrorMessage name="email" component="div" className="mt-1 text-sm text-red-600" />
                </div>

                <div>
                  <button
                    type="submit"
                    disabled={isSubmitting}
                    className="w-full flex items-center justify-center py-3.5 px-4 border border-transparent rounded-xl shadow-sm text-base font-medium text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500 disabled:opacity-50 transition-colors duration-200"
                  >
                    {isSubmitting ? 'Sending...' : 'Send reset link'}
                    {!isSubmitting && <FiArrowRight className="ml-2" />}
                  </button>
                </div>

                <div className="text-center mt-6">
                  <Link to="/login" className="inline-flex items-center font-medium text-violet-600 hover:text-violet-500">
                    <FiArrowLeft className="mr-1" /> Back to login
                  </Link>
                </div>
              </Form>
            )}
          </Formik>
        </div>
      </div>

      {/* Right panel with background */}
      <div className="hidden lg:flex lg:w-1/2 bg-violet-600 relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-tr from-violet-600 to-violet-800 opacity-90"></div>
        <div className="absolute inset-0 bg-pattern opacity-10"></div>
        <div className="relative z-10 flex flex-col items-center justify-center p-12 text-white">
          <div className="h-24 w-24 rounded-full bg-white flex items-center justify-center mb-8">
            <span className="text-violet-600 text-4xl font-bold">T</span>
          </div>
          <h1 className="text-4xl font-bold mb-6">Password Recovery</h1>
          <p className="text-xl max-w-md text-center mb-8">
            Don't worry - it happens to the best of us. We'll help you get back into your account.
          </p>

          <div className="bg-white/10 backdrop-blur-sm p-6 rounded-xl max-w-lg">
            <h3 className="text-lg font-semibold mb-2">Secure Password Tips</h3>
            <ul className="space-y-2 text-white/90">
              <li className="flex items-start">
                <span className="inline-flex h-5 w-5 items-center justify-center rounded-full bg-white/20 text-xs text-white mr-2 mt-0.5">1</span>
                Use a unique password for each account
              </li>
              <li className="flex items-start">
                <span className="inline-flex h-5 w-5 items-center justify-center rounded-full bg-white/20 text-xs text-white mr-2 mt-0.5">2</span>
                Combine uppercase, lowercase, numbers and special characters
              </li>
              <li className="flex items-start">
                <span className="inline-flex h-5 w-5 items-center justify-center rounded-full bg-white/20 text-xs text-white mr-2 mt-0.5">3</span>
                Never share your password with anyone
              </li>
              <li className="flex items-start">
                <span className="inline-flex h-5 w-5 items-center justify-center rounded-full bg-white/20 text-xs text-white mr-2 mt-0.5">4</span>
                Consider using a password manager
              </li>
            </ul>
          </div>
        </div>
        <div className="absolute bottom-0 left-0 right-0 h-12 bg-gradient-to-t from-violet-800 to-transparent"></div>
      </div>
    </div>
  )
}

export default ForgotPassword

================
File: src/pages/auth/Login.jsx
================
import { useState } from 'react'
import { Link, useNavigate } from 'react-router-dom'
import { Formik, Form, Field, ErrorMessage } from 'formik'
import * as Yup from 'yup'
import { FiMail, FiLock, FiEye, FiEyeOff, FiArrowRight } from 'react-icons/fi'
import { useAuth } from '../../hooks/useAuth'

const loginSchema = Yup.object().shape({
  email: Yup.string()
    .email('Invalid email address')
    .required('Email is required'),
  password: Yup.string()
    .required('Password is required'),
})

const Login = () => {
  const navigate = useNavigate()
  const { login } = useAuth()
  const [showPassword, setShowPassword] = useState(false)
  const [apiError, setApiError] = useState('')

  const handleSubmit = async (values, { setSubmitting }) => {
    try {
      setApiError('')
      await login(values.email, values.password)
      navigate('/dashboard')
    } catch (error) {
      setApiError(error.response?.data?.message || 'Login failed. Please check your credentials.')
    } finally {
      setSubmitting(false)
    }
  }

  return (
    <div className="min-h-screen flex">
      {/* Left panel with login form */}
      <div className="w-full lg:w-1/2 flex flex-col justify-center p-8 md:p-16">
        <div className="max-w-md mx-auto w-full">
          <div className="mb-10">
            <div className="flex items-center mb-6">
              <div className="h-10 w-10 bg-violet-600 rounded-full flex items-center justify-center mr-3">
                <span className="text-white text-xl font-bold">T</span>
              </div>
              <h1 className="text-2xl font-bold text-gray-900">TaskHub</h1>
            </div>
            <h2 className="text-3xl font-bold text-gray-900 mb-2">Welcome back</h2>
            <p className="text-gray-600">
              Please enter your details to sign in
            </p>
          </div>

          {apiError && (
            <div className="mb-6 p-4 rounded-lg bg-red-50 border border-red-100 text-sm text-red-600">
              {apiError}
            </div>
          )}

          <Formik
            initialValues={{
              email: '',
              password: '',
            }}
            validationSchema={loginSchema}
            onSubmit={handleSubmit}
          >
            {({ isSubmitting, errors, touched }) => (
              <Form className="space-y-5">
                <div>
                  <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1.5">Email</label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                      <FiMail className="h-5 w-5 text-gray-400" />
                    </div>
                    <Field
                      id="email"
                      name="email"
                      type="email"
                      autoComplete="email"
                      className={`appearance-none block w-full pl-12 py-3.5 border ${
                        errors.email && touched.email ? 'border-red-300 bg-red-50' : 'border-gray-300'
                      } rounded-xl shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500 text-gray-900`}
                      placeholder="Enter your email"
                    />
                  </div>
                  <ErrorMessage name="email" component="div" className="mt-1.5 text-sm text-red-600" />
                </div>

                <div>
                  <div className="flex items-center justify-between mb-1.5">
                    <label htmlFor="password" className="block text-sm font-medium text-gray-700">Password</label>
                    <Link to="/forgot-password" className="text-sm font-medium text-violet-600 hover:text-violet-500">
                      Forgot password?
                    </Link>
                  </div>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                      <FiLock className="h-5 w-5 text-gray-400" />
                    </div>
                    <Field
                      id="password"
                      name="password"
                      type={showPassword ? 'text' : 'password'}
                      autoComplete="current-password"
                      className={`appearance-none block w-full pl-12 pr-12 py-3.5 border ${
                        errors.password && touched.password ? 'border-red-300 bg-red-50' : 'border-gray-300'
                      } rounded-xl shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500 text-gray-900`}
                      placeholder="Enter your password"
                    />
                    <button
                      type="button"
                      className="absolute inset-y-0 right-0 pr-4 flex items-center text-gray-400 hover:text-gray-600"
                      onClick={() => setShowPassword(!showPassword)}
                    >
                      {showPassword ? <FiEyeOff className="h-5 w-5" /> : <FiEye className="h-5 w-5" />}
                    </button>
                  </div>
                  <ErrorMessage name="password" component="div" className="mt-1.5 text-sm text-red-600" />
                </div>

                <div className="flex items-center">
                  <input
                    id="remember-me"
                    name="remember-me"
                    type="checkbox"
                    className="h-4 w-4 text-violet-600 focus:ring-violet-500 border-gray-300 rounded"
                  />
                  <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-600">
                    Remember me
                  </label>
                </div>

                <div className="pt-2">
                  <button
                    type="submit"
                    disabled={isSubmitting}
                    className="w-full flex items-center justify-center py-3.5 px-4 border border-transparent rounded-xl shadow-sm text-base font-medium text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500 disabled:opacity-50 transition-colors duration-200"
                  >
                    {isSubmitting ? 'Signing in...' : 'Sign in'}
                    {!isSubmitting && <FiArrowRight className="ml-2" />}
                  </button>
                </div>

                <div className="text-center mt-8">
                  <p className="text-sm text-gray-600">
                    Don't have an account?{' '}
                    <Link to="/register" className="font-medium text-violet-600 hover:text-violet-500 transition-colors">
                      Sign up
                    </Link>
                  </p>
                </div>
              </Form>
            )}
          </Formik>
        </div>
      </div>

      {/* Right panel with background image */}
      <div className="hidden lg:block lg:w-1/2 bg-violet-600 relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-br from-violet-500 to-violet-800 opacity-95"></div>
        <div className="absolute inset-0 opacity-10 pattern-dots-xl"></div>
        <div className="relative z-10 flex flex-col items-center justify-center p-12 text-white h-full">
          <div className="max-w-md text-center">
            <h1 className="text-4xl font-bold mb-6">Manage your tasks efficiently</h1>
            <p className="text-xl mb-10 text-white/80">
              TaskHub helps you organize, prioritize, and complete your tasks in a simple and productive way.
            </p>

            <div className="bg-white/10 backdrop-blur-sm p-8 rounded-2xl mt-6">
              <div className="flex justify-between mb-6">
                <div className="text-left">
                  <h3 className="text-lg font-semibold">Your Progress</h3>
                  <p className="text-white/70 text-sm">This week</p>
                </div>
                <div className="bg-violet-700/50 text-white px-3 py-1 rounded-lg text-sm">
                  70%
                </div>
              </div>

              <div className="space-y-4">
                <div>
                  <div className="flex justify-between text-sm mb-1">
                    <span>Completed Tasks</span>
                    <span>18/24</span>
                  </div>
                  <div className="w-full bg-white/20 rounded-full h-2">
                    <div className="bg-white h-2 rounded-full" style={{width: '75%'}}></div>
                  </div>
                </div>

                <div>
                  <div className="flex justify-between text-sm mb-1">
                    <span>Active Projects</span>
                    <span>4/6</span>
                  </div>
                  <div className="w-full bg-white/20 rounded-full h-2">
                    <div className="bg-white h-2 rounded-full" style={{width: '65%'}}></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Login

================
File: src/pages/auth/Register.jsx
================
import { useState } from 'react'
import { Link, useNavigate } from 'react-router-dom'
import { Formik, Form, Field, ErrorMessage } from 'formik'
import * as Yup from 'yup'
import { FiUser, FiMail, FiLock, FiEye, FiEyeOff, FiArrowRight, FiCheckCircle } from 'react-icons/fi'
import { useAuth } from '../../hooks/useAuth'

const registerSchema = Yup.object().shape({
  name: Yup.string()
    .min(2, 'Name is too short')
    .max(100, 'Name is too long')
    .required('Name is required'),
  email: Yup.string()
    .email('Invalid email address')
    .required('Email is required'),
  password: Yup.string()
    .min(8, 'Password must be at least 8 characters')
    .matches(
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=[\]{};':"\\|,.<>/?])/,
      'Password must contain uppercase, lowercase, number and special character'
    )
    .required('Password is required'),
  confirmPassword: Yup.string()
    .oneOf([Yup.ref('password'), null], 'Passwords must match')
    .required('Please confirm your password'),
})

const Register = () => {
  const navigate = useNavigate()
  const { register } = useAuth()
  const [showPassword, setShowPassword] = useState(false)
  const [showConfirmPassword, setShowConfirmPassword] = useState(false)
  const [apiError, setApiError] = useState('')

  const handleSubmit = async (values, { setSubmitting }) => {
    try {
      setApiError('')
      await register({
        name: values.name,
        email: values.email,
        password: values.password,
        confirmPassword: values.confirmPassword,
      })
      navigate('/dashboard')
    } catch (error) {
      setApiError(error.response?.data?.message || 'Failed to register. Please try again.')
    } finally {
      setSubmitting(false)
    }
  }

  return (
    <div className="min-h-screen flex">
      {/* Left panel with registration form */}
      <div className="w-full lg:w-1/2 flex flex-col justify-center p-8 md:p-16">
        <div className="max-w-md mx-auto w-full">
          <div className="mb-8">
            <div className="flex items-center mb-6">
              <div className="h-10 w-10 bg-violet-600 rounded-full flex items-center justify-center mr-3">
                <span className="text-white text-xl font-bold">T</span>
              </div>
              <h1 className="text-2xl font-bold text-gray-900">TaskHub</h1>
            </div>
            <h2 className="text-3xl font-bold text-gray-900 mb-2">Create an account</h2>
            <p className="text-gray-600">
              Let's get started with your free TaskHub account
            </p>
          </div>

          {apiError && (
            <div className="mb-6 p-4 rounded-lg bg-red-50 border border-red-100 text-sm text-red-600">
              {apiError}
            </div>
          )}

          <Formik
            initialValues={{
              name: '',
              email: '',
              password: '',
              confirmPassword: '',
            }}
            validationSchema={registerSchema}
            onSubmit={handleSubmit}
          >
            {({ isSubmitting, errors, touched, values }) => (
              <Form className="space-y-5">
                <div>
                  <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">Full name</label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                      <FiUser className="h-5 w-5 text-gray-400" />
                    </div>
                    <Field
                      id="name"
                      name="name"
                      type="text"
                      autoComplete="name"
                      className={`appearance-none block w-full pl-12 py-3.5 border ${
                        errors.name && touched.name ? 'border-red-300 bg-red-50' : 'border-gray-300'
                      } rounded-xl shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500 text-gray-900`}
                      placeholder="Enter your full name"
                    />
                  </div>
                  <ErrorMessage name="name" component="div" className="mt-1.5 text-sm text-red-600" />
                </div>

                <div>
                  <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">Email address</label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                      <FiMail className="h-5 w-5 text-gray-400" />
                    </div>
                    <Field
                      id="email"
                      name="email"
                      type="email"
                      autoComplete="email"
                      className={`appearance-none block w-full pl-12 py-3.5 border ${
                        errors.email && touched.email ? 'border-red-300 bg-red-50' : 'border-gray-300'
                      } rounded-xl shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500 text-gray-900`}
                      placeholder="Enter your email"
                    />
                  </div>
                  <ErrorMessage name="email" component="div" className="mt-1.5 text-sm text-red-600" />
                </div>

                <div>
                  <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">Password</label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                      <FiLock className="h-5 w-5 text-gray-400" />
                    </div>
                    <Field
                      id="password"
                      name="password"
                      type={showPassword ? 'text' : 'password'}
                      autoComplete="new-password"
                      className={`appearance-none block w-full pl-12 pr-12 py-3.5 border ${
                        errors.password && touched.password ? 'border-red-300 bg-red-50' : 'border-gray-300'
                      } rounded-xl shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500 text-gray-900`}
                      placeholder="Create a password"
                    />
                    <button
                      type="button"
                      className="absolute inset-y-0 right-0 pr-4 flex items-center text-gray-400 hover:text-gray-600"
                      onClick={() => setShowPassword(!showPassword)}
                    >
                      {showPassword ? <FiEyeOff className="h-5 w-5" /> : <FiEye className="h-5 w-5" />}
                    </button>
                  </div>
                  <ErrorMessage name="password" component="div" className="mt-1.5 text-sm text-red-600" />

                  {/* Password strength indicators */}
                  {values.password && (
                    <div className="mt-2 space-y-1">
                      <div className="flex items-center">
                        <FiCheckCircle className={`h-4 w-4 mr-2 ${/^.{8,}$/.test(values.password) ? 'text-green-500' : 'text-gray-300'}`} />
                        <span className="text-xs text-gray-600">At least 8 characters</span>
                      </div>
                      <div className="flex items-center">
                        <FiCheckCircle className={`h-4 w-4 mr-2 ${/[A-Z]/.test(values.password) ? 'text-green-500' : 'text-gray-300'}`} />
                        <span className="text-xs text-gray-600">Contains uppercase letter</span>
                      </div>
                      <div className="flex items-center">
                        <FiCheckCircle className={`h-4 w-4 mr-2 ${/[a-z]/.test(values.password) ? 'text-green-500' : 'text-gray-300'}`} />
                        <span className="text-xs text-gray-600">Contains lowercase letter</span>
                      </div>
                      <div className="flex items-center">
                        <FiCheckCircle className={`h-4 w-4 mr-2 ${/\d/.test(values.password) ? 'text-green-500' : 'text-gray-300'}`} />
                        <span className="text-xs text-gray-600">Contains number</span>
                      </div>
                      <div className="flex items-center">
                        <FiCheckCircle className={`h-4 w-4 mr-2 ${/[!@#$%^&*()_+\-=[\]{};':"\\|,.<>/?]/.test(values.password) ? 'text-green-500' : 'text-gray-300'}`} />
                        <span className="text-xs text-gray-600">Contains special character</span>
                      </div>
                    </div>
                  )}
                </div>

                <div>
                  <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-1">Confirm password</label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                      <FiLock className="h-5 w-5 text-gray-400" />
                    </div>
                    <Field
                      id="confirmPassword"
                      name="confirmPassword"
                      type={showConfirmPassword ? 'text' : 'password'}
                      autoComplete="new-password"
                      className={`appearance-none block w-full pl-12 pr-12 py-3.5 border ${
                        errors.confirmPassword && touched.confirmPassword ? 'border-red-300 bg-red-50' : 'border-gray-300'
                      } rounded-xl shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500 text-gray-900`}
                      placeholder="Confirm your password"
                    />
                    <button
                      type="button"
                      className="absolute inset-y-0 right-0 pr-4 flex items-center text-gray-400 hover:text-gray-600"
                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                    >
                      {showConfirmPassword ? <FiEyeOff className="h-5 w-5" /> : <FiEye className="h-5 w-5" />}
                    </button>
                  </div>
                  <ErrorMessage name="confirmPassword" component="div" className="mt-1.5 text-sm text-red-600" />
                </div>

                <div>
                  <div className="flex items-center">
                    <input
                      id="terms"
                      name="terms"
                      type="checkbox"
                      className="h-4 w-4 text-violet-600 focus:ring-violet-500 border-gray-300 rounded"
                    />
                    <label htmlFor="terms" className="ml-2 block text-sm text-gray-700">
                      I agree to the{' '}
                      <a href="#" className="font-medium text-violet-600 hover:text-violet-500">
                        Terms of Service
                      </a>
                      {' '}and{' '}
                      <a href="#" className="font-medium text-violet-600 hover:text-violet-500">
                        Privacy Policy
                      </a>
                    </label>
                  </div>
                </div>

                <div className="pt-2">
                  <button
                    type="submit"
                    disabled={isSubmitting}
                    className="w-full flex items-center justify-center py-3.5 px-4 border border-transparent rounded-xl shadow-sm text-base font-medium text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500 disabled:opacity-50 transition-colors duration-200"
                  >
                    {isSubmitting ? 'Creating account...' : 'Create account'}
                    {!isSubmitting && <FiArrowRight className="ml-2" />}
                  </button>
                </div>

                <div className="text-center mt-6">
                  <p className="text-sm text-gray-600">
                    Already have an account?{' '}
                    <Link to="/login" className="font-medium text-violet-600 hover:text-violet-500 transition-colors">
                      Sign in
                    </Link>
                  </p>
                </div>
              </Form>
            )}
          </Formik>
        </div>
      </div>

      {/* Right panel with background image */}
      <div className="hidden lg:flex lg:w-1/2 bg-violet-600 relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-tr from-violet-600 to-violet-800 opacity-90"></div>
        <div className="absolute inset-0 bg-pattern opacity-10"></div>
        <div className="relative z-10 flex flex-col items-center justify-center p-12 text-white">
          <div className="h-24 w-24 rounded-full bg-white flex items-center justify-center mb-8">
            <span className="text-violet-600 text-4xl font-bold">T</span>
          </div>
          <h1 className="text-4xl font-bold mb-6">Join TaskHub Today</h1>
          <p className="text-xl max-w-md text-center mb-8">
            Start organizing your projects more efficiently and boost your team's productivity.
          </p>

          <div className="grid grid-cols-2 gap-6 max-w-lg w-full">
            <div className="bg-white/10 backdrop-blur-sm p-6 rounded-xl">
              <h3 className="text-lg font-semibold mb-2">Task Management</h3>
              <p className="text-white/80">Organize tasks with intuitive boards and track progress effortlessly</p>
            </div>
            <div className="bg-white/10 backdrop-blur-sm p-6 rounded-xl">
              <h3 className="text-lg font-semibold mb-2">Team Collaboration</h3>
              <p className="text-white/80">Work together seamlessly with real-time updates and notifications</p>
            </div>
            <div className="bg-white/10 backdrop-blur-sm p-6 rounded-xl">
              <h3 className="text-lg font-semibold mb-2">Note Taking</h3>
              <p className="text-white/80">Capture ideas quickly and organize your thoughts in one place</p>
            </div>
            <div className="bg-white/10 backdrop-blur-sm p-6 rounded-xl">
              <h3 className="text-lg font-semibold mb-2">Analytics</h3>
              <p className="text-white/80">Gain insights into productivity and track project performance</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Register

================
File: src/pages/auth/ResetPassword.jsx
================
import { useState } from 'react'
import { Link, useLocation, useNavigate } from 'react-router-dom'
import { Formik, Form, Field, ErrorMessage } from 'formik'
import * as Yup from 'yup'
import { FiLock, FiEye, FiEyeOff, FiArrowLeft, FiCheckCircle, FiArrowRight } from 'react-icons/fi'
import { useAuth } from '../../hooks/useAuth'

const resetPasswordSchema = Yup.object().shape({
  newPassword: Yup.string()
    .min(8, 'Password must be at least 8 characters')
    .matches(
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=[\]{};':"\\|,.<>/?])/,
      'Password must contain uppercase, lowercase, number and special character'
    )
    .required('Password is required'),
  confirmPassword: Yup.string()
    .oneOf([Yup.ref('newPassword'), null], 'Passwords must match')
    .required('Please confirm your password'),
})

const ResetPassword = () => {
  const location = useLocation()
  const navigate = useNavigate()
  const { resetPassword } = useAuth()
  const [showPassword, setShowPassword] = useState(false)
  const [showConfirmPassword, setShowConfirmPassword] = useState(false)
  const [apiError, setApiError] = useState('')
  const [isSuccess, setIsSuccess] = useState(false)

  const queryParams = new URLSearchParams(location.search)
  const token = queryParams.get('token')

  if (!token) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full space-y-8 bg-white p-10 rounded-xl shadow-sm">
          <div>
            <div className="h-12 w-12 mx-auto rounded-full bg-violet-600 flex items-center justify-center text-white font-bold text-xl">
              T
            </div>
            <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
              Invalid reset link
            </h2>
            <p className="mt-2 text-center text-sm text-gray-600">
              The password reset link is invalid or has expired. Please request a new link.
            </p>
          </div>

          <div className="mt-6 text-center">
            <Link to="/forgot-password" className="w-full inline-flex items-center justify-center py-3 px-4 border border-transparent rounded-xl shadow-sm text-base font-medium text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500 transition-colors">
              Request new reset link
            </Link>
          </div>
        </div>
      </div>
    )
  }

  const handleSubmit = async (values, { setSubmitting }) => {
    try {
      setApiError('')
      await resetPassword(token, values.newPassword, values.confirmPassword)
      setIsSuccess(true)
    } catch (error) {
      setApiError(error.response?.data?.message || 'Failed to reset password. Please try again.')
    } finally {
      setSubmitting(false)
    }
  }

  if (isSuccess) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full space-y-8 bg-white p-10 rounded-xl shadow-sm">
          <div className="text-center">
            <div className="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-green-100">
              <FiCheckCircle className="h-8 w-8 text-green-600" />
            </div>
            <h2 className="mt-6 text-center text-3xl font-bold text-gray-900">
              Password reset successful
            </h2>
            <p className="mt-2 text-center text-base text-gray-600">
              Your password has been reset successfully. You can now login with your new password.
            </p>
          </div>

          <div className="mt-6 text-center">
            <Link to="/login" className="w-full inline-flex items-center justify-center py-3 px-4 border border-transparent rounded-xl shadow-sm text-base font-medium text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500 transition-colors">
              Go to login
            </Link>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen flex">
      {/* Left panel with reset form */}
      <div className="w-full lg:w-1/2 flex flex-col justify-center p-8 md:p-16">
        <div className="max-w-md mx-auto w-full">
          <div className="mb-8">
            <div className="flex items-center mb-6">
              <div className="h-10 w-10 bg-violet-600 rounded-full flex items-center justify-center mr-3">
                <span className="text-white text-xl font-bold">T</span>
              </div>
              <h1 className="text-2xl font-bold text-gray-900">TaskHub</h1>
            </div>
            <h2 className="text-3xl font-bold text-gray-900 mb-2">Set new password</h2>
            <p className="text-gray-600">
              Create a strong password that you don't use for other websites.
            </p>
          </div>

          {apiError && (
            <div className="mb-6 p-4 rounded-lg bg-red-50 border border-red-100 text-sm text-red-600">
              {apiError}
            </div>
          )}

          <Formik
            initialValues={{
              newPassword: '',
              confirmPassword: '',
            }}
            validationSchema={resetPasswordSchema}
            onSubmit={handleSubmit}
          >
            {({ isSubmitting, errors, touched, values }) => (
              <Form className="space-y-6">
                <div>
                  <label htmlFor="newPassword" className="block text-sm font-medium text-gray-700 mb-1">New password</label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                      <FiLock className="h-5 w-5 text-gray-400" />
                    </div>
                    <Field
                      id="newPassword"
                      name="newPassword"
                      type={showPassword ? 'text' : 'password'}
                      autoComplete="new-password"
                      className={`appearance-none block w-full pl-12 pr-12 py-3.5 border ${
                        errors.newPassword && touched.newPassword ? 'border-red-300 bg-red-50' : 'border-gray-300'
                      } rounded-xl shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500 text-gray-900`}
                      placeholder="Create a password"
                    />
                    <button
                      type="button"
                      className="absolute inset-y-0 right-0 pr-4 flex items-center text-gray-400 hover:text-gray-600"
                      onClick={() => setShowPassword(!showPassword)}
                    >
                      {showPassword ? <FiEyeOff className="h-5 w-5" /> : <FiEye className="h-5 w-5" />}
                    </button>
                  </div>
                  <ErrorMessage name="newPassword" component="div" className="mt-1.5 text-sm text-red-600" />

                  {/* Password strength indicators */}
                  {values.newPassword && (
                    <div className="mt-2 space-y-1">
                      <div className="flex items-center">
                        <FiCheckCircle className={`h-4 w-4 mr-2 ${/^.{8,}$/.test(values.newPassword) ? 'text-green-500' : 'text-gray-300'}`} />
                        <span className="text-xs text-gray-600">At least 8 characters</span>
                      </div>
                      <div className="flex items-center">
                        <FiCheckCircle className={`h-4 w-4 mr-2 ${/[A-Z]/.test(values.newPassword) ? 'text-green-500' : 'text-gray-300'}`} />
                        <span className="text-xs text-gray-600">Contains uppercase letter</span>
                      </div>
                      <div className="flex items-center">
                        <FiCheckCircle className={`h-4 w-4 mr-2 ${/[a-z]/.test(values.newPassword) ? 'text-green-500' : 'text-gray-300'}`} />
                        <span className="text-xs text-gray-600">Contains lowercase letter</span>
                      </div>
                      <div className="flex items-center">
                        <FiCheckCircle className={`h-4 w-4 mr-2 ${/\d/.test(values.newPassword) ? 'text-green-500' : 'text-gray-300'}`} />
                        <span className="text-xs text-gray-600">Contains number</span>
                      </div>
                      <div className="flex items-center">
                        <FiCheckCircle className={`h-4 w-4 mr-2 ${/[!@#$%^&*()_+\-=[\]{};':"\\|,.<>/?]/.test(values.newPassword) ? 'text-green-500' : 'text-gray-300'}`} />
                        <span className="text-xs text-gray-600">Contains special character</span>
                      </div>
                    </div>
                  )}
                </div>

                <div>
                  <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-1">Confirm password</label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                      <FiLock className="h-5 w-5 text-gray-400" />
                    </div>
                    <Field
                      id="confirmPassword"
                      name="confirmPassword"
                      type={showConfirmPassword ? 'text' : 'password'}
                      autoComplete="new-password"
                      className={`appearance-none block w-full pl-12 pr-12 py-3.5 border ${
                        errors.confirmPassword && touched.confirmPassword ? 'border-red-300 bg-red-50' : 'border-gray-300'
                      } rounded-xl shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500 text-gray-900`}
                      placeholder="Confirm your password"
                    />
                    <button
                      type="button"
                      className="absolute inset-y-0 right-0 pr-4 flex items-center text-gray-400 hover:text-gray-600"
                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                    >
                      {showConfirmPassword ? <FiEyeOff className="h-5 w-5" /> : <FiEye className="h-5 w-5" />}
                    </button>
                  </div>
                  <ErrorMessage name="confirmPassword" component="div" className="mt-1.5 text-sm text-red-600" />
                </div>

                <div>
                  <button
                    type="submit"
                    disabled={isSubmitting}
                    className="w-full flex items-center justify-center py-3.5 px-4 border border-transparent rounded-xl shadow-sm text-base font-medium text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500 disabled:opacity-50 transition-colors duration-200"
                  >
                    {isSubmitting ? 'Resetting password...' : 'Reset password'}
                    {!isSubmitting && <FiArrowRight className="ml-2" />}
                  </button>
                </div>

                <div className="text-center">
                  <Link to="/login" className="inline-flex items-center font-medium text-violet-600 hover:text-violet-500">
                    <FiArrowLeft className="mr-1" /> Back to login
                  </Link>
                </div>
              </Form>
            )}
          </Formik>
        </div>
      </div>

      {/* Right panel with background */}
      <div className="hidden lg:flex lg:w-1/2 bg-violet-600 relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-tr from-violet-600 to-violet-800 opacity-90"></div>
        <div className="absolute inset-0 bg-pattern opacity-10"></div>
        <div className="relative z-10 flex flex-col items-center justify-center p-12 text-white">
          <div className="h-24 w-24 rounded-full bg-white flex items-center justify-center mb-8">
            <span className="text-violet-600 text-4xl font-bold">T</span>
          </div>
          <h1 className="text-4xl font-bold mb-6">Create a secure password</h1>
          <p className="text-xl max-w-md text-center mb-8">
            Strong passwords are essential for keeping your account and personal information safe.
          </p>

          <div className="bg-white/10 backdrop-blur-sm p-6 rounded-xl max-w-lg">
            <h3 className="text-lg font-semibold mb-2">Password Best Practices</h3>
            <ul className="space-y-2 text-white/90">
              <li className="flex items-start">
                <span className="inline-flex h-5 w-5 items-center justify-center rounded-full bg-white/20 text-xs text-white mr-2 mt-0.5">1</span>
                Create a unique password you don't use elsewhere
              </li>
              <li className="flex items-start">
                <span className="inline-flex h-5 w-5 items-center justify-center rounded-full bg-white/20 text-xs text-white mr-2 mt-0.5">2</span>
                Aim for at least 12 characters for extra security
              </li>
              <li className="flex items-start">
                <span className="inline-flex h-5 w-5 items-center justify-center rounded-full bg-white/20 text-xs text-white mr-2 mt-0.5">3</span>
                Consider using a passphrase that's easy to remember
              </li>
              <li className="flex items-start">
                <span className="inline-flex h-5 w-5 items-center justify-center rounded-full bg-white/20 text-xs text-white mr-2 mt-0.5">4</span>
                Avoid personal information like birthdays or names
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  )
}

export default ResetPassword

================
File: src/pages/dashboard/Dashboard.jsx
================
import { useEffect, useState } from 'react'
import { Link } from 'react-router-dom'
import { FiPlusCircle, FiClock, FiCalendar, FiCheckCircle, FiAlertCircle } from 'react-icons/fi'
import { useTasks } from '../../hooks/useTasks'
import { useAuth } from '../../hooks/useAuth'
import TaskStatisticsCard from '../../components/dashboard/TaskStatisticsCard'
import RecentTasksCard from '../../components/dashboard/RecentTasksCard'
import ActivityFeed from '../../components/dashboard/ActivityFeed'
import activityService from '../../services/activityService'

const Dashboard = () => {
  const { currentUser } = useAuth()
  const { tasks, statistics, loading, fetchTasks, fetchStatistics } = useTasks()
  const [recentActivities, setRecentActivities] = useState([])
  const [loadingActivities, setLoadingActivities] = useState(false)

  useEffect(() => {
    const fetchData = async () => {
      try {
        fetchTasks({ limit: 5 })
        fetchStatistics()

        setLoadingActivities(true)
        const activities = await activityService.getUserActivities(10)
        setRecentActivities(activities)
      } catch (error) {
        console.error('Error fetching dashboard data:', error)
      } finally {
        setLoadingActivities(false)
      }
    }

    fetchData()
  }, [fetchTasks, fetchStatistics])

  const statsCards = [
    {
      title: 'Total Tasks',
      value: statistics?.total || 0,
      icon: <FiPlusCircle className="h-8 w-8 text-blue-600" />,
      color: 'blue',
    },
    {
      title: 'In Progress',
      value: statistics?.byStatus?.inProgress || 0,
      icon: <FiClock className="h-8 w-8 text-amber-600" />,
      color: 'amber',
    },
    {
      title: 'Due Soon',
      value: statistics?.overdue || 0,
      icon: <FiCalendar className="h-8 w-8 text-purple-600" />,
      color: 'purple',
    },
    {
      title: 'Completed',
      value: statistics?.completed || 0,
      icon: <FiCheckCircle className="h-8 w-8 text-green-600" />,
      color: 'green',
    },
  ]

  return (
    <div className="space-y-6">
      {/* Welcome message */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">
            Welcome back, {currentUser?.name?.split(' ')[0]}!
          </h1>
          <p className="text-gray-600">
            Here's what's happening with your tasks today.
          </p>
        </div>
        <Link
          to="/tasks/new"
          className="btn btn-primary"
        >
          <FiPlusCircle className="mr-2" /> New Task
        </Link>
      </div>

      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {statsCards.map((card, index) => (
          <TaskStatisticsCard
            key={index}
            title={card.title}
            value={card.value}
            icon={card.icon}
            color={card.color}
            loading={loading}
          />
        ))}
      </div>

      {/* Tasks and Activity */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Recent Tasks */}
        <div className="lg:col-span-2">
          <RecentTasksCard
            tasks={tasks}
            loading={loading}
          />
        </div>

        {/* Activity Feed */}
        <div>
          <ActivityFeed
            activities={recentActivities}
            loading={loadingActivities}
          />
        </div>
      </div>

      {/* Task by Status Chart */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="card p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Tasks by Status</h3>
          {loading ? (
            <div className="flex items-center justify-center h-60">
              <div className="w-8 h-8 border-4 border-primary-500 border-t-transparent rounded-full animate-spin"></div>
            </div>
          ) : (
            statistics && (
              <div className="grid grid-cols-2 gap-4">
                <div className="flex flex-col items-center justify-center p-4 bg-gray-50 rounded-lg">
                  <span className="text-sm text-gray-500">To Do</span>
                  <span className="text-3xl font-bold text-gray-900">{statistics.byStatus?.todo || 0}</span>
                </div>
                <div className="flex flex-col items-center justify-center p-4 bg-blue-50 rounded-lg">
                  <span className="text-sm text-gray-500">In Progress</span>
                  <span className="text-3xl font-bold text-blue-600">{statistics.byStatus?.inProgress || 0}</span>
                </div>
                <div className="flex flex-col items-center justify-center p-4 bg-amber-50 rounded-lg">
                  <span className="text-sm text-gray-500">In Review</span>
                  <span className="text-3xl font-bold text-amber-600">{statistics.byStatus?.inReview || 0}</span>
                </div>
                <div className="flex flex-col items-center justify-center p-4 bg-green-50 rounded-lg">
                  <span className="text-sm text-gray-500">Done</span>
                  <span className="text-3xl font-bold text-green-600">{statistics.byStatus?.done || 0}</span>
                </div>
              </div>
            )
          )}
        </div>

        <div className="card p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Tasks by Priority</h3>
          {loading ? (
            <div className="flex items-center justify-center h-60">
              <div className="w-8 h-8 border-4 border-primary-500 border-t-transparent rounded-full animate-spin"></div>
            </div>
          ) : (
            statistics && (
              <div className="grid grid-cols-2 gap-4">
                <div className="flex flex-col items-center justify-center p-4 bg-gray-50 rounded-lg">
                  <span className="text-sm text-gray-500">Low</span>
                  <span className="text-3xl font-bold text-gray-600">{statistics.byPriority?.low || 0}</span>
                </div>
                <div className="flex flex-col items-center justify-center p-4 bg-blue-50 rounded-lg">
                  <span className="text-sm text-gray-500">Medium</span>
                  <span className="text-3xl font-bold text-blue-600">{statistics.byPriority?.medium || 0}</span>
                </div>
                <div className="flex flex-col items-center justify-center p-4 bg-orange-50 rounded-lg">
                  <span className="text-sm text-gray-500">High</span>
                  <span className="text-3xl font-bold text-orange-600">{statistics.byPriority?.high || 0}</span>
                </div>
                <div className="flex flex-col items-center justify-center p-4 bg-red-50 rounded-lg">
                  <span className="text-sm text-gray-500">Urgent</span>
                  <span className="text-3xl font-bold text-red-600">{statistics.byPriority?.urgent || 0}</span>
                </div>
              </div>
            )
          )}
        </div>
      </div>
    </div>
  )
}

export default Dashboard

================
File: src/pages/notes/NotesPage.jsx
================
import { useState, useEffect, useCallback } from 'react'
import { Link, useLocation } from 'react-router-dom'
import { useNotes } from '../../hooks/useNotes'
import { useTheme } from '../../hooks/useTheme'
import {
  FiPlus,
  FiGrid,
  FiList,
  FiRefreshCw,
  FiAlertCircle,
  FiInfo,
  FiX,
  FiFilter,
  FiStar,
  FiSearch,
  FiChevronDown,
  FiCalendar,
  FiChevronUp,
  FiClock,
  FiBookmark
} from 'react-icons/fi'
import NoteCard from '../../components/notes/NoteCard'
import NotesFilter from '../../components/notes/NotesFilter'
import NoteModal from '../../components/notes/NoteModal'

const NotesPage = () => {
  const location = useLocation()
  const { notes, loading, error, fetchNotes, clearError } = useNotes()
  const { theme } = useTheme()
  const [viewMode, setViewMode] = useState(localStorage.getItem('notesViewMode') || 'grid') // 'grid' ou 'list'
  const [selectedNote, setSelectedNote] = useState(null)
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [notification, setNotification] = useState(null)
  const [searchTerm, setSearchTerm] = useState('')
  const [filtersOpen, setFiltersOpen] = useState(false)
  const [sortBy, setSortBy] = useState('updatedAt') // 'updatedAt', 'createdAt', 'title'
  const [sortOrder, setSortOrder] = useState('desc') // 'asc' ou 'desc'
  const [pinnedNotesOpen, setPinnedNotesOpen] = useState(true)
  const [otherNotesOpen, setOtherNotesOpen] = useState(true)

  // Separar notas fixadas e não fixadas
  const pinnedNotes = notes.filter(note => note.isPinned)
  const otherNotes = notes.filter(note => !note.isPinned)

  // Aplicar pesquisa em tempo real nas notas (sem filtrar no servidor)
  const filteredPinnedNotes = pinnedNotes.filter(note =>
    searchTerm ?
      note.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      note.content.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (note.tags && note.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase())))
    : true
  )

  const filteredOtherNotes = otherNotes.filter(note =>
    searchTerm ?
      note.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      note.content.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (note.tags && note.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase())))
    : true
  )

  // Ordenar notas
  const sortNotes = (notesToSort) => {
    return [...notesToSort].sort((a, b) => {
      let valueA, valueB;

      // Determinar valores para comparação com base no campo de ordenação
      if (sortBy === 'title') {
        valueA = a.title?.toLowerCase();
        valueB = b.title?.toLowerCase();
      } else if (sortBy === 'createdAt') {
        valueA = new Date(a.createdAt).getTime();
        valueB = new Date(b.createdAt).getTime();
      } else { // updatedAt (padrão)
        valueA = new Date(a.updatedAt).getTime();
        valueB = new Date(b.updatedAt).getTime();
      }

      // Comparar com base na ordem (asc/desc)
      if (sortOrder === 'asc') {
        return valueA > valueB ? 1 : -1;
      } else {
        return valueA < valueB ? 1 : -1;
      }
    });
  }

  const sortedPinnedNotes = sortNotes(filteredPinnedNotes);
  const sortedOtherNotes = sortNotes(filteredOtherNotes);

  // Verificar se existem notificações de redirecionamento
  useEffect(() => {
    if (location.state?.message) {
      setNotification({
        message: location.state.message,
        type: location.state.type || 'info'
      })

      // Limpar estado de localização
      window.history.replaceState({}, document.title)

      // Auto-fechar notificação após 5 segundos
      const timer = setTimeout(() => {
        setNotification(null)
      }, 5000)

      return () => clearTimeout(timer)
    }
  }, [location.state])

  // Persistir modo de visualização
  useEffect(() => {
    localStorage.setItem('notesViewMode', viewMode)
  }, [viewMode])

  // Buscar notas inicialmente
  useEffect(() => {
    fetchNotes()
  }, [fetchNotes])

  // Selecionar nota para edição/visualização
  const handleNoteSelect = useCallback((note) => {
    setSelectedNote(note)
    setIsModalOpen(true)
  }, [])

  // Fechar modal
  const handleCloseModal = useCallback(() => {
    setIsModalOpen(false)
    setSelectedNote(null)
    // Atualizar notas após fechar o modal
    fetchNotes()
  }, [fetchNotes])

  // Fechar notificação
  const dismissNotification = () => {
    setNotification(null)
  }

  // Alternar ordenação ao clicar no mesmo campo
  const handleSortChange = (field) => {
    if (sortBy === field) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
    } else {
      setSortBy(field);
      setSortOrder('desc'); // Nova coluna sempre começa descendente
    }
  };

  // Renderizar ícone de ordenação
  const renderSortIcon = (field) => {
    if (sortBy !== field) return null;

    return sortOrder === 'asc'
      ? <FiChevronUp className="ml-1 h-4 w-4" />
      : <FiChevronDown className="ml-1 h-4 w-4" />;
  };

  return (
    <div className="space-y-6">
      {/* Cabeçalho */}
      <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Notas</h1>
          <p className="text-gray-600">
            Organize suas ideias e informações importantes
          </p>
        </div>
        <div className="flex space-x-2">
          {/* Alterna entre visualização em grade ou lista */}
          <div className="bg-white border border-gray-200 p-1 rounded-lg flex shadow-sm">
            <button
              onClick={() => setViewMode('grid')}
              className={`p-2 rounded-md ${viewMode === 'grid' ? 'bg-violet-100 text-violet-700' : 'text-gray-600 hover:bg-gray-100'}`}
              title="Visualização em grade"
              aria-label="Visualização em grade"
              aria-pressed={viewMode === 'grid'}
            >
              <FiGrid className="h-5 w-5" />
            </button>
            <button
              onClick={() => setViewMode('list')}
              className={`p-2 rounded-md ${viewMode === 'list' ? 'bg-violet-100 text-violet-700' : 'text-gray-600 hover:bg-gray-100'}`}
              title="Visualização em lista"
              aria-label="Visualização em lista"
              aria-pressed={viewMode === 'list'}
            >
              <FiList className="h-5 w-5" />
            </button>
          </div>

          <Link
            to="/notes/new"
            className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500"
          >
            <FiPlus className="mr-2" /> Nova Nota
          </Link>
        </div>
      </div>

      {/* Barra de pesquisa e filtros */}
      <div className="flex flex-col md:flex-row gap-4">
        {/* Barra de pesquisa */}
        <div className="relative flex-grow">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <FiSearch className="h-5 w-5 text-gray-400" />
          </div>
          <input
            type="text"
            placeholder="Pesquisar notas..."
            className="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          {searchTerm && (
            <button
              className="absolute inset-y-0 right-0 pr-3 flex items-center"
              onClick={() => setSearchTerm('')}
            >
              <FiX className="h-5 w-5 text-gray-400 hover:text-gray-600" />
            </button>
          )}
        </div>

        {/* Botão de filtros */}
        <button
          type="button"
          className={`inline-flex items-center px-4 py-2 border ${filtersOpen ? 'bg-violet-600 text-white border-transparent' : 'border-gray-300 text-gray-700 bg-white'} rounded-lg shadow-sm hover:bg-violet-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500`}
          onClick={() => setFiltersOpen(!filtersOpen)}
        >
          <FiFilter className="mr-2" /> Filtros
        </button>

        {/* Dropdown de ordenação */}
        <div className="relative">
          <select
            className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-violet-500 focus:border-violet-500 sm:text-sm rounded-lg"
            value={sortBy}
            onChange={(e) => {
              setSortBy(e.target.value);
              setSortOrder('desc');
            }}
          >
            <option value="updatedAt">Ordenar por: Mais recentes</option>
            <option value="createdAt">Ordenar por: Data de criação</option>
            <option value="title">Ordenar por: Título</option>
          </select>
          <button
            className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none"
            onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}
          >
            {sortOrder === 'asc' ? <FiChevronUp className="h-5 w-5 text-gray-400" /> : <FiChevronDown className="h-5 w-5 text-gray-400" />}
          </button>
        </div>
      </div>

      {/* Painel de filtros */}
      {filtersOpen && <NotesFilter />}

      {/* Notificação */}
      {notification && (
        <div className={`rounded-xl p-4 ${
          notification.type === 'success' ? 'bg-green-50 border border-green-200' :
          notification.type === 'error' ? 'bg-red-50 border border-red-200' :
          'bg-blue-50 border border-blue-200'
        }`}>
          <div className="flex items-start">
            <div className={`flex-shrink-0 ${
              notification.type === 'success' ? 'text-green-600' :
              notification.type === 'error' ? 'text-red-600' :
              'text-blue-600'
            }`}>
              {notification.type === 'success' ? '✓' :
               notification.type === 'error' ? <FiAlertCircle className="h-5 w-5" /> :
               <FiInfo className="h-5 w-5" />}
            </div>
            <div className="ml-3 flex-1 md:flex md:justify-between">
              <p className={`text-sm ${
                notification.type === 'success' ? 'text-green-700' :
                notification.type === 'error' ? 'text-red-700' :
                'text-blue-700'
              }`}>
                {notification.message}
              </p>
              <button
                type="button"
                onClick={dismissNotification}
                className={`ml-3 -mr-1 flex-shrink-0 inline-flex p-1 rounded-md ${
                  notification.type === 'success' ? 'text-green-500 hover:bg-green-100' :
                  notification.type === 'error' ? 'text-red-500 hover:bg-red-100' :
                  'text-blue-500 hover:bg-blue-100'
                }`}
              >
                <span className="sr-only">Fechar</span>
                <FiX className="h-5 w-5" />
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Mensagem de erro */}
      {error && (
        <div className="bg-red-50 border-l-4 border-red-500 p-4 mb-6 rounded-lg">
          <div className="flex">
            <FiAlertCircle className="h-5 w-5 text-red-500 mt-0.5 mr-2" />
            <div className="ml-1">
              <p className="text-sm text-red-700 font-medium">{error}</p>
              <button
                onClick={() => {
                  clearError();
                  fetchNotes();
                }}
                className="mt-2 text-sm text-red-600 hover:text-red-800 font-medium flex items-center"
              >
                <FiRefreshCw className="mr-1 h-4 w-4" /> Tentar novamente
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Estado de carregamento */}
      {loading ? (
        <div className="flex flex-col items-center justify-center py-12">
          <div className="w-12 h-12 border-4 border-violet-500 rounded-full border-t-transparent animate-spin mb-4"></div>
          <p className="text-gray-500">Carregando notas...</p>
        </div>
      ) : notes.length > 0 ? (
        <div className="space-y-6">
          {/* Seção de notas fixadas */}
          {sortedPinnedNotes.length > 0 && (
            <div className="bg-white rounded-xl border border-gray-200 shadow-sm overflow-hidden">
              <div className="px-4 py-3 bg-amber-50 border-b border-amber-100 flex justify-between items-center cursor-pointer"
                   onClick={() => setPinnedNotesOpen(!pinnedNotesOpen)}>
                <div className="flex items-center">
                  <FiStar className="text-amber-500 mr-2" />
                  <h3 className="font-medium text-gray-900">Notas Fixadas</h3>
                  <span className="ml-2 text-xs text-gray-500 bg-white px-2 py-0.5 rounded-full">
                    {sortedPinnedNotes.length}
                  </span>
                </div>
                <button className="text-gray-500">
                  {pinnedNotesOpen ? <FiChevronUp /> : <FiChevronDown />}
                </button>
              </div>

              {pinnedNotesOpen && (
                <div className={viewMode === 'grid'
                  ? "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 p-4"
                  : "divide-y divide-gray-100"
                }>
                  {sortedPinnedNotes.map((note) => (
                    <div key={note._id} className={viewMode === 'list' ? "py-2" : ""}>
                      <NoteCard
                        note={note}
                        onEdit={handleNoteSelect}
                      />
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {/* Seção de outras notas */}
          {sortedOtherNotes.length > 0 && (
            <div className="bg-white rounded-xl border border-gray-200 shadow-sm overflow-hidden">
              <div className="px-4 py-3 bg-gray-50 border-b border-gray-200 flex justify-between items-center cursor-pointer"
                   onClick={() => setOtherNotesOpen(!otherNotesOpen)}>
                <div className="flex items-center">
                  <FiBookmark className="text-gray-500 mr-2" />
                  <h3 className="font-medium text-gray-900">Outras Notas</h3>
                  <span className="ml-2 text-xs text-gray-500 bg-white px-2 py-0.5 rounded-full">
                    {sortedOtherNotes.length}
                  </span>
                </div>
                <button className="text-gray-500">
                  {otherNotesOpen ? <FiChevronUp /> : <FiChevronDown />}
                </button>
              </div>

              {otherNotesOpen && (
                <div className={viewMode === 'grid'
                  ? "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 p-4"
                  : "divide-y divide-gray-100"
                }>
                  {sortedOtherNotes.map((note) => (
                    <div key={note._id} className={viewMode === 'list' ? "py-2" : ""}>
                      <NoteCard
                        note={note}
                        onEdit={handleNoteSelect}
                      />
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {/* Quando não há resultados para a pesquisa, mas há notas no sistema */}
          {filteredPinnedNotes.length === 0 && filteredOtherNotes.length === 0 && searchTerm && (
            <div className="text-center py-10 bg-white rounded-xl border border-gray-200 shadow-sm">
              <FiSearch className="h-12 w-12 text-gray-300 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">Nenhuma nota encontrada</h3>
              <p className="text-gray-600 mb-4">
                Não encontramos nenhuma nota correspondente a "{searchTerm}".
              </p>
              <button
                onClick={() => setSearchTerm('')}
                className="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-violet-500"
              >
                <FiX className="mr-2 h-4 w-4" /> Limpar pesquisa
              </button>
            </div>
          )}
        </div>
      ) : (
        <div className="text-center py-12 bg-white rounded-xl border border-gray-200 shadow-sm">
          <div className="inline-flex items-center justify-center h-16 w-16 rounded-full bg-violet-100 mb-4">
            <FiBookmark className="h-8 w-8 text-violet-600" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">Nenhuma nota encontrada</h3>
          <p className="text-gray-600 mb-6">
            {error ? "Tente ajustar seus filtros ou tente novamente mais tarde." : "Comece criando sua primeira nota."}
          </p>
          <div className="flex justify-center space-x-4">
            {error ? (
              <button
                onClick={() => {
                  clearError();
                  fetchNotes();
                }}
                className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500"
              >
                <FiRefreshCw className="mr-2" /> Tentar novamente
              </button>
            ) : (
              <Link to="/notes/new" className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500">
                <FiPlus className="mr-2" /> Criar Nova Nota
              </Link>
            )}
          </div>
        </div>
      )}

      {/* Modal de Nota */}
      {selectedNote && (
        <NoteModal
          note={selectedNote}
          isOpen={isModalOpen}
          onClose={handleCloseModal}
        />
      )}
    </div>
  )
}

export default NotesPage

================
File: src/pages/NotFound.jsx
================
import { Link } from 'react-router-dom'
import { FiArrowLeft } from 'react-icons/fi'

const NotFound = () => {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full text-center">
        <h1 className="text-9xl font-extrabold text-primary-600">404</h1>
        <h2 className="mt-4 text-3xl font-bold text-gray-900">Page not found</h2>
        <p className="mt-6 text-base text-gray-600">
          Sorry, the page you are looking for doesn't exist or has been moved.
        </p>
        <div className="mt-10">
          <Link
            to="/"
            className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
          >
            <FiArrowLeft className="-ml-1 mr-2 h-5 w-5" />
            Back to home
          </Link>
        </div>
      </div>
    </div>
  )
}

export default NotFound

================
File: src/pages/profile/UserProfile.jsx
================
import { useState, useEffect } from 'react'
import { FiUser, FiSettings, FiPieChart, FiShield, FiAlertTriangle } from 'react-icons/fi'
import { useAuth } from '../../hooks/useAuth'
import ProfileInfo from '../../components/profile/ProfileInfo'
import ProfilePreferences from '../../components/profile/ProfilePreferences'
import ProfileStatistics from '../../components/profile/ProfileStatistics'
import ProfileAccount from '../../components/profile/ProfileAccount'
import userService from '../../services/userService'

const UserProfile = () => {
  const { currentUser, refreshToken } = useAuth()
  const [activeTab, setActiveTab] = useState('info')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)
  const [userStats, setUserStats] = useState(null)
  const [preferences, setPreferences] = useState(currentUser?.preferences || {
    theme: 'system',
    language: 'en-US',
    defaultTaskView: 'board',
    defaultTaskFilter: {
      status: [],
      priority: []
    }
  })

  // Fetch user statistics
  useEffect(() => {
    const fetchUserStats = async () => {
      if (activeTab === 'statistics') {
        try {
          setLoading(true)
          setError(null)
          const response = await userService.getUserStatistics()
          setUserStats(response)
        } catch (err) {
          console.error('Failed to fetch user statistics:', err)
          setError('Unable to load statistics. Please try again later.')
        } finally {
          setLoading(false)
        }
      }
    }

    fetchUserStats()
  }, [activeTab])

  // Handle profile update
  const handleProfileUpdate = async (profileData) => {
    try {
      setLoading(true)
      setError(null)
      const updatedUser = await userService.updateProfile(profileData)

      // Refresh the user session with updated data
      refreshToken()

      return updatedUser
    } catch (err) {
      console.error('Failed to update profile:', err)
      setError(err.message || 'Failed to update profile. Please try again.')
      throw err
    } finally {
      setLoading(false)
    }
  }

  // Handle preferences update
  const handlePreferencesUpdate = async (preferencesData) => {
    try {
      setLoading(true)
      setError(null)
      const updatedUser = await userService.updatePreferences(preferencesData)
      setPreferences(updatedUser.preferences)

      // Refresh the user session with updated data
      refreshToken()

      return updatedUser
    } catch (err) {
      console.error('Failed to update preferences:', err)
      setError(err.message || 'Failed to update preferences. Please try again.')
      throw err
    } finally {
      setLoading(false)
    }
  }

  // Handle avatar update
  const handleAvatarUpdate = async (avatarUrl) => {
    try {
      setLoading(true)
      setError(null)
      const updatedUser = await userService.updateAvatar(avatarUrl)

      // Refresh the user session with updated data
      refreshToken()

      return updatedUser
    } catch (err) {
      console.error('Failed to update avatar:', err)
      setError(err.message || 'Failed to update avatar. Please try again.')
      throw err
    } finally {
      setLoading(false)
    }
  }

  // Handle account deactivation
  const handleDeactivateAccount = async () => {
    try {
      setLoading(true)
      setError(null)
      await userService.deactivateAccount()
      return true
    } catch (err) {
      console.error('Failed to deactivate account:', err)
      setError(err.message || 'Failed to deactivate account. Please try again.')
      throw err
    } finally {
      setLoading(false)
    }
  }

  // Tabs configuration
  const tabs = [
    { id: 'info', label: 'Profile Information', icon: <FiUser className="mr-2" /> },
    { id: 'preferences', label: 'Preferences', icon: <FiSettings className="mr-2" /> },
    { id: 'statistics', label: 'Statistics', icon: <FiPieChart className="mr-2" /> },
    { id: 'account', label: 'Account', icon: <FiShield className="mr-2" /> },
  ]

  return (
    <div className="max-w-6xl mx-auto">
      <h1 className="text-2xl font-bold text-gray-900 mb-6">User Profile</h1>

      {/* Error alert */}
      {error && (
        <div className="mb-6 bg-red-50 border-l-4 border-red-500 p-4 rounded-lg">
          <div className="flex">
            <div className="flex-shrink-0">
              <FiAlertTriangle className="h-5 w-5 text-red-500" />
            </div>
            <div className="ml-3">
              <p className="text-sm text-red-700">{error}</p>
            </div>
          </div>
        </div>
      )}

      <div className="bg-white rounded-xl shadow-sm overflow-hidden mb-6">
        {/* Tabs */}
        <div className="border-b border-gray-200">
          <nav className="flex -mb-px overflow-x-auto">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`
                  flex items-center whitespace-nowrap py-4 px-6 border-b-2 font-medium text-sm
                  ${activeTab === tab.id
                    ? 'border-violet-500 text-violet-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }
                `}
              >
                {tab.icon}
                {tab.label}
              </button>
            ))}
          </nav>
        </div>

        {/* Tab content */}
        <div className="p-6">
          {activeTab === 'info' && (
            <ProfileInfo
              user={currentUser}
              loading={loading}
              onProfileUpdate={handleProfileUpdate}
              onAvatarUpdate={handleAvatarUpdate}
            />
          )}

          {activeTab === 'preferences' && (
            <ProfilePreferences
              preferences={preferences}
              loading={loading}
              onPreferencesUpdate={handlePreferencesUpdate}
            />
          )}

          {activeTab === 'statistics' && (
            <ProfileStatistics
              stats={userStats}
              loading={loading}
            />
          )}

          {activeTab === 'account' && (
            <ProfileAccount
              user={currentUser}
              loading={loading}
              onDeactivateAccount={handleDeactivateAccount}
            />
          )}
        </div>
      </div>
    </div>
  )
}

export default UserProfile

================
File: src/pages/schedule/SchedulePage.jsx
================
import { useState } from 'react'
import { Link } from 'react-router-dom'
import {
  FiChevronLeft,
  FiChevronRight,
  FiCalendar,
  FiGrid,
  FiList,
  FiClock,
  FiPlus,
  FiFilter,
  FiX
} from 'react-icons/fi'
import useCalendar from '../../hooks/useCalendar'
import CalendarMonth from '../../components/schedule/CalendarMonth'
import CalendarWeek from '../../components/schedule/CalendarWeek'
import CalendarDay from '../../components/schedule/CalendarDay'
import ScheduleList from '../../components/schedule/ScheduleList'
import EventModal from '../../components/schedule/EventModal'

const VIEWS = {
  MONTH: 'month',
  WEEK: 'week',
  DAY: 'day',
  LIST: 'list'
}

const SchedulePage = () => {
  const {
    currentDate,
    view,
    setView,
    filteredTasks,
    loading,
    filters,
    goToNext,
    goToPrevious,
    goToToday,
    getFormattedHeaderDate,
    updateFilters,
    clearFilters
  } = useCalendar()

  const [selectedTask, setSelectedTask] = useState(null)
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [isCreating, setIsCreating] = useState(false)
  const [selectedDateForNewEvent, setSelectedDateForNewEvent] = useState(null)
  const [showFilters, setShowFilters] = useState(false)

  // Handler for opening task modal
  const handleTaskClick = (task) => {
    setSelectedTask(task)
    setIsCreating(false)
    setIsModalOpen(true)
  }

  // Handler for creating new task
  const handleDateClick = (date) => {
    setSelectedDateForNewEvent(date)
    setIsCreating(true)
    setSelectedTask(null)
    setIsModalOpen(true)
  }

  // Handler for closing the modal
  const handleCloseModal = () => {
    setIsModalOpen(false)
    setSelectedTask(null)
    setIsCreating(false)
    setSelectedDateForNewEvent(null)
  }

  // Handler for filter change
  const handleFilterChange = (filterType, value) => {
    const currentValues = [...(filters[filterType] || [])]
    const valueIndex = currentValues.indexOf(value)

    let newValues = currentValues
    if (valueIndex === -1) {
      // Add value to filter
      newValues = [...currentValues, value]
    } else {
      // Remove value from filter
      newValues = [...currentValues]
      newValues.splice(valueIndex, 1)
    }

    updateFilters({ [filterType]: newValues })
  }

  // Check if any filters are active
  const hasActiveFilters = Object.values(filters).some(
    filterValues => filterValues && filterValues.length > 0
  )

  return (
    <div className="h-full flex flex-col">
      {/* Header with navigation and view options */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Schedule</h1>
          <p className="text-gray-600">{getFormattedHeaderDate()}</p>
          </div>
        </div>

        <div className="flex flex-wrap items-center gap-2">
          {/* Navigation buttons */}
          <div className="flex rounded-lg border border-gray-300 overflow-hidden">
            <button
              onClick={goToPrevious}
              className="px-3 py-2 border-r border-gray-300 text-gray-700 hover:bg-gray-100"
              aria-label="Previous"
            >
              <FiChevronLeft />
            </button>
            <button
              onClick={goToToday}
              className="px-3 py-2 border-r border-gray-300 text-gray-700 hover:bg-gray-100"
            >
              Today
            </button>
            <button
              onClick={goToNext}
              className="px-3 py-2 text-gray-700 hover:bg-gray-100"
              aria-label="Next"
            >
              <FiChevronRight />
            </button>
          </div>

          {/* View switcher */}
          <div className="bg-gray-100 p-1 rounded-lg flex">
            <button
              onClick={() => setView(VIEWS.MONTH)}
              className={`p-2 rounded-md ${view === VIEWS.MONTH ? 'bg-white shadow-sm' : ''}`}
              title="Month view"
              aria-pressed={view === VIEWS.MONTH}
            >
              <FiCalendar className="h-5 w-5" />
            </button>
            <button
              onClick={() => setView(VIEWS.WEEK)}
              className={`p-2 rounded-md ${view === VIEWS.WEEK ? 'bg-white shadow-sm' : ''}`}
              title="Week view"
              aria-pressed={view === VIEWS.WEEK}
            >
              <FiGrid className="h-5 w-5" />
            </button>
            <button
              onClick={() => setView(VIEWS.DAY)}
              className={`p-2 rounded-md ${view === VIEWS.DAY ? 'bg-white shadow-sm' : ''}`}
              title="Day view"
              aria-pressed={view === VIEWS.DAY}
            >
              <FiClock className="h-5 w-5" />
            </button>
            <button
              onClick={() => setView(VIEWS.LIST)}
              className={`p-2 rounded-md ${view === VIEWS.LIST ? 'bg-white shadow-sm' : ''}`}
              title="List view"
              aria-pressed={view === VIEWS.LIST}
            >
              <FiList className="h-5 w-5" />
            </button>
          </div>

          {/* Filter button */}
          <button
            onClick={() => setShowFilters(!showFilters)}
            className={`inline-flex items-center px-3 py-2 border ${
              showFilters ? 'bg-violet-600 text-white border-transparent' : 'border-gray-300 text-gray-700 bg-white'
            } rounded-lg text-sm font-medium`}
          >
            <FiFilter className="mr-2 h-4 w-4" />
            <span>Filters</span>
            {hasActiveFilters && (
              <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-violet-100 text-violet-800">
                Active
              </span>
            )}
          </button>

          {/* Create button */}
          <Link
            to="/tasks/new"
            className="inline-flex items-center px-3 py-2 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500"
          >
            <FiPlus className="mr-2 h-4 w-4" />
            New Task
          </Link>
      </div>

      {/* Filters panel */}
      {showFilters && (
        <div className="bg-white p-6 rounded-xl border border-gray-200 shadow-sm mb-6">
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-medium">Filter Tasks</h3>
            {hasActiveFilters && (
              <button
                onClick={clearFilters}
                className="text-sm text-violet-600 hover:text-violet-700 font-medium flex items-center"
              >
                <FiX className="mr-1" /> Clear all
              </button>
            )}
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* Status filters */}
            <div>
              <h4 className="text-sm font-medium text-gray-700 mb-2">Status</h4>
              <div className="space-y-2">
                {['todo', 'inProgress', 'inReview', 'done'].map(status => {
                  const isSelected = filters.status?.includes(status)
                  const statusLabel =
                    status === 'todo' ? 'To Do' :
                    status === 'inProgress' ? 'In Progress' :
                    status === 'inReview' ? 'In Review' : 'Done'

                  return (
                    <label
                      key={status}
                      className={`flex items-center p-2 rounded-lg cursor-pointer transition-colors ${
                        isSelected ? 'bg-violet-50 border border-violet-200' : 'hover:bg-gray-50 border border-transparent'
                      }`}
                    >
                      <input
                        type="checkbox"
                        className="h-4 w-4 text-violet-600 rounded border-gray-300 focus:ring-violet-500"
                        checked={isSelected}
                        onChange={() => handleFilterChange('status', status)}
                      />
                      <span className="ml-2 text-sm text-gray-700">{statusLabel}</span>
                    </label>
                  )
                })}
              </div>
            </div>

            {/* Priority filters */}
            <div>
              <h4 className="text-sm font-medium text-gray-700 mb-2">Priority</h4>
              <div className="space-y-2">
                {['low', 'medium', 'high', 'urgent'].map(priority => {
                  const isSelected = filters.priority?.includes(priority)

                  return (
                    <label
                      key={priority}
                      className={`flex items-center p-2 rounded-lg cursor-pointer transition-colors ${
                        isSelected ? 'bg-violet-50 border border-violet-200' : 'hover:bg-gray-50 border border-transparent'
                      }`}
                    >
                      <input
                        type="checkbox"
                        className="h-4 w-4 text-violet-600 rounded border-gray-300 focus:ring-violet-500"
                        checked={isSelected}
                        onChange={() => handleFilterChange('priority', priority)}
                      />
                      <span className="ml-2 text-sm text-gray-700 capitalize">{priority}</span>
                    </label>
                  )
                })}
              </div>
            </div>

            {/* Tags filters */}
            <div>
              <h4 className="text-sm font-medium text-gray-700 mb-2">Common Tags</h4>
              <div className="space-y-2">
                {['important', 'bug', 'feature', 'documentation', 'design'].map(tag => {
                  const isSelected = filters.tags?.includes(tag)

                  return (
                    <label
                      key={tag}
                      className={`flex items-center p-2 rounded-lg cursor-pointer transition-colors ${
                        isSelected ? 'bg-violet-50 border border-violet-200' : 'hover:bg-gray-50 border border-transparent'
                      }`}
                    >
                      <input
                        type="checkbox"
                        className="h-4 w-4 text-violet-600 rounded border-gray-300 focus:ring-violet-500"
                        checked={isSelected}
                        onChange={() => handleFilterChange('tags', tag)}
                      />
                      <span className="ml-2 text-sm text-gray-700">{tag}</span>
                    </label>
                  )
                })}
              </div>
            </div>
          </div>
  </div>
)}

      {/* Calendar View */}
      <div className="flex-1 bg-white rounded-xl border border-gray-200 shadow-sm overflow-hidden">
        {loading ? (
          <div className="flex items-center justify-center h-full">
            <div className="w-12 h-12 border-4 border-violet-500 rounded-full border-t-transparent animate-spin"></div>
          </div>
        ) : (
          <>
            {view === VIEWS.MONTH && (
              <CalendarMonth
                currentDate={currentDate}
                tasks={filteredTasks}
                onTaskClick={handleTaskClick}
                onDateClick={handleDateClick}
              />
            )}
            {view === VIEWS.WEEK && (
              <CalendarWeek
                currentDate={currentDate}
                tasks={filteredTasks}
                onTaskClick={handleTaskClick}
                onDateClick={handleDateClick}
              />
            )}
            {view === VIEWS.DAY && (
              <CalendarDay
                currentDate={currentDate}
                tasks={filteredTasks}
                onTaskClick={handleTaskClick}
                onDateClick={handleDateClick}
              />
            )}
            {view === VIEWS.LIST && (
              <ScheduleList
                currentDate={currentDate}
                tasks={filteredTasks}
                onTaskClick={handleTaskClick}
              />
            )}
          </>
        )}
      </div>

      {/* Task Modal */}
      {isModalOpen && (
        <EventModal
          isOpen={isModalOpen}
          onClose={handleCloseModal}
          task={selectedTask}
          isCreating={isCreating}
          selectedDate={selectedDateForNewEvent}
        />
      )}
    </div>
  )
}

export default SchedulePage

================
File: src/pages/tasks/TaskBoard.jsx
================
import { useState, useEffect, useMemo } from 'react'
import { Link } from 'react-router-dom'
import {
  DndContext,
  DragOverlay,
  closestCorners,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
} from '@dnd-kit/core'
import { sortableKeyboardCoordinates } from '@dnd-kit/sortable'
import {
  FiFilter,
  FiPlus,
  FiChevronDown,
  FiSearch,
} from 'react-icons/fi'
import { useTasks } from '../../hooks/useTasks'
import TaskColumn from '../../components/tasks/TaskColumn'
import TaskCard from '../../components/tasks/TaskCard'
import TaskFilters from '../../components/tasks/TaskFilters'

const TaskBoard = () => {
  const {
    tasksByStatus,
    loading,
    fetchTasks,
    updateTask
  } = useTasks()

  const [filtersOpen, setFiltersOpen] = useState(false)
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedFilters, setSelectedFilters] = useState({
    status: [],
    priority: [],
    assignee: [],
    dueDate: null,
    tags: []
  })
  const [currentDate] = useState(new Date())

  // Local state for tasks to enable optimistic UI updates during drag and drop
  const [localTasksByStatus, setLocalTasksByStatus] = useState({
    todo: [],
    inProgress: [],
    inReview: [],
    done: []
  })

  // State for active drag
  const [activeId, setActiveId] = useState(null)
  const [activeTask, setActiveTask] = useState(null)

  // Configure sensors for drag detection
  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 5, // Start dragging after moving 5px to avoid accidental drags
      },
    }),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  )

  useEffect(() => {
    // Update local state when tasks are fetched
    setLocalTasksByStatus(tasksByStatus)
  }, [tasksByStatus])

  useEffect(() => {
    // Format filters for API request
    const apiFilters = {}

    if (selectedFilters.status.length > 0) {
      apiFilters.status = selectedFilters.status
    }

    if (selectedFilters.priority.length > 0) {
      apiFilters.priority = selectedFilters.priority
    }

    if (selectedFilters.assignee.length > 0) {
      apiFilters.assignee = selectedFilters.assignee[0] // API only supports one assignee filter
    }

    if (selectedFilters.dueDate) {
      if (selectedFilters.dueDate.startDate) {
        apiFilters.dueStart = selectedFilters.dueDate.startDate
      }
      if (selectedFilters.dueDate.endDate) {
        apiFilters.dueEnd = selectedFilters.dueDate.endDate
      }
    }

    if (selectedFilters.tags.length > 0) {
      apiFilters.tags = selectedFilters.tags
    }

    if (searchTerm) {
      apiFilters.search = searchTerm
    }

    // Set default archived filter
    apiFilters.isArchived = false

    // Fetch tasks with filters
    fetchTasks(apiFilters)
  }, [fetchTasks, selectedFilters, searchTerm])

  // Find the container (column) a task belongs to
  const findContainer = (id) => {
    const allStatuses = Object.keys(localTasksByStatus)

    // First, check if the id is a container id (column)
    if (allStatuses.includes(id)) {
      return id
    }

    // Then, find which container has the task
    return allStatuses.find(status =>
      localTasksByStatus[status].some(task => task._id === id)
    )
  }

  // Handle drag start
  const handleDragStart = (event) => {
    const { active } = event
    const id = active.id

    // Find the task being dragged
    const container = findContainer(id)
    const task = localTasksByStatus[container]?.find(t => t._id === id)

    setActiveId(id)
    setActiveTask(task)
  }

  // Handle drag over
  const handleDragOver = (event) => {
    const { active, over } = event

    // If no over target or same target, do nothing
    if (!over || active.id === over.id) {
      return
    }

    const activeContainer = findContainer(active.id)
    const overContainer = findContainer(over.id)

    // If containers are different, we're moving between columns
    if (activeContainer !== overContainer) {
      setLocalTasksByStatus(prev => {
        const activeItems = [...prev[activeContainer]]
        const overItems = [...prev[overContainer]]

        // Find indexes
        const activeIndex = activeItems.findIndex(t => t._id === active.id)
        const overIndex = over.id !== overContainer
          ? overItems.length // if dropping directly on the container, add to end
          : overItems.findIndex(t => t._id === over.id)

        let newIndex

        // If dropping on container, add to end
        if (over.id === overContainer) {
          newIndex = overItems.length
        } else {
          // If over another task, place before or after based on position
          const isBelowOverItem = active.rect.current.translated &&
            active.rect.current.translated.top > over.rect.top + over.rect.height / 2

          newIndex = isBelowOverItem
            ? overIndex + 1
            : overIndex
        }

        // Update the task with new status
        const updatedTask = { ...activeItems[activeIndex], status: overContainer }

        // Create the new state
        return {
          ...prev,
          [activeContainer]: activeItems.filter(t => t._id !== active.id),
          [overContainer]: [
            ...overItems.slice(0, newIndex),
            updatedTask,
            ...overItems.slice(newIndex)
          ]
        }
      })
    }
  }

  // Handle drag end
const handleDragEnd = async (event) => {
  const { active, over } = event;

  // Reset active drag state
  setActiveId(null);
  setActiveTask(null);

  // If no valid drop target, do nothing
  if (!over) return;

  // Find containers
  const activeContainer = findContainer(active.id);
  const overContainer = findContainer(over.id);

  // If we dropped in a different container, update the task status on the server
  if (activeContainer !== overContainer) {
    try {
      await updateTask(active.id, { status: overContainer });
    } catch (error) {
      console.error('Failed to update task status:', error);
      // If the API call fails, revert to server state
      fetchTasks();
    }
  }
};

  // Handle search input change
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value)
  }

  // Clear all filters
  const clearFilters = () => {
    setSelectedFilters({
      status: [],
      priority: [],
      assignee: [],
      dueDate: null,
      tags: []
    })
    setSearchTerm('')
  }

  // Format date for display
  const formatDate = (date) => {
    return date.toLocaleDateString('en-US', {
      weekday: 'long',
      month: 'long',
      day: 'numeric',
      year: 'numeric'
    })
  }

  // Count total tasks
  const totalTasks = Object.values(localTasksByStatus).reduce(
    (sum, tasks) => sum + tasks.length,
    0
  )

  return (
    <div className="h-full flex flex-col">
      {/* Board Header */}
      <div className="flex flex-col md:flex-row md:items-center justify-between mb-8 gap-4">
        <div>
          <div className="flex items-center gap-2">
            <h1 className="text-2xl font-bold text-gray-900">Task Board</h1>
            <div className="flex items-center text-sm text-gray-500">
              <span>• Daily Tasks</span>
              <FiChevronDown size={16} className="ml-1" />
            </div>
          </div>
          <p className="text-gray-600 mt-1">{formatDate(currentDate)}</p>
        </div>

        <div className="flex flex-col sm:flex-row gap-3">
          {/* Search */}
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <FiSearch className="h-5 w-5 text-gray-400" />
            </div>
            <input
              type="text"
              placeholder="Search tasks..."
              className="appearance-none block w-full pl-10 pr-3 py-3.5 border border-gray-300 rounded-xl shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500 text-gray-900"
              value={searchTerm}
              onChange={handleSearchChange}
            />
          </div>

          {/* Filter Button */}
          <button
            type="button"
            className={`inline-flex items-center justify-center px-4 py-3.5 border ${
              filtersOpen ? 'bg-violet-600 text-white border-transparent' : 'border-gray-300 text-gray-700 bg-white'
            } rounded-xl font-medium shadow-sm transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500`}
            onClick={() => setFiltersOpen(!filtersOpen)}
          >
            <FiFilter className="mr-2" />
            <span>Filters</span>
            {Object.values(selectedFilters).some(
              filter => Array.isArray(filter) ? filter.length > 0 : !!filter
            ) && (
              <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-violet-100 text-violet-800">
                Active
              </span>
            )}
          </button>

          {/* Create Task Button */}
          <Link
            to="/tasks/new"
            className="inline-flex items-center justify-center px-4 py-3.5 border border-transparent rounded-xl shadow-sm text-base font-medium text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500"
          >
            <FiPlus className="mr-2" />
            <span>Create task</span>
          </Link>
        </div>
      </div>

      {/* Filters panel */}
      {filtersOpen && (
        <TaskFilters
          selectedFilters={selectedFilters}
          setSelectedFilters={setSelectedFilters}
          clearFilters={clearFilters}
        />
      )}

      {/* Tasks count and sorting */}
      <div className="flex items-center justify-between mb-6">
        <div className="text-sm text-gray-600">
          {loading ? (
            <span>Loading tasks...</span>
          ) : (
            <span>{totalTasks} tasks</span>
          )}
        </div>

        <div className="flex items-center gap-2">
          <span className="text-sm text-gray-600">Sort:</span>
          <select className="pl-3 pr-8 py-2 border border-gray-300 rounded-lg text-gray-700 sm:text-sm focus:outline-none focus:ring-violet-500 focus:border-violet-500">
            <option value="dueDate">Due date</option>
            <option value="priority">Priority</option>
            <option value="createdAt">Created date</option>
            <option value="title">Title</option>
          </select>
        </div>
      </div>

      {/* Task Board with Drag and Drop */}
      <DndContext
        sensors={sensors}
        collisionDetection={closestCorners}
        onDragStart={handleDragStart}
        onDragOver={handleDragOver}
        onDragEnd={handleDragEnd}
      >
        <div className="flex-1 flex gap-6 pb-6 overflow-auto">
          {/* To Do Column */}
          <TaskColumn
            id="todo"
            title="Todo list"
            tasks={localTasksByStatus.todo || []}
            status="todo"
            color="gray"
            loading={loading}
          />

          {/* In Progress Column */}
          <TaskColumn
            id="inProgress"
            title="In Progress"
            tasks={localTasksByStatus.inProgress || []}
            status="inProgress"
            color="blue"
            loading={loading}
          />

          {/* In Review Column */}
          <TaskColumn
            id="inReview"
            title="In Review"
            tasks={localTasksByStatus.inReview || []}
            status="inReview"
            color="amber"
            loading={loading}
          />

          {/* Done Column */}
          <TaskColumn
            id="done"
            title="Done"
            tasks={localTasksByStatus.done || []}
            status="done"
            color="green"
            loading={loading}
          />

          {/* Drag Overlay - shows the task being dragged */}
          <DragOverlay>
            {activeId && activeTask ? (
              <div className="w-72 opacity-80">
                <TaskCard task={activeTask} isDragging />
              </div>
            ) : null}
          </DragOverlay>
        </div>
      </DndContext>
    </div>
  )
}

export default TaskBoard

================
File: src/pages/tasks/TaskDetail.jsx
================
import { useState, useEffect } from 'react'
import { useParams, useNavigate, Link } from 'react-router-dom'
import {
  FiArrowLeft,
  FiEdit2,
  FiTrash2,
  FiCalendar,
  FiClock,
  FiArchive,
  FiAlertTriangle
} from 'react-icons/fi'
import { useTasks } from '../../hooks/useTasks'
import { useAuth } from '../../hooks/useAuth'
import DeleteConfirmationModal from '../../components/common/DeleteConfirmationModal'

const TaskDetail = () => {
  const { id } = useParams()
  const navigate = useNavigate()
  const { currentUser } = useAuth()
  const { getTaskById, updateTask, deleteTask, archiveTask, restoreTask } = useTasks()

  const [task, setTask] = useState(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [editMode, setEditMode] = useState(false)
  const [comments, setComments] = useState([])
  const [activities, setActivities] = useState([])
  const [activeTab, setActiveTab] = useState('details')

  // Estado para o modal de confirmação de exclusão
  const [deleteModalOpen, setDeleteModalOpen] = useState(false)
  const [isDeleting, setIsDeleting] = useState(false)

  useEffect(() => {
    let isMounted = true;  // Flag to prevent state updates if component unmounts

    const fetchTaskData = async () => {
      try {
        setLoading(true)
        const taskData = await getTaskById(id)

        // Only update state if component is still mounted
        if (isMounted) {
          setTask(taskData)
          // In a real application, you would fetch comments and activities
          // for this task from the API
          setComments(taskData.comments || [])
          setActivities([])
        }
      } catch (err) {
        if (isMounted) {
          setError(err.message || 'Failed to fetch task details')
        }
      } finally {
        if (isMounted) {
          setLoading(false)
        }
      }
    }

    if (id) {
      fetchTaskData()
    }

    // Cleanup function to prevent state updates after unmount
    return () => {
      isMounted = false
    }
  }, [id, getTaskById])

  const handleStatusChange = async (newStatus) => {
    if (!task) return

    try {
      const updatedTask = await updateTask(task._id, { status: newStatus })
      setTask(updatedTask)
    } catch (err) {
      console.error('Failed to update task status:', err)
    }
  }

  // Abrir o modal de confirmação de exclusão
  const openDeleteModal = () => {
    setDeleteModalOpen(true)
  }

  // Fechar o modal de confirmação de exclusão
  const closeDeleteModal = () => {
    setDeleteModalOpen(false)
  }

  // Executar a exclusão após a confirmação
  const handleDeleteConfirm = async () => {
    if (!task) return

    try {
      setIsDeleting(true)
      await deleteTask(task._id)
      navigate('/tasks')
    } catch (err) {
      console.error('Failed to delete task:', err)
      setIsDeleting(false)
      setDeleteModalOpen(false)
    }
  }

  const handleArchiveToggle = async () => {
    if (!task) return

    try {
      let updatedTask

      if (task.isArchived) {
        updatedTask = await restoreTask(task._id)
      } else {
        updatedTask = await archiveTask(task._id)
      }

      setTask(updatedTask)
    } catch (err) {
      console.error('Failed to toggle archive status:', err)
    }
  }

  // Format date for display
  const formatDate = (dateString) => {
    if (!dateString) return 'Not set'

    const date = new Date(dateString)
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })
  }

  // Determine if task is overdue
  const isOverdue = () => {
    if (!task?.dueDate) return false

    const dueDate = new Date(task.dueDate)
    const today = new Date()
    today.setHours(0, 0, 0, 0)

    const taskDate = new Date(dueDate)
    taskDate.setHours(0, 0, 0, 0)

    return taskDate < today && task.status !== 'done'
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[50vh]">
        <div className="w-12 h-12 border-4 border-violet-500 rounded-full border-t-transparent animate-spin"></div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="bg-red-50 border-l-4 border-red-500 p-4 my-4 rounded-lg">
        <div className="flex">
          <div className="flex-shrink-0">
            <FiAlertTriangle className="h-5 w-5 text-red-500" />
          </div>
          <div className="ml-3">
            <p className="text-sm text-red-700">{error}</p>
            <div className="mt-2">
              <Link to="/tasks" className="text-red-700 hover:text-red-600 font-medium">
                Back to tasks
              </Link>
            </div>
          </div>
        </div>
      </div>
    )
  }

  if (!task) {
    return (
      <div className="my-4 text-center">
        <h3 className="text-lg font-medium text-gray-900">Task not found</h3>
        <p className="mt-1 text-gray-500">
          The task you're looking for doesn't exist or has been removed.
        </p>
        <div className="mt-4">
          <Link to="/tasks" className="inline-flex items-center justify-center px-4 py-2 border border-transparent rounded-xl shadow-sm text-sm font-medium text-white bg-violet-600 hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500">
            Back to tasks
          </Link>
        </div>
      </div>
    )
  }

  // Status options
  const statusOptions = [
    { value: 'todo', label: 'To Do', color: 'bg-gray-100 text-gray-800' },
    { value: 'inProgress', label: 'In Progress', color: 'bg-blue-100 text-blue-800' },
    { value: 'inReview', label: 'In Review', color: 'bg-amber-100 text-amber-800' },
    { value: 'done', label: 'Done', color: 'bg-green-100 text-green-800' },
  ]

  // Priority options with colors
  const priorityColors = {
    low: 'text-gray-700',
    medium: 'text-blue-700',
    high: 'text-orange-700',
    urgent: 'text-red-700',
  }

  return (
    <div>
      {/* Task Header */}
      <div className="mb-8">
        <div className="flex items-center mb-4">
          <Link to="/tasks" className="text-gray-500 hover:text-gray-700 mr-4">
            <FiArrowLeft className="h-5 w-5" />
          </Link>
          <h1 className="text-2xl font-bold text-gray-900 mr-4">{task.title}</h1>
          <div className="flex space-x-3 ml-auto">
            <button
              type="button"
              onClick={() => navigate(`/tasks/${id}/edit`)}
              className="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-xl text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-violet-500"
            >
              <FiEdit2 className="mr-2" /> Edit
            </button>
            <button
              type="button"
              onClick={handleArchiveToggle}
              className="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-xl text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-violet-500"
            >
              <FiArchive className="mr-2" /> {task.isArchived ? 'Restore' : 'Archive'}
            </button>
            <button
              type="button"
              onClick={openDeleteModal}
              className="inline-flex items-center px-4 py-2 border border-red-300 shadow-sm text-sm font-medium rounded-xl text-red-600 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-red-500"
            >
              <FiTrash2 className="mr-2" /> Delete
            </button>
          </div>
        </div>

        {/* Status and Priority */}
        <div className="flex flex-wrap gap-4 mb-4">
          <div className="flex items-center">
            <span className="text-sm text-gray-500 mr-2">Status:</span>
            <div className="relative inline-block">
              <select
                value={task.status}
                onChange={(e) => handleStatusChange(e.target.value)}
                className="appearance-none py-1 pl-3 pr-8 rounded-full text-sm font-medium focus:outline-none focus:ring-2 focus:ring-violet-500 cursor-pointer"
                style={{
                  backgroundColor:
                    task.status === 'todo' ? '#f3f4f6' :
                    task.status === 'inProgress' ? '#dbeafe' :
                    task.status === 'inReview' ? '#fef3c7' :
                    '#dcfce7',
                  color:
                    task.status === 'todo' ? '#1f2937' :
                    task.status === 'inProgress' ? '#1e40af' :
                    task.status === 'inReview' ? '#92400e' :
                    '#166534',
                }}
              >
                {statusOptions.map(option => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </select>
              <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                <svg className="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                  <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                </svg>
              </div>
            </div>
          </div>

          <div className="flex items-center">
            <span className="text-sm text-gray-500 mr-2">Priority:</span>
            <span className={`capitalize font-medium ${priorityColors[task.priority] || 'text-gray-700'}`}>
              {task.priority}
            </span>
          </div>

          {/* Due Date */}
          {task.dueDate && (
            <div className="flex items-center">
              <FiCalendar className={`mr-1 ${isOverdue() ? 'text-red-500' : 'text-gray-500'}`} />
              <span className={`text-sm ${isOverdue() ? 'text-red-600 font-medium' : 'text-gray-700'}`}>
                Due: {formatDate(task.dueDate)}
                {isOverdue() && (
                  <span className="ml-1 text-red-600">
                    (Overdue)
                  </span>
                )}
              </span>
            </div>
          )}

          {/* Estimated Hours */}
          {task.estimatedHours && (
            <div className="flex items-center">
              <FiClock className="mr-1 text-gray-500" />
              <span className="text-sm text-gray-700">
                {task.estimatedHours} hours
              </span>
            </div>
          )}
        </div>
      </div>

      {/* Resto do conteúdo do componente */}
      {/* ... */}

      {/* Delete Confirmation Modal */}
      <DeleteConfirmationModal
        isOpen={deleteModalOpen}
        onClose={closeDeleteModal}
        onConfirm={handleDeleteConfirm}
        title="Delete Task"
        message="Are you sure you want to delete this task? This action cannot be undone."
        itemName={task.title}
        itemType="task"
        isDeleting={isDeleting}
      />
    </div>
  )
}

export default TaskDetail

================
File: src/routes.jsx
================
import { Navigate } from 'react-router-dom'
import MainLayout from './components/layout/MainLayout'
import Login from './pages/auth/Login'
import Register from './pages/auth/Register'
import ForgotPassword from './pages/auth/ForgotPassword'
import ResetPassword from './pages/auth/ResetPassword'
import Dashboard from './pages/dashboard/Dashboard'
import TaskBoard from './pages/tasks/TaskBoard'
import TaskDetail from './pages/tasks/TaskDetail'
import TaskEdit from './components/tasks/TaskEdit'
import NotePage from './pages/notes/NotesPage'
import NotesDetail from './components/notes/NotesDetail'
import NoteForm from './components/notes/NoteForm'
import UserProfile from './pages/profile/UserProfile'
import SchedulePage from './pages/schedule/SchedulePage'
import ActivitiesPage from './pages/activities/ActivitiesPage'
import NotFound from './pages/NotFound'

const routes = (isAuthenticated) => [
  {
    path: '/',
    element: isAuthenticated ? <MainLayout /> : <Navigate to="/login" />,
    children: [
      { path: '/', element: <Navigate to="/tasks" /> },
      { path: 'dashboard', element: <Dashboard /> },
      { path: 'tasks', element: <TaskBoard /> },
      { path: 'tasks/new', element: <TaskEdit /> },
      { path: 'tasks/:id', element: <TaskDetail /> },
      { path: 'tasks/:id/edit', element: <TaskEdit /> },
      { path: 'notes', element: <NotePage /> },
      { path: 'notes/new', element: <NoteForm /> },
      { path: 'notes/:id', element: <NotesDetail /> },
      { path: 'notes/:id/edit', element: <NoteForm /> },
      { path: 'schedule', element: <SchedulePage /> },
      { path: 'activities', element: <ActivitiesPage /> },
      { path: 'profile', element: <UserProfile /> },
      { path: '*', element: <NotFound /> }
    ]
  },
  {
    path: '/',
    element: !isAuthenticated ? <Navigate to="/login" /> : <Navigate to="/tasks" />,
  },
  {
    path: '/login',
    element: !isAuthenticated ? <Login /> : <Navigate to="/tasks" />
  },
  {
    path: '/register',
    element: !isAuthenticated ? <Register /> : <Navigate to="/tasks" />
  },
  {
    path: '/forgot-password',
    element: !isAuthenticated ? <ForgotPassword /> : <Navigate to="/tasks" />
  },
  {
    path: '/reset-password',
    element: !isAuthenticated ? <ResetPassword /> : <Navigate to="/tasks" />
  },
  {
    path: '*',
    element: <NotFound />
  }
]

export default routes

================
File: src/services/activityService.js
================
import apiClient from '../config/axios';

const activityService = {
  /**
   * Get recent activities for the logged-in user
   * @param {number} limit - Maximum number of activities to fetch
   * @returns {Promise<Array>} - Array of user activities
   */
  getUserRecentActivities: async (limit = 20) => {
    try {
      const params = new URLSearchParams();
      if (limit) params.append('limit', limit);

      console.log('Fetching recent user activities');
      // Using the same endpoint as in your original activityService.js
      const response = await apiClient.get(`/activities/user/recent?&limit=${limit}`);
      console.log('User activities response:', response.data);

      // Handle the response based on your API structure
      return response.data.data || response.data || [];
    } catch (error) {
      console.error('Error fetching user activities:', error);

      // Provide detailed error info for debugging
      if (error.response) {
        console.error('Response status:', error.response.status);
        console.error('Response data:', error.response.data);
      }

      throw error.response?.data?.message || 'Failed to fetch recent activities';
    }
  },

  /**
   * Get task history - activities related to a specific task
   * @param {string} taskId - ID of the task
   * @param {number} limit - Maximum number of activities to fetch
   * @returns {Promise<Array>} - Array of task activities
   */
  getTaskHistory: async (taskId, limit = 20) => {
    try {
      const params = new URLSearchParams();
      if (limit) params.append('limit', limit);

      console.log(`Fetching activities for task ${taskId}`);
      // Based on your activity.service.ts, which uses a task field filter
      const response = await apiClient.get(`/activities?task=${taskId}&limit=${limit}`);
      console.log('Task activities response:', response.data);

      return response.data.data?.activities || response.data.data || response.data || [];
    } catch (error) {
      console.error(`Error fetching activities for task ${taskId}:`, error);

      if (error.response) {
        console.error('Response status:', error.response.status);
        console.error('Response data:', error.response.data);
      }

      throw error.response?.data?.message || `Failed to fetch activities for task ${taskId}`;
    }
  },

  /**
   * Get note history - activities related to a specific note
   * @param {string} noteId - ID of the note
   * @param {number} limit - Maximum number of activities to fetch
   * @returns {Promise<Array>} - Array of note activities
   */
  getNoteHistory: async (noteId, limit = 20) => {
    try {
      const params = new URLSearchParams();
      if (limit) params.append('limit', limit);

      console.log(`Fetching activities for note ${noteId}`);
      // Based on your activity.service.ts, which uses a note field filter
      const response = await apiClient.get(`/activities?note=${noteId}&limit=${limit}`);
      console.log('Note activities response:', response.data);

      return response.data.data?.activities || response.data.data || response.data || [];
    } catch (error) {
      console.error(`Error fetching activities for note ${noteId}:`, error);

      if (error.response) {
        console.error('Response status:', error.response.status);
        console.error('Response data:', error.response.data);
      }

      throw error.response?.data?.message || `Failed to fetch activities for note ${noteId}`;
    }
  },

  /**
   * Get activities performed by a specific user
   * @param {string} userId - ID of the user
   * @param {number} limit - Maximum number of activities to fetch
   * @returns {Promise<Array>} - Array of user activities
   */
  getUserActivities: async (userId, limit = 20) => {
    try {
      const params = new URLSearchParams();
      if (limit) params.append('limit', limit);

      console.log(`Fetching activities by user ${userId}`);
      // Based on your activity.service.ts, which filters by user field
      const response = await apiClient.get(`/activities?user=${userId}&limit=${limit}`);
      console.log('User activities response:', response.data);

      return response.data.data?.activities || response.data.data || response.data || [];
    } catch (error) {
      console.error(`Error fetching activities by user ${userId}:`, error);

      if (error.response) {
        console.error('Response status:', error.response.status);
        console.error('Response data:', error.response.data);
      }

      throw error.response?.data?.message || `Failed to fetch activities by user ${userId}`;
    }
  },

  /**
   * Get activities related to a specific user (as actor or target)
   * @param {string} userId - ID of the user
   * @param {number} limit - Maximum number of activities to fetch
   * @returns {Promise<Array>} - Array of user-related activities
   */
  getUserRelatedActivities: async (userId, limit = 20) => {
    try {
      const params = new URLSearchParams();
      if (limit) params.append('limit', limit);

      console.log(`Fetching activities related to user ${userId}`);
      // This is based on the backend's structure, combining user and targetUser
      const response = await apiClient.get(`/activities?user=${userId}&targetUser=${userId}&limit=${limit}`);
      console.log('User related activities response:', response.data);

      return response.data.data?.activities || response.data.data || response.data || [];
    } catch (error) {
      console.error(`Error fetching activities related to user ${userId}:`, error);

      if (error.response) {
        console.error('Response status:', error.response.status);
        console.error('Response data:', error.response.data);
      }

      throw error.response?.data?.message || `Failed to fetch activities related to user ${userId}`;
    }
  },

  /**
   * Get filtered activities with pagination
   * @param {Object} filters - Filter options
   * @returns {Promise<Object>} - Activities with pagination data
   */
  getActivities: async (filters = {}) => {
    try {
      console.log('Fetching activities with filters:', filters);
      const response = await apiClient.get('/activities', { params: filters });
      console.log('Activities response:', response.data);

      // Handle the response based on your API structure
      if (response.data.data) {
        return response.data.data;
      } else if (response.data) {
        return response.data;
      } else {
        throw new Error('Unexpected response format from server');
      }
    } catch (error) {
      console.error('Error fetching activities with filters:', error);

      if (error.response) {
        console.error('Response status:', error.response.status);
        console.error('Response data:', error.response.data);
      }

      throw error.response?.data?.message || 'Failed to fetch activities';
    }
  }
};

export default activityService;

================
File: src/services/authService.js
================
import apiClient from '../config/axios'

class AuthService {
  /**
   * Login with email and password
   * @param {string} email - User email
   * @param {string} password - User password
   * @returns {Promise<Object>} User data and tokens
   */
  async login(email, password) {
    try {
      const response = await apiClient.post('/auth/login', { email, password })

      if (response.data && response.data.data) {
        // Store tokens
        const { tokens } = response.data.data
        localStorage.setItem('accessToken', tokens.accessToken)
        localStorage.setItem('refreshToken', tokens.refreshToken)

        return response.data.data
      } else {
        throw new Error('Unexpected response format from server')
      }
    } catch (error) {
      if (error.response) {
        // The request was made and the server responded with a status code outside of 2xx
        const message = error.response.data?.message || 'Authentication failed'
        throw new Error(message)
      } else if (error.request) {
        // The request was made but no response was received
        throw new Error('No response from server. Please check your connection.')
      } else {
        // Something happened in setting up the request that triggered an Error
        throw error
      }
    }
  }

  /**
   * Register a new user
   * @param {Object} userData - User registration data
   * @returns {Promise<Object>} Created user and tokens
   */
  async register(userData) {
    try {
      const response = await apiClient.post('/auth/register', userData)

      if (response.data && response.data.data) {
        // Store tokens
        const { tokens } = response.data.data
        localStorage.setItem('accessToken', tokens.accessToken)
        localStorage.setItem('refreshToken', tokens.refreshToken)

        return response.data.data
      } else {
        throw new Error('Unexpected response format from server')
      }
    } catch (error) {
      if (error.response) {
        // Handle specific error codes
        if (error.response.status === 409) {
          throw new Error('Email is already in use')
        }

        const message = error.response.data?.message || 'Registration failed'
        throw new Error(message)
      } else if (error.request) {
        throw new Error('No response from server. Please check your connection.')
      } else {
        throw error
      }
    }
  }

  /**
   * Get current user profile
   * @returns {Promise<Object>} User profile data
   */
  async getUserProfile() {
    try {
      const response = await apiClient.get('/users/profile')

      if (response.data && response.data.data) {
        return response.data.data
      } else {
        throw new Error('Unexpected response format from server')
      }
    } catch (error) {
      if (error.response) {
        // If token expired or invalid, clear local storage
        if (error.response.status === 401) {
          localStorage.removeItem('accessToken')
          localStorage.removeItem('refreshToken')
          throw new Error('Session expired. Please login again.')
        }

        const message = error.response.data?.message || 'Failed to fetch user profile'
        throw new Error(message)
      } else if (error.request) {
        throw new Error('No response from server. Please check your connection.')
      } else {
        throw error
      }
    }
  }

  /**
   * Logout user
   * @returns {Promise<void>}
   */
  async logout() {
    try {
      await apiClient.post('/auth/logout')
    } catch (error) {
      console.error('Logout error:', error)
    } finally {
      // Always clear tokens, even if API call fails
      localStorage.removeItem('accessToken')
      localStorage.removeItem('refreshToken')
    }
  }

  /**
   * Request password reset
   * @param {string} email - User email
   * @returns {Promise<Object>} Success message
   */
  async forgotPassword(email) {
    try {
      const response = await apiClient.post('/auth/forgot-password', { email })
      return response.data
    } catch (error) {
      if (error.response) {
        const message = error.response.data?.message || 'Failed to send password reset email'
        throw new Error(message)
      } else if (error.request) {
        throw new Error('No response from server. Please check your connection.')
      } else {
        throw error
      }
    }
  }

  /**
   * Reset password with token
   * @param {string} token - Password reset token
   * @param {string} newPassword - New password
   * @param {string} confirmPassword - Confirm new password
   * @returns {Promise<Object>} Success message
   */
  async resetPassword(token, newPassword, confirmPassword) {
    try {
      const response = await apiClient.post('/auth/reset-password', {
        token,
        newPassword,
        confirmPassword
      })
      return response.data
    } catch (error) {
      if (error.response) {
        // Handle specific error cases
        if (error.response.status === 400) {
          throw new Error('Invalid or expired token')
        }

        const message = error.response.data?.message || 'Failed to reset password'
        throw new Error(message)
      } else if (error.request) {
        throw new Error('No response from server. Please check your connection.')
      } else {
        throw error
      }
    }
  }

  /**
   * Change user password
   * @param {string} currentPassword - Current password
   * @param {string} newPassword - New password
   * @param {string} confirmPassword - Confirm new password
   * @returns {Promise<Object>} Success message
   */
  async changePassword(currentPassword, newPassword, confirmPassword) {
    try {
      const response = await apiClient.post('/auth/change-password', {
        currentPassword,
        newPassword,
        confirmPassword
      })
      return response.data
    } catch (error) {
      if (error.response) {
        // Handle specific error codes
        if (error.response.status === 400) {
          throw new Error('Current password is incorrect or new password does not meet requirements')
        }

        const message = error.response.data?.message || 'Failed to change password'
        throw new Error(message)
      } else if (error.request) {
        throw new Error('No response from server. Please check your connection.')
      } else {
        throw error
      }
    }
  }

  /**
   * Refresh access token
   * @param {string} refreshToken - Refresh token
   * @returns {Promise<Object>} New tokens
   */
  async refreshToken(refreshToken) {
    try {
      const response = await apiClient.post('/auth/refresh-token', { refreshToken })

      if (response.data && response.data.data) {
        return response.data.data
      } else {
        throw new Error('Unexpected response format from server')
      }
    } catch (error) {
      if (error.response) {
        // Clear tokens on invalid refresh token
        if (error.response.status === 401) {
          localStorage.removeItem('accessToken')
          localStorage.removeItem('refreshToken')
        }

        const message = error.response.data?.message || 'Failed to refresh token'
        throw new Error(message)
      } else if (error.request) {
        throw new Error('No response from server. Please check your connection.')
      } else {
        throw error
      }
    }
  }

  /**
   * Check if user is authenticated
   * @returns {boolean} Authentication status
   */
  isAuthenticated() {
    return !!localStorage.getItem('accessToken')
  }
}

export default new AuthService()

================
File: src/services/commentService.js
================
import apiClient from '../config/axios';

class CommentService {
  /**
   * Get comments with optional filters
   */
  async getComments(filters = {}) {
    const response = await apiClient.get('/comments', { params: filters });
    return response.data.data;
  }

  /**
   * Get a specific comment by ID
   */
  async getCommentById(commentId) {
    const response = await apiClient.get(`/comments/${commentId}`);
    return response.data.data;
  }

  /**
   * Create a new comment
   */
  async createComment(commentData) {
    const response = await apiClient.post('/comments', commentData);
    return response.data.data;
  }

  /**
   * Update an existing comment
   */
  async updateComment(commentId, commentData) {
    const response = await apiClient.put(`/comments/${commentId}`, commentData);
    return response.data.data;
  }

  /**
   * Delete a comment
   */
  async deleteComment(commentId) {
    const response = await apiClient.delete(`/comments/${commentId}`);
    return response.data;
  }

  /**
   * Toggle like on a comment
   */
  async toggleLike(commentId) {
    const response = await apiClient.post(`/comments/${commentId}/like`);
    return response.data.data;
  }

  /**
   * Get replies to a comment
   */
  async getCommentReplies(commentId) {
    const response = await apiClient.get(`/comments/${commentId}/replies`);
    return response.data.data;
  }
}

export default new CommentService();

================
File: src/services/noteService.js
================
import apiClient from '../config/axios'

class NoteService {
  /**
   * Get all notes with optional filters
   * @param {Object} filters - Note filters
   * @returns {Promise<Object>} Notes and pagination data
   */
  async getNotes(filters = {}) {
    try {
      const response = await apiClient.get('/notes', { params: filters })

      // O backend retorna { status: 'success', data: { notes: [], total, page, limit, pages } }
      if (response.data && response.data.status === 'success') {
        return response.data.data
      } else {
        throw new Error('Formato de resposta inesperado do servidor')
      }
    } catch (error) {
      // Propagando o erro original para que o componente possa tratá-lo
      throw this._handleError(error, 'Falha ao buscar notas')
    }
  }

  /**
   * Get a specific note by ID
   * @param {string} noteId - Note ID
   * @returns {Promise<Object>} Note data
   */
  async getNoteById(noteId) {
    try {
      const response = await apiClient.get(`/notes/${noteId}`);

      // O backend retorna { status: 'success', data: {...} }
      if (response.data && response.data.status === 'success') {
        return response.data.data;
      } else {
        throw new Error('Formato de resposta inesperado do servidor');
      }
    } catch (error) {
      // Propagando o erro original para que o componente possa tratá-lo
      throw this._handleError(error, `Falha ao buscar nota com ID: ${noteId}`)
    }
  }

  /**
   * Create a new note
   * @param {Object} noteData - Note data
   * @returns {Promise<Object>} Created note
   */
  async createNote(noteData) {
    try {
      // Ensure category is valid if provided
      if (noteData.category && !['general', 'personal', 'work', 'important', 'idea'].includes(noteData.category)) {
        noteData.category = 'general'; // Default to general if invalid
      }

      const response = await apiClient.post('/notes', noteData)

      // O backend retorna { status: 'success', message: '...', data: {...} }
      if (response.data && response.data.status === 'success') {
        return response.data.data
      } else {
        throw new Error('Formato de resposta inesperado do servidor')
      }
    } catch (error) {
      throw this._handleError(error, 'Falha ao criar nota')
    }
  }

  /**
   * Update an existing note
   * @param {string} noteId - Note ID
   * @param {Object} noteData - Updated note data
   * @returns {Promise<Object>} Updated note
   */
  async updateNote(noteId, noteData) {
    try {
      // Ensure category is valid if provided
      if (noteData.category && !['general', 'personal', 'work', 'important', 'idea'].includes(noteData.category)) {
        noteData.category = 'general'; // Default to general if invalid
      }

      const response = await apiClient.put(`/notes/${noteId}`, noteData)

      // O backend retorna { status: 'success', message: '...', data: {...} }
      if (response.data && response.data.status === 'success') {
        return response.data.data
      } else {
        throw new Error('Formato de resposta inesperado do servidor')
      }
    } catch (error) {
      throw this._handleError(error, `Falha ao atualizar nota com ID: ${noteId}`)
    }
  }

  /**
   * Delete a note
   * @param {string} noteId - Note ID
   * @returns {Promise<boolean>} Success indicator
   */
  async deleteNote(noteId) {
    try {
      const response = await apiClient.delete(`/notes/${noteId}`)

      // O backend retorna { status: 'success', message: '...' }
      return response.data.status === 'success'
    } catch (error) {
      throw this._handleError(error, `Falha ao excluir nota com ID: ${noteId}`)
    }
  }

  /**
   * Pin a note
   * @param {string} noteId - Note ID
   * @returns {Promise<Object>} Updated note
   */
  async pinNote(noteId) {
    try {
      const response = await apiClient.patch(`/notes/${noteId}/pin`)

      // O backend retorna { status: 'success', message: '...', data: {...} }
      if (response.data && response.data.status === 'success') {
        return response.data.data
      } else {
        throw new Error('Formato de resposta inesperado do servidor')
      }
    } catch (error) {
      throw this._handleError(error, `Falha ao fixar nota com ID: ${noteId}`)
    }
  }

  /**
   * Unpin a note
   * @param {string} noteId - Note ID
   * @returns {Promise<Object>} Updated note
   */
  async unpinNote(noteId) {
    try {
      const response = await apiClient.patch(`/notes/${noteId}/unpin`)

      // O backend retorna { status: 'success', message: '...', data: {...} }
      if (response.data && response.data.status === 'success') {
        return response.data.data
      } else {
        throw new Error('Formato de resposta inesperado do servidor')
      }
    } catch (error) {
      throw this._handleError(error, `Falha ao desafixar nota com ID: ${noteId}`)
    }
  }

  /**
   * Get note statistics
   * @returns {Promise<Object>} Note statistics
   */
  async getNoteStatistics() {
    try {
      const response = await apiClient.get('/notes/statistics')

      // O backend retorna { status: 'success', data: {...} }
      if (response.data && response.data.status === 'success') {
        return response.data.data
      } else {
        throw new Error('Formato de resposta inesperado do servidor')
      }
    } catch (error) {
      throw this._handleError(error, 'Falha ao buscar estatísticas das notas')
    }
  }

  /**
   * Helper method to handle and standardize errors
   * @private
   */
  _handleError(error, defaultMessage) {
    // Se o erro tiver uma resposta da API
    if (error.response) {
      // Verifica erros específicos
      if (error.response.status === 403) {
        error.permissionDenied = true; // Flag para identificar erros de permissão
        return new Error(error.response.data?.message || 'Você não tem permissão para realizar esta operação');
      }

      if (error.response.status === 404) {
        return new Error(error.response.data?.message || 'Recurso não encontrado');
      }

      // Erros de validação
      if (error.response.status === 400 && error.response.data?.errors) {
        const validationErrors = error.response.data.errors;
        const errorMessages = Object.values(validationErrors).join(', ');
        return new Error(`Erro de validação: ${errorMessages}`);
      }

      // Usa a mensagem da API ou a mensagem padrão
      return new Error(error.response.data?.message || defaultMessage);
    }

    // Se o erro for de conexão
    if (error.request) {
      return new Error('Sem resposta do servidor. Verifique sua conexão.');
    }

    // Para outros erros
    return error;
  }
}

export default new NoteService()

================
File: src/services/taskService.js
================
import apiClient from '../config/axios'

class TaskService {
  /**
   * Get all tasks with optional filters
   * @param {Object} filters - Task filters
   * @returns {Promise<Object>} Tasks and pagination data
   */
  async getTasks(filters = {}) {
    try {
      const response = await apiClient.get('/tasks', { params: filters })

      // Verifica ambos os formatos possíveis de resposta
      if (response.data && response.data.status === 'success') {
        return response.data.data
      } else if (response.data && response.data.data) {
        return response.data.data
      } else {
        throw new Error('Formato de resposta inesperado do servidor')
      }
    } catch (error) {
      throw this._handleError(error, 'Falha ao buscar tarefas')
    }
  }

/**
 * Get a specific task by ID
 * @param {string} taskId - Task ID
 * @returns {Promise<Object>} Task data
 */
async getTaskById(taskId) {
  // Check if taskId is valid to prevent unnecessary API calls
  if (!taskId) {
    throw new Error('Task ID is required');
  }

  try {
    const response = await apiClient.get(`/tasks/${taskId}`);

    // Better error handling for empty responses
    if (!response || !response.data) {
      throw new Error('Received empty response from server');
    }

    // Normalized response data extraction
    let taskData;
    if (response.data.status === 'success' && response.data.data) {
      taskData = response.data.data;
    } else if (response.data.data) {
      taskData = response.data.data;
    } else if (response.data) {
      // Direct response object (fallback)
      taskData = response.data;
    } else {
      throw new Error('Formato de resposta inesperado do servidor');
    }

    // Validate that we have a task object
    if (!taskData || !taskData._id) {
      throw new Error(`Task with ID ${taskId} not found or has invalid format`);
    }

    // Add client cache timestamp for debugging
    taskData._fetchedAt = new Date().toISOString();

    return taskData;
  } catch (error) {
    // Enhanced error handling with more detail
    console.error(`Error fetching task ${taskId}:`, error);

    // Custom error for network issues
    if (error.message === 'Network Error') {
      throw new Error('Não foi possível conectar ao servidor. Verifique sua conexão de internet.');
    }

    // Handle 404 errors specifically
    if (error.response && error.response.status === 404) {
      throw new Error(`Tarefa com ID ${taskId} não encontrada.`);
    }

    throw this._handleError(error, `Falha ao buscar tarefa com ID: ${taskId}`);
  }
}

  /**
   * Create a new task
   * @param {Object} taskData - Task data
   * @returns {Promise<Object>} Created task
   */
  async createTask(taskData) {
    try {
      const response = await apiClient.post('/tasks', taskData)

      if (response.data && response.data.status === 'success') {
        return response.data.data
      } else if (response.data && response.data.data) {
        return response.data.data
      } else {
        throw new Error('Formato de resposta inesperado do servidor')
      }
    } catch (error) {
      throw this._handleError(error, 'Falha ao criar tarefa')
    }
  }

  /**
   * Update an existing task
   * @param {string} taskId - Task ID
   * @param {Object} taskData - Updated task data
   * @returns {Promise<Object>} Updated task
   */
  async updateTask(taskId, taskData) {
    try {
      const response = await apiClient.put(`/tasks/${taskId}`, taskData)

      if (response.data && response.data.status === 'success') {
        return response.data.data
      } else if (response.data && response.data.data) {
        return response.data.data
      } else {
        throw new Error('Formato de resposta inesperado do servidor')
      }
    } catch (error) {
      throw this._handleError(error, `Falha ao atualizar tarefa com ID: ${taskId}`)
    }
  }

  /**
   * Delete a task
   * @param {string} taskId - Task ID
   * @returns {Promise<boolean>} Success indicator
   */
  async deleteTask(taskId) {
    try {
      const response = await apiClient.delete(`/tasks/${taskId}`)

      // Para deletar, só precisamos saber se foi bem-sucedido
      return response.data && response.data.status === 'success'
    } catch (error) {
      throw this._handleError(error, `Falha ao excluir tarefa com ID: ${taskId}`)
    }
  }

  /**
   * Archive a task
   * @param {string} taskId - Task ID
   * @returns {Promise<Object>} Updated task
   */
  async archiveTask(taskId) {
    try {
      const response = await apiClient.patch(`/tasks/${taskId}/archive`)

      if (response.data && response.data.status === 'success') {
        return response.data.data
      } else if (response.data && response.data.data) {
        return response.data.data
      } else {
        throw new Error('Formato de resposta inesperado do servidor')
      }
    } catch (error) {
      throw this._handleError(error, `Falha ao arquivar tarefa com ID: ${taskId}`)
    }
  }

  /**
   * Restore an archived task
   * @param {string} taskId - Task ID
   * @returns {Promise<Object>} Updated task
   */
  async restoreTask(taskId) {
    try {
      const response = await apiClient.patch(`/tasks/${taskId}/restore`)

      if (response.data && response.data.status === 'success') {
        return response.data.data
      } else if (response.data && response.data.data) {
        return response.data.data
      } else {
        throw new Error('Formato de resposta inesperado do servidor')
      }
    } catch (error) {
      throw this._handleError(error, `Falha ao restaurar tarefa com ID: ${taskId}`)
    }
  }

  /**
   * Assign a user to a task
   * @param {string} taskId - Task ID
   * @param {string} userId - User ID to assign
   * @returns {Promise<Object>} Updated task
   */
  async assignUser(taskId, userId) {
    try {
      const response = await apiClient.post(`/tasks/${taskId}/assignees/${userId}`)

      if (response.data && response.data.status === 'success') {
        return response.data.data
      } else if (response.data && response.data.data) {
        return response.data.data
      } else {
        throw new Error('Formato de resposta inesperado do servidor')
      }
    } catch (error) {
      throw this._handleError(error, `Falha ao atribuir usuário à tarefa`)
    }
  }

  /**
   * Unassign a user from a task
   * @param {string} taskId - Task ID
   * @param {string} userId - User ID to unassign
   * @returns {Promise<Object>} Updated task
   */
  async unassignUser(taskId, userId) {
    try {
      const response = await apiClient.delete(`/tasks/${taskId}/assignees/${userId}`)

      if (response.data && response.data.status === 'success') {
        return response.data.data
      } else if (response.data && response.data.data) {
        return response.data.data
      } else {
        throw new Error('Formato de resposta inesperado do servidor')
      }
    } catch (error) {
      throw this._handleError(error, `Falha ao remover usuário da tarefa`)
    }
  }

  /**
   * Get task statistics
   * @param {Object} filters - Optional filters
   * @returns {Promise<Object>} Task statistics
   */
  async getTaskStatistics(filters = {}) {
    try {
      const response = await apiClient.get('/tasks/statistics', { params: filters })

      if (response.data && response.data.status === 'success') {
        return response.data.data
      } else if (response.data && response.data.data) {
        return response.data.data
      } else {
        throw new Error('Formato de resposta inesperado do servidor')
      }
    } catch (error) {
      throw this._handleError(error, 'Falha ao buscar estatísticas das tarefas')
    }
  }

  /**
   * Helper method to handle and standardize errors
   * @private
   */
  _handleError(error, defaultMessage) {
    // Se o erro tiver uma resposta da API
    if (error.response) {
      // Verifica erros específicos
      if (error.response.status === 403) {
        error.permissionDenied = true; // Flag para identificar erros de permissão
        return new Error(error.response.data?.message || 'Você não tem permissão para realizar esta operação');
      }

      if (error.response.status === 404) {
        return new Error(error.response.data?.message || 'Recurso não encontrado');
      }

      // Erros de validação
      if (error.response.status === 400 && error.response.data?.errors) {
        const validationErrors = error.response.data.errors;
        const errorMessages = Object.values(validationErrors).join(', ');
        return new Error(`Erro de validação: ${errorMessages}`);
      }

      // Usa a mensagem da API ou a mensagem padrão
      return new Error(error.response.data?.message || defaultMessage);
    }

    // Se o erro for de conexão
    if (error.request) {
      return new Error('Sem resposta do servidor. Verifique sua conexão.');
    }

    // Para outros erros
    return error;
  }
  // Add these methods to your taskService.js file

/**
 * Get tasks by date range (for calendar views)
 * @param {Date} startDate - Start date for the range
 * @param {Date} endDate - End date for the range
 * @param {Object} additionalFilters - Additional filters to apply
 * @returns {Promise<Array>} Tasks within the date range
 */
async getTasksByDateRange(startDate, endDate, additionalFilters = {}) {
  try {
    const filters = {
      ...additionalFilters,
      dueStart: startDate.toISOString(),
      dueEnd: endDate.toISOString()
    };

    const response = await apiClient.get('/tasks', { params: filters });

    if (response.data && response.data.status === 'success') {
      return response.data.data.tasks || [];
    } else if (response.data && response.data.data) {
      return response.data.data.tasks || [];
    } else {
      throw new Error('Unexpected response format from server');
    }
  } catch (error) {
    throw this._handleError(error, 'Failed to fetch tasks for the specified date range');
  }
}

/**
 * Get tasks scheduled for a specific day
 * @param {Date} date - The specific date
 * @param {Object} additionalFilters - Additional filters to apply
 * @returns {Promise<Array>} Tasks for the specified day
 */
async getTasksForDay(date, additionalFilters = {}) {
  // Create start and end dates for the specified day
  const startDate = new Date(date);
  startDate.setHours(0, 0, 0, 0);

  const endDate = new Date(date);
  endDate.setHours(23, 59, 59, 999);

  return this.getTasksByDateRange(startDate, endDate, additionalFilters);
}

/**
 * Get tasks scheduled for the current week
 * @param {Date} date - A date within the week
 * @param {Object} additionalFilters - Additional filters to apply
 * @returns {Promise<Array>} Tasks for the current week
 */
async getTasksForWeek(date, additionalFilters = {}) {
  // Find the first day of the week (Sunday)
  const startDate = new Date(date);
  const dayOfWeek = startDate.getDay();
  startDate.setDate(startDate.getDate() - dayOfWeek);
  startDate.setHours(0, 0, 0, 0);

  // Find the last day of the week (Saturday)
  const endDate = new Date(startDate);
  endDate.setDate(endDate.getDate() + 6);
  endDate.setHours(23, 59, 59, 999);

  return this.getTasksByDateRange(startDate, endDate, additionalFilters);
}

/**
 * Get tasks scheduled for the current month
 * @param {Date} date - A date within the month
 * @param {Object} additionalFilters - Additional filters to apply
 * @returns {Promise<Array>} Tasks for the current month
 */
async getTasksForMonth(date, additionalFilters = {}) {
  // Find the first day of the month
  const startDate = new Date(date.getFullYear(), date.getMonth(), 1);
  startDate.setHours(0, 0, 0, 0);

  // Find the last day of the month
  const endDate = new Date(date.getFullYear(), date.getMonth() + 1, 0);
  endDate.setHours(23, 59, 59, 999);

  return this.getTasksByDateRange(startDate, endDate, additionalFilters);
}

/**
 * Get upcoming tasks for a specified number of days
 * @param {number} days - Number of days to look ahead
 * @param {Object} additionalFilters - Additional filters to apply
 * @returns {Promise<Array>} Upcoming tasks
 */
async getUpcomingTasks(days = 30, additionalFilters = {}) {
  const startDate = new Date();
  startDate.setHours(0, 0, 0, 0);

  const endDate = new Date();
  endDate.setDate(endDate.getDate() + days);
  endDate.setHours(23, 59, 59, 999);

  return this.getTasksByDateRange(startDate, endDate, additionalFilters);
}

/**
 * Get overdue tasks
 * @param {Object} additionalFilters - Additional filters to apply
 * @returns {Promise<Array>} Overdue tasks
 */
async getOverdueTasks(additionalFilters = {}) {
  const endDate = new Date();
  endDate.setHours(0, 0, 0, 0);

  // Set start date to a very old date to capture all overdue tasks
  const startDate = new Date(2000, 0, 1);

  // Exclude completed tasks
  const filters = {
    ...additionalFilters,
    status: ['todo', 'inProgress', 'inReview']
  };

  return this.getTasksByDateRange(startDate, endDate, filters);
}
}

export default new TaskService()

================
File: src/services/userService.js
================
import apiClient from '../config/axios'

class UserService {
  /**
   * Get current user profile
   * @returns {Promise<Object>} User profile data
   */
  async getProfile() {
    try {
      const response = await apiClient.get('/users/profile')
      return response.data.data
    } catch (error) {
      this._handleError(error, 'Failed to fetch user profile')
    }
  }

  /**
   * Update user profile
   * @param {Object} profileData - Profile data to update
   * @returns {Promise<Object>} Updated user data
   */
  async updateProfile(profileData) {
    try {
      const response = await apiClient.put('/users/profile', profileData)
      return response.data.data
    } catch (error) {
      throw this._handleError(error, 'Failed to update profile')
    }
  }

  /**
   * Update user preferences
   * @param {Object} preferencesData - Preferences data to update
   * @returns {Promise<Object>} Updated user data
   */
  async updatePreferences(preferencesData) {
    try {
      const response = await apiClient.put('/users/profile/preferences', preferencesData)
      return response.data.data
    } catch (error) {
      throw this._handleError(error, 'Failed to update preferences')
    }
  }

  /**
   * Update user avatar
   * @param {string} avatarUrl - URL or base64 image data
   * @returns {Promise<Object>} Updated user data
   */
  async updateAvatar(avatarUrl) {
    try {
      const response = await apiClient.put('/users/profile/avatar', { avatar: avatarUrl })
      return response.data.data
    } catch (error) {
      throw this._handleError(error, 'Failed to update avatar')
    }
  }

  /**
   * Change user password
   * @param {Object} passwordData - Password change data
   * @returns {Promise<Object>} Success message
   */
  async changePassword(passwordData) {
    try {
      const response = await apiClient.post('/auth/change-password', passwordData)
      return response.data
    } catch (error) {
      throw this._handleError(error, 'Failed to change password')
    }
  }

  /**
   * Deactivate current user's account
   * @returns {Promise<boolean>} Success indicator
   */
  async deactivateAccount() {
    try {
      await apiClient.patch('/users/profile/deactivate')
      return true
    } catch (error) {
      throw this._handleError(error, 'Failed to deactivate account')
    }
  }

  /**
   * Get user statistics
   * @returns {Promise<Object>} User statistics
   */
  async getUserStatistics() {
    try {
      const response = await apiClient.get('/users/profile/statistics')
      return response.data.data
    } catch (error) {
      throw this._handleError(error, 'Failed to fetch user statistics')
    }
  }

  /**
   * Get a user by ID (admin/manager only)
   * @param {string} userId - User ID
   * @returns {Promise<Object>} User data
   */
  async getUserById(userId) {
    try {
      const response = await apiClient.get(`/users/${userId}`)
      return response.data.data
    } catch (error) {
      throw this._handleError(error, 'Failed to fetch user')
    }
  }

  /**
   * Get all users with filters (admin/manager only)
   * @param {Object} filters - Filters for the user list
   * @returns {Promise<Object>} Users list with pagination
   */
  async getUsers(filters = {}) {
    try {
      const response = await apiClient.get('/users', { params: filters })
      return response.data.data
    } catch (error) {
      throw this._handleError(error, 'Failed to fetch users')
    }
  }

  /**
   * Helper to handle errors
   * @private
   * @param {Error} error - The caught error
   * @param {string} defaultMessage - Default error message
   * @returns {Error} Processed error
   */
  _handleError(error, defaultMessage) {
    if (error.response) {
      // The request was made and the server responded with a status code
      // that falls out of the range of 2xx
      const message = error.response.data?.message || defaultMessage
      return new Error(message)
    } else if (error.request) {
      // The request was made but no response was received
      return new Error('No response from server. Please check your connection.')
    } else {
      // Something happened in setting up the request that triggered an Error
      return error
    }
  }
}

export default new UserService()

================
File: src/styles/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Base styles */
@layer base {
  body {
    @apply bg-gray-50 text-gray-900 font-sans;
  }

  h1, h2, h3, h4, h5, h6 {
    @apply font-medium;
  }
}


/* Custom component styles */
@layer components {
  /* Buttons */
  .btn {
    @apply flex items-center justify-center px-4 py-2 rounded-xl font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2;
  }

  .btn-primary {
    @apply bg-violet-600 text-white hover:bg-violet-700 focus:ring-violet-500;
  }

  .btn-secondary {
    @apply bg-gray-100 text-gray-800 hover:bg-gray-200 focus:ring-gray-500;
  }

  .btn-outline {
    @apply border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 focus:ring-violet-500;
  }

  .btn-sm {
    @apply px-3 py-1.5 text-sm;
  }

  .btn-lg {
    @apply px-6 py-3 text-lg;
  }

  /* Form inputs */
  .input {
    @apply w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500;
  }

  .input-icon {
    @apply pl-12;
  }

  .label {
    @apply block text-sm font-medium text-gray-700 mb-1;
  }

  .error {
    @apply text-red-600 text-sm mt-1;
  }

  /* Cards */
  .card {
    @apply bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden;
  }

  .card-header {
    @apply p-6 border-b border-gray-200;
  }

  .card-body {
    @apply p-6;
  }

  .card-footer {
    @apply p-6 bg-gray-50 border-t border-gray-200;
  }

  /* Navlinks */
  .nav-link {
    @apply flex items-center gap-3 px-4 py-3 rounded-lg text-gray-700 hover:bg-gray-100 font-medium transition-colors;
  }

  .nav-link.active {
    @apply bg-violet-50 text-violet-700;
  }

  /* Badge */
  .badge {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
  }

  .badge-primary {
    @apply bg-violet-100 text-violet-800;
  }

  .badge-success {
    @apply bg-green-100 text-green-800;
  }

  .badge-warning {
    @apply bg-yellow-100 text-yellow-800;
  }

  .badge-danger {
    @apply bg-red-100 text-red-800;
  }

  /* Utility classes */
  .pattern-dots-sm {
    background-image: url("data:image/svg+xml,%3Csvg width='20' height='20' viewBox='0 0 20 20' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M5 10C5 10.5523 4.55228 11 4 11C3.44772 11 3 10.5523 3 10C3 9.44772 3.44772 9 4 9C4.55228 9 5 9.44772 5 10Z' fill='%23ffffff'/%3E%3Cpath d='M11 10C11 10.5523 10.5523 11 10 11C9.44771 11 9 10.5523 9 10C9 9.44772 9.44771 9 10 9C10.5523 9 11 9.44772 11 10Z' fill='%23ffffff'/%3E%3Cpath d='M17 10C17 10.5523 16.5523 11 16 11C15.4477 11 15 10.5523 15 10C15 9.44772 15.4477 9 16 9C16.5523 9 17 9.44772 17 10Z' fill='%23ffffff'/%3E%3C/svg%3E");
  }

  .pattern-dots-md {
    background-image: url("data:image/svg+xml,%3Csvg width='30' height='30' viewBox='0 0 30 30' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M7.5 15C7.5 15.8284 6.82843 16.5 6 16.5C5.17157 16.5 4.5 15.8284 4.5 15C4.5 14.1716 5.17157 13.5 6 13.5C6.82843 13.5 7.5 14.1716 7.5 15Z' fill='%23ffffff'/%3E%3Cpath d='M16.5 15C16.5 15.8284 15.8284 16.5 15 16.5C14.1716 16.5 13.5 15.8284 13.5 15C13.5 14.1716 14.1716 13.5 15 13.5C15.8284 13.5 16.5 14.1716 16.5 15Z' fill='%23ffffff'/%3E%3Cpath d='M25.5 15C25.5 15.8284 24.8284 16.5 24 16.5C23.1716 16.5 22.5 15.8284 22.5 15C22.5 14.1716 23.1716 13.5 24 13.5C24.8284 13.5 25.5 14.1716 25.5 15Z' fill='%23ffffff'/%3E%3C/svg%3E");
  }

  .pattern-dots-lg {
    background-image: url("data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 40 40' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M10 20C10 21.1046 9.10457 22 8 22C6.89543 22 6 21.1046 6 20C6 18.8954 6.89543 18 8 18C9.10457 18 10 18.8954 10 20Z' fill='%23ffffff'/%3E%3Cpath d='M22 20C22 21.1046 21.1046 22 20 22C18.8954 22 18 21.1046 18 20C18 18.8954 18.8954 18 20 18C21.1046 18 22 18.8954 22 20Z' fill='%23ffffff'/%3E%3Cpath d='M34 20C34 21.1046 33.1046 22 32 22C30.8954 22 30 21.1046 30 20C30 18.8954 30.8954 18 32 18C33.1046 18 34 18.8954 34 20Z' fill='%23ffffff'/%3E%3C/svg%3E");
  }

  .pattern-grid {
    background-image: url("data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 40 40' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23ffffff' fill-opacity='0.1' fill-rule='evenodd'%3E%3Cpath d='M0 0h20v20H0V0zm20 20h20v20H20V20z'/%3E%3C/g%3E%3C/svg%3E");
  }

  .pattern-diagonal-lines {
    background-image: url("data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 40 40' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0 40L40 0H20L0 20M40 40V20L20 40' stroke='%23ffffff' stroke-width='1' stroke-opacity='0.1' fill='none' fill-rule='evenodd'/%3E%3C/svg%3E");
  }

  /* Animation utilities */
  .animate-fadeIn {
    animation: fadeIn 0.3s ease-in-out;
  }

  .animate-slideUp {
    animation: slideUp 0.3s ease-in-out;
  }

  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
}

/* Animations */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideUp {
  from {
    transform: translateY(20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

================
File: src/styles/themes.css
================
/* Base variables for both themes */
:root {
  /* Common neutral colors */
  --color-white: #ffffff;
  --color-black: #000000;

  /* Base colors for light theme (default) */
  --bg-primary: #ffffff;
  --bg-secondary: #f9fafb;
  --bg-tertiary: #f3f4f6;

  --text-primary: #111827;
  --text-secondary: #4b5563;
  --text-tertiary: #6b7280;

  --border-color: #e5e7eb;
  --hover-bg: #f3f4f6;

  /* Brand colors remain the same regardless of theme */
  --brand-primary: #6366f1;
  --brand-primary-hover: #4f46e5;
  --brand-primary-active: #4338ca;
  --brand-light: #eef2ff;

  /* Status colors */
  --success: #10b981;
  --warning: #f59e0b;
  --error: #ef4444;
  --info: #3b82f6;

  /* Shadows */
  --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
}

/* Light Theme (Explicit) */
.light-theme {
  --bg-primary: #ffffff;
  --bg-secondary: #f9fafb;
  --bg-tertiary: #f3f4f6;

  --text-primary: #111827;
  --text-secondary: #4b5563;
  --text-tertiary: #6b7280;

  --border-color: #e5e7eb;
  --hover-bg: #f3f4f6;

  --card-bg: #ffffff;
  --input-bg: #ffffff;
  --sidebar-bg: #ffffff;
  --header-bg: #ffffff;

  --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
}

/* Dark Theme */
.dark-theme {
  --bg-primary: #111827;
  --bg-secondary: #1f2937;
  --bg-tertiary: #374151;

  --text-primary: #f9fafb;
  --text-secondary: #e5e7eb;
  --text-tertiary: #d1d5db;

  --border-color: #374151;
  --hover-bg: #2d3748;

  --card-bg: #1f2937;
  --input-bg: #374151;
  --sidebar-bg: #1f2937;
  --header-bg: #111827;

  /* Adjust status colors for dark theme */
  --success: #34d399;
  --warning: #fbbf24;
  --error: #f87171;
  --info: #60a5fa;

  /* Adjust shadows for dark theme */
  --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.3);
  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.4), 0 2px 4px -1px rgba(0, 0, 0, 0.2);
  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.5), 0 4px 6px -2px rgba(0, 0, 0, 0.3);
}

/* Apply theme variables to elements - with higher specificity to override Tailwind */
/* General styles */
html body {
  background-color: var(--bg-secondary);
  color: var(--text-primary);
  transition: background-color 0.3s ease, color 0.3s ease;
}

/* Direct Tailwind class overrides */
/* Background colors */
.dark-theme .bg-white {
  background-color: var(--bg-primary) !important;
}

.dark-theme .bg-gray-50 {
  background-color: var(--bg-secondary) !important;
}

.dark-theme .bg-gray-100 {
  background-color: var(--bg-tertiary) !important;
}

/* Text colors */
.dark-theme .text-gray-900 {
  color: var(--text-primary) !important;
}

.dark-theme .text-gray-800,
.dark-theme .text-gray-700 {
  color: var(--text-secondary) !important;
}

.dark-theme .text-gray-600,
.dark-theme .text-gray-500 {
  color: var(--text-tertiary) !important;
}

/* Border colors */
.dark-theme .border,
.dark-theme .border-gray-200,
.dark-theme .border-gray-300 {
  border-color: var(--border-color) !important;
}

/* Components */
.dark-theme .card {
  background-color: var(--card-bg);
  border-color: var(--border-color);
}

.dark-theme input,
.dark-theme select,
.dark-theme textarea {
  background-color: var(--input-bg);
  border-color: var(--border-color);
  color: var(--text-primary);
}

.dark-theme aside {
  background-color: var(--sidebar-bg);
  border-color: var(--border-color);
}

.dark-theme header {
  background-color: var(--header-bg);
  border-color: var(--border-color);
}

/* Hover states */
.dark-theme .hover\:bg-gray-50:hover {
  background-color: var(--hover-bg) !important;
}

.dark-theme .btn-outline {
  background-color: var(--bg-primary);
  border-color: var(--border-color);
  color: var(--text-primary);
}

/* Task board column overrides for dark theme */
/* Todo column (gray) is already handled by general overrides */

/* In Progress column (blue) */
.dark-theme .bg-blue-50 {
  background-color: rgba(59, 130, 246, 0.15) !important; /* dark blue bg */
}

.dark-theme .bg-blue-100 {
  background-color: rgba(59, 130, 246, 0.2) !important; /* darker blue for header */
}

.dark-theme .border-blue-300 {
  border-color: rgba(59, 130, 246, 0.4) !important;
}

.dark-theme .text-blue-800 {
  color: #93c5fd !important; /* lighter blue text for contrast */
}

/* In Review column (amber) */
.dark-theme .bg-amber-50 {
  background-color: rgba(245, 158, 11, 0.15) !important; /* dark amber bg */
}

.dark-theme .bg-amber-100 {
  background-color: rgba(245, 158, 11, 0.2) !important; /* darker amber for header */
}

.dark-theme .border-amber-300 {
  border-color: rgba(245, 158, 11, 0.4) !important;
}

.dark-theme .text-amber-800 {
  color: #fcd34d !important; /* lighter amber text for contrast */
}

/* Done column (green) */
.dark-theme .bg-green-50 {
  background-color: rgba(16, 185, 129, 0.15) !important; /* dark green bg */
}

.dark-theme .bg-green-100 {
  background-color: rgba(16, 185, 129, 0.2) !important; /* darker green for header */
}

.dark-theme .border-green-300 {
  border-color: rgba(16, 185, 129, 0.4) !important;
}

.dark-theme .text-green-800 {
  color: #6ee7b7 !important; /* lighter green text for contrast */
}

/* Dashboard fixes */
/* Progress bars */
.dark-theme .bg-gray-200 {
  background-color: rgba(255, 255, 255, 0.2) !important; /* Darker background for progress bar track */
}

.dark-theme .bg-violet-600,
.dark-theme .bg-primary-600 {
  background-color: #7c3aed !important; /* Brighter violet for progress bar */
}

/* Tasks by Status section */
.dark-theme .bg-gray-50 {
  background-color: var(--bg-secondary) !important;
}

/* Tasks by Priority section */
.dark-theme .bg-blue-50.rounded-lg {
  background-color: rgba(59, 130, 246, 0.15) !important;
}

.dark-theme .bg-orange-50.rounded-lg {
  background-color: rgba(249, 115, 22, 0.15) !important;
}

.dark-theme .bg-red-50.rounded-lg {
  background-color: rgba(239, 68, 68, 0.15) !important;
}

.dark-theme .text-blue-600 {
  color: #93c5fd !important;
}

.dark-theme .text-orange-600 {
  color: #fb923c !important;
}

.dark-theme .text-red-600 {
  color: #f87171 !important;
}

.dark-theme .text-green-600 {
  color: #6ee7b7 !important;
}

/* Shadow overrides */
.dark-theme .shadow-sm {
  box-shadow: var(--shadow-sm) !important;
}

.dark-theme .shadow-md {
  box-shadow: var(--shadow-md) !important;
}

.dark-theme .shadow-lg {
  box-shadow: var(--shadow-lg) !important;
}

================
File: src/utils/calenderUtils.js
================
/**
 * Utility functions for calendar operations
 */

/**
 * Format a date as YYYY-MM-DD
 * @param {Date} date - The date to format
 * @returns {string} Formatted date string
 */
export const formatDateToYYYYMMDD = (date) => {
  if (!date) return '';
  const d = new Date(date);
  const year = d.getFullYear();
  const month = String(d.getMonth() + 1).padStart(2, '0');
  const day = String(d.getDate()).padStart(2, '0');
  return `${year}-${month}-${day}`;
};

/**
 * Format a date as HH:MM
 * @param {Date} date - The date to format
 * @returns {string} Formatted time string
 */
export const formatTimeToHHMM = (date) => {
  if (!date) return '';
  const d = new Date(date);
  const hours = String(d.getHours()).padStart(2, '0');
  const minutes = String(d.getMinutes()).padStart(2, '0');
  return `${hours}:${minutes}`;
};

/**
 * Combine a date string and time string into a Date object
 * @param {string} dateStr - Date string in YYYY-MM-DD format
 * @param {string} timeStr - Time string in HH:MM format
 * @returns {Date|null} Combined date and time as Date object
 */
export const combineDateTime = (dateStr, timeStr) => {
  if (!dateStr) return null;

  const date = new Date(dateStr);

  if (timeStr) {
    const [hours, minutes] = timeStr.split(':').map(Number);
    date.setHours(hours, minutes, 0, 0);
  } else {
    date.setHours(0, 0, 0, 0);
  }

  return date;
};

/**
 * Format a date for display in header
 * @param {Date} date - The date to format
 * @param {string} view - Current calendar view (month, week, day, list)
 * @returns {string} Formatted date string for display
 */
export const formatHeaderDate = (date, view) => {
  if (!date) return '';

  if (view === 'month') {
    return date.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
  } else if (view === 'week') {
    const startOfWeek = new Date(date);
    const dayOfWeek = startOfWeek.getDay();
    startOfWeek.setDate(startOfWeek.getDate() - dayOfWeek);

    const endOfWeek = new Date(startOfWeek);
    endOfWeek.setDate(endOfWeek.getDate() + 6);

    // If start and end are in same month and year
    if (startOfWeek.getMonth() === endOfWeek.getMonth() &&
        startOfWeek.getFullYear() === endOfWeek.getFullYear()) {
      return `${startOfWeek.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}`;
    }
    // If start and end are in same year but different months
    else if (startOfWeek.getFullYear() === endOfWeek.getFullYear()) {
      return `${startOfWeek.toLocaleDateString('en-US', { month: 'long' })} - ${endOfWeek.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}`;
    }
    // If start and end are in different years
    else {
      return `${startOfWeek.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })} - ${endOfWeek.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}`;
    }
  } else if (view === 'day') {
    return date.toLocaleDateString('en-US', {
      weekday: 'long',
      month: 'long',
      day: 'numeric',
      year: 'numeric'
    });
  } else { // list view
    return 'Upcoming Tasks';
  }
};

/**
 * Get an array of days for a month grid
 * @param {Date} date - A date within the month
 * @returns {Date[]} Array of date objects for the month grid
 */
export const getMonthDays = (date) => {
  const days = [];
  const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);
  const startingDayOfWeek = firstDay.getDay();

  // Start from the first day of the week that contains the first day of the month
  const start = new Date(firstDay);
  start.setDate(start.getDate() - startingDayOfWeek);

  // Generate 6 weeks (42 days)
  for (let i = 0; i < 42; i++) {
    days.push(new Date(start));
    start.setDate(start.getDate() + 1);
  }

  return days;
};

/**
 * Get an array of days for a week
 * @param {Date} date - A date within the week
 * @returns {Date[]} Array of date objects for the week
 */
export const getWeekDays = (date) => {
  const days = [];
  const startOfWeek = new Date(date);
  const dayOfWeek = startOfWeek.getDay();
  startOfWeek.setDate(startOfWeek.getDate() - dayOfWeek);

  for (let i = 0; i < 7; i++) {
    days.push(new Date(startOfWeek));
    startOfWeek.setDate(startOfWeek.getDate() + 1);
  }

  return days;
};

/**
 * Generate an array of hours for day view
 * @returns {number[]} Array of hours (0-23)
 */
export const getHoursArray = () => {
  return Array.from({ length: 24 }, (_, i) => i);
};

/**
 * Format hour for display (12-hour format with AM/PM)
 * @param {number} hour - Hour (0-23)
 * @returns {string} Formatted hour string
 */
export const formatHour = (hour) => {
  return hour === 0 ? '12 AM' :
         hour < 12 ? `${hour} AM` :
         hour === 12 ? '12 PM' :
         `${hour - 12} PM`;
};

/**
 * Check if a task is overdue
 * @param {Object} task - Task object with dueDate
 * @returns {boolean} True if task is overdue
 */
export const isTaskOverdue = (task) => {
  if (!task?.dueDate || task.status === 'done') return false;

  const dueDate = new Date(task.dueDate);
  const now = new Date();

  return dueDate < now;
};

/**
 * Get status for a date (Today, Tomorrow, etc.)
 * @param {Date} date - The date to check
 * @returns {Object} Date status with label and CSS class
 */
export const getDateStatus = (date) => {
  const today = new Date();
  today.setHours(0, 0, 0, 0);

  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);

  const yesterday = new Date(today);
  yesterday.setDate(yesterday.getDate() - 1);

  const checkDate = new Date(date);
  checkDate.setHours(0, 0, 0, 0);

  if (checkDate.getTime() === today.getTime()) {
    return { label: 'Today', class: 'bg-blue-100 text-blue-800' };
  } else if (checkDate.getTime() === tomorrow.getTime()) {
    return { label: 'Tomorrow', class: 'bg-purple-100 text-purple-800' };
  } else if (checkDate.getTime() === yesterday.getTime()) {
    return { label: 'Yesterday', class: 'bg-amber-100 text-amber-800' };
  } else if (checkDate < today) {
    return { label: 'Overdue', class: 'bg-red-100 text-red-800' };
  } else {
    // Calculate days difference
    const diffTime = checkDate.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    if (diffDays <= 7) {
      return { label: 'This Week', class: 'bg-green-100 text-green-800' };
    } else if (diffDays <= 14) {
      return { label: 'Next Week', class: 'bg-teal-100 text-teal-800' };
    } else {
      return { label: 'Upcoming', class: 'bg-gray-100 text-gray-800' };
    }
  }
};

/**
 * Get color class based on task priority
 * @param {string} priority - Task priority
 * @returns {string} CSS class for the priority
 */
export const getPriorityColorClass = (priority) => {
  switch (priority) {
    case 'low':
      return 'bg-gray-100 text-gray-800';
    case 'medium':
      return 'bg-blue-100 text-blue-800';
    case 'high':
      return 'bg-orange-100 text-orange-800';
    case 'urgent':
      return 'bg-red-100 text-red-800';
    default:
      return 'bg-gray-100 text-gray-800';
  }
};

/**
 * Get color class based on task status
 * @param {string} status - Task status
 * @returns {string} CSS class for the status
 */
export const getStatusColorClass = (status) => {
  switch (status) {
    case 'todo':
      return 'bg-gray-100 text-gray-800';
    case 'inProgress':
      return 'bg-blue-100 text-blue-800';
    case 'inReview':
      return 'bg-amber-100 text-amber-800';
    case 'done':
      return 'bg-green-100 text-green-800';
    default:
      return 'bg-gray-100 text-gray-800';
  }
};

/**
 * Get border color class based on task status
 * @param {string} status - Task status
 * @returns {string} CSS border class for the status
 */
export const getStatusBorderClass = (status) => {
  switch (status) {
    case 'todo':
      return 'border-gray-300';
    case 'inProgress':
      return 'border-blue-300';
    case 'inReview':
      return 'border-amber-300';
    case 'done':
      return 'border-green-300';
    default:
      return 'border-gray-300';
  }
};

/**
 * Get formatted label for task status
 * @param {string} status - Task status
 * @returns {string} Human-readable status label
 */
export const getStatusLabel = (status) => {
  switch (status) {
    case 'todo':
      return 'To Do';
    case 'inProgress':
      return 'In Progress';
    case 'inReview':
      return 'In Review';
    case 'done':
      return 'Done';
    default:
      return status;
  }
};

export default {
  formatDateToYYYYMMDD,
  formatTimeToHHMM,
  combineDateTime,
  formatHeaderDate,
  getMonthDays,
  getWeekDays,
  getHoursArray,
  formatHour,
  isTaskOverdue,
  getDateStatus,
  getPriorityColorClass,
  getStatusColorClass,
  getStatusBorderClass,
  getStatusLabel
};

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        // Main indigo color palette based on Figma design
        indigo: {
          50: '#eef2ff',
          100: '#e0e7ff',
          200: '#c7d2fe',
          300: '#a5b4fc',
          400: '#818cf8',
          500: '#6366f1',
          600: '#4f46e5', // Primary brand color
          700: '#4338ca',
          800: '#3730a3',
          900: '#312e81',
          950: '#1e1b4b',
        },
        // Supporting slate colors for dark backgrounds
        slate: {
          50: '#f8fafc',
          100: '#f1f5f9',
          200: '#e2e8f0',
          300: '#cbd5e1',
          400: '#94a3b8',
          500: '#64748b',
          600: '#475569',
          700: '#334155',
          800: '#1e293b', // Sidebar background
          900: '#0f172a',
          950: '#020617',
        },
        // Primary and supporting colors
        primary: {
          50: '#eef2ff', // Using indigo as primary
          100: '#e0e7ff',
          200: '#c7d2fe',
          300: '#a5b4fc',
          400: '#818cf8',
          500: '#6366f1',
          600: '#4f46e5',
          700: '#4338ca',
          800: '#3730a3',
          900: '#312e81',
          950: '#1e1b4b',
        },
        success: {
          50: '#ecfdf5',
          100: '#d1fae5',
          200: '#a7f3d0',
          300: '#6ee7b7',
          400: '#34d399',
          500: '#10b981',
          600: '#059669',
          700: '#047857',
          800: '#065f46',
          900: '#064e3b',
          950: '#022c22',
        },
        warning: {
          50: '#fffbeb',
          100: '#fef3c7',
          200: '#fde68a',
          300: '#fcd34d',
          400: '#fbbf24',
          500: '#f59e0b',
          600: '#d97706',
          700: '#b45309',
          800: '#92400e',
          900: '#78350f',
          950: '#451a03',
        },
        danger: {
          50: '#fef2f2',
          100: '#fee2e2',
          200: '#fecaca',
          300: '#fca5a5',
          400: '#f87171',
          500: '#ef4444',
          600: '#dc2626',
          700: '#b91c1c',
          800: '#991b1b',
          900: '#7f1d1d',
          950: '#450a0a',
        },
      },
      fontFamily: {
        sans: ['Inter', 'sans-serif'],
      },
      boxShadow: {
        'card': '0px 4px 6px -1px rgba(0, 0, 0, 0.1), 0px 2px 4px -1px rgba(0, 0, 0, 0.06)',
        'dropdown': '0px 10px 15px -3px rgba(0, 0, 0, 0.1), 0px 4px 6px -2px rgba(0, 0, 0, 0.05)',
      },
      borderRadius: {
        'xl': '0.75rem',
        '2xl': '1rem',
        '3xl': '1.5rem',
      },
    },
  },
  plugins: [],
}

================
File: vite.config.js
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve( './src'),
    },
  },
  optimizeDeps: {
    exclude: ['@dnd-kit/core', '@dnd-kit/sortable', '@dnd-kit/utilities']
  },
  server: {
    port: 3000,
  },
})



================================================================
End of Codebase
================================================================
